[
    {
        "question_title": "has_close_elements",
        "question_content": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/0",
        "contest_id": "HumanEval/0",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float)-> bool:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if abs(numbers[i] - numbers[i + 1]) < threshold:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if abs(numbers[i] - numbers[i + 1]) < threshold:\n                return True\n        return False\n```\n\nThis solution works by first sorting the list of numbers. Then it iterates over the list, comparing each number with the next one. If the difference between any two numbers is less than the threshold, the function returns True. If no such pair of numbers is found after checking all pairs, the function returns False.\n",
            "```python\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if numbers[i+1] - numbers[i] < threshold:\n                return True\n        return False\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list. For each pair of numbers, it checks if the difference is less than the threshold. If it finds such a pair, it returns True. If it doesn't find any such pair after checking all pairs, it returns False.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list. For each pair of numbers, it checks if the difference is less than the threshold. If it finds such a pair, it returns True. If it goes through the entire list without finding such a pair, it returns False.\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if abs(numbers[i] - numbers[i + 1]) < threshold:\n                return True\n        return False",
            "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if abs(numbers[i] - numbers[i + 1]) < threshold:\n                return True\n        return False",
            "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False",
            "from typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False",
            "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False",
            "from typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False",
            "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(len(numbers) - 1):\n            if numbers[i+1] - numbers[i] < threshold:\n                return True\n        return False",
            "from typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False",
            "from typing import List\n\nclass Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] < threshold:\n                return True\n        return False",
            "class Solution:\n    def has_close_elements(self, numbers: List[float], threshold: float) -> bool:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i-1] < threshold:\n                return True\n        return False"
        ]
    },
    {
        "question_title": "separate_paren_groups",
        "question_content": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/1",
        "contest_id": "HumanEval/1",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def separate_paren_groups(self, paren_string: str)-> List[str]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if temp is not empty, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 1:  # if there is only one '(' in the stack, it means we have found a separate group\n                    temp += ')'\n                    result.append(temp)\n                    temp = \"\"\n                else:  # if there are more than one '(' in the stack, we pop them out\n                    temp = ')' + temp\n                stack.pop()\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. When it encounters an open parenthesis, it pushes it into the stack. When it encounters a close parenthesis, it pops the open parenthesis from the stack and adds them to the result. If the stack becomes empty, it means we have found a separate group.\n",
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp != \"\":\n                    stack.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            else:\n                stack.append(char)\n                if len(stack) % 2 == 0:  # If stack has balanced parentheses\n                    temp = \"\".join(stack)\n                    result.append(temp)\n                    stack = []\n                    temp = \"\"\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. It iterates over the string, adding each character to the stack. When it encounters a closed parenthesis, it checks if the stack has balanced parentheses. If it does, it adds the balanced group to the result and clears the stack. The solution assumes that the input string is well-formed and does not contain any invalid characters.\n",
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(' ', '')  # Remove spaces\n        stack = []\n        result = []\n        temp = ''\n        for char in paren_string:\n            if char == '(':\n                if temp:  # If there is a group of parentheses before this\n                    stack.append(temp)\n                    temp = ''\n                stack.append(char)\n            else:\n                stack.append(char)\n                if stack.count('(') == stack.count(')'):  # If the group is balanced\n                    temp = ''.join(stack)\n                    result.append(temp)\n                    stack = []\n                    temp = ''\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. It iterates over the string and pushes each character to the stack. When it encounters a closed parenthesis, it checks if the number of open and closed parentheses are equal. If they are, it means a group of parentheses is balanced, so it adds the group to the result and resets the stack and temp string. If there is a group of parentheses before the balanced group, it adds it to the stack before resetting.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, char in enumerate(paren_string):\n            if char == '(':\n                if not stack:\n                    start = i\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start: i+1])\n        return result\n\nsolution = Solution()\nprint(solution.separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']\n```\n",
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:\n                    stack.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            else:\n                stack.append(char)\n                if len(stack) % 2 == 0:  # if stack has balanced parentheses\n                    temp = \"\".join(stack[-2:])\n                    stack = stack[:-2]\n                    result.append(temp)\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. It iterates over the string, adding each character to the stack. When it encounters a closing parenthesis, it checks if the stack has balanced parentheses. If it does, it adds the balanced group to the result and removes it from the stack. The function returns the list of separated groups.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(' ', '')  # Remove spaces\n        stack = []\n        result = []\n        temp = ''\n        for char in paren_string:\n            if char == '(':\n                if temp:  # If there is a group of parentheses before this, append it to the result list\n                    result.append(temp)\n                    temp = ''\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                temp += char\n                if not stack:  # If the stack is empty, a group of parentheses is completed\n                    result.append(temp)\n                    temp = ''\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. When it encounters an open parenthesis, it pushes it onto the stack. When it encounters a close parenthesis, it pops the last open parenthesis from the stack and adds it to the current group of parentheses. If the stack becomes empty, it means a group of parentheses is completed.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if there is something in temp, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:  # if stack is empty, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n            if stack:  # if stack is not empty, add char to temp\n                temp += char\n        return result\n```\n\nThis solution uses a stack to keep track of the parentheses. It iterates over the string and adds each character to the temp string. When it encounters a ')', it pops the last character from the stack and adds it to the temp string. If the stack becomes empty, it means we have found a separate group, so it adds the temp string to the result and resets the temp string. If the stack is not empty, it means we are still inside a group, so it adds the char to the temp string.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, c in enumerate(paren_string):\n            if c == '(':\n                if not stack:\n                    start = i\n                stack.append(c)\n            elif c == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start:i+1])\n        return result\n```\n\nThis solution works by iterating over the string and using a stack to keep track of the parentheses. When an open parenthesis is encountered, it is pushed onto the stack. When a close parenthesis is encountered, it is popped from the stack. If the stack becomes empty, that means we have found a complete group of parentheses. These groups are then appended to the result list.\n",
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, char in enumerate(paren_string):\n            if char == '(':\n                if not stack:\n                    start = i\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start:i+1])\n        return result\n```\n\nThis solution works by iterating over the string and using a stack to keep track of the parentheses. When an open parenthesis is encountered, it is pushed onto the stack. When a close parenthesis is encountered, it is popped from the stack. If the stack becomes empty, that means we have found a complete group of parentheses. These groups are then appended to the result list.\n",
            "```python\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if there is something in temp, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 1:  # if there is only one '(' in the stack, it means we have found a separate group\n                    temp += ')'\n                    result.append(temp)\n                    temp = \"\"\n                else:  # if there are more than one '(' in the stack, we pop them out\n                    temp = \")\" + temp\n                stack.pop()\n        return result\n```\n\nThis solution works by iterating over the string and using a stack to keep track of the parentheses. When it encounters an open parenthesis, it adds it to the stack. When it encounters a close parenthesis, it pops the last open parenthesis from the stack and adds the parentheses to the result. If the stack becomes empty, it means that we have found a separate group of parentheses.\n"
        ],
        "code_list": [
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if temp is not empty, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 1:  # if there is only one '(' in the stack, it means we have found a separate group\n                    temp += ')'\n                    result.append(temp)\n                    temp = \"\"\n                else:  # if there are more than one '(' in the stack, we pop them out\n                    temp = ')' + temp\n                stack.pop()\n        return result",
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp != \"\":\n                    stack.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            else:\n                stack.append(char)\n                if len(stack) % 2 == 0:  # If stack has balanced parentheses\n                    temp = \"\".join(stack)\n                    result.append(temp)\n                    stack = []\n                    temp = \"\"\n        return result",
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(' ', '')  # Remove spaces\n        stack = []\n        result = []\n        temp = ''\n        for char in paren_string:\n            if char == '(':\n                if temp:  # If there is a group of parentheses before this\n                    stack.append(temp)\n                    temp = ''\n                stack.append(char)\n            else:\n                stack.append(char)\n                if stack.count('(') == stack.count(')'):  # If the group is balanced\n                    temp = ''.join(stack)\n                    result.append(temp)\n                    stack = []\n                    temp = ''\n        return result",
            "from typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, char in enumerate(paren_string):\n            if char == '(':\n                if not stack:\n                    start = i\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start: i+1])\n        return result\n\nsolution = Solution()\nprint(solution.separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']",
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:\n                    stack.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            else:\n                stack.append(char)\n                if len(stack) % 2 == 0:  # if stack has balanced parentheses\n                    temp = \"\".join(stack[-2:])\n                    stack = stack[:-2]\n                    result.append(temp)\n        return result",
            "from typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(' ', '')  # Remove spaces\n        stack = []\n        result = []\n        temp = ''\n        for char in paren_string:\n            if char == '(':\n                if temp:  # If there is a group of parentheses before this, append it to the result list\n                    result.append(temp)\n                    temp = ''\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                temp += char\n                if not stack:  # If the stack is empty, a group of parentheses is completed\n                    result.append(temp)\n                    temp = ''\n        return result",
            "from typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if there is something in temp, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:  # if stack is empty, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n            if stack:  # if stack is not empty, add char to temp\n                temp += char\n        return result",
            "from typing import List\n\nclass Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, c in enumerate(paren_string):\n            if c == '(':\n                if not stack:\n                    start = i\n                stack.append(c)\n            elif c == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start:i+1])\n        return result",
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        result = []\n        stack = []\n        start = 0\n        for i, char in enumerate(paren_string):\n            if char == '(':\n                if not stack:\n                    start = i\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if not stack:\n                    result.append(paren_string[start:i+1])\n        return result",
            "class Solution:\n    def separate_paren_groups(self, paren_string: str) -> List[str]:\n        paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n        stack = []\n        result = []\n        temp = \"\"\n        for char in paren_string:\n            if char == '(':\n                if temp:  # if there is something in temp, it means we have found a separate group\n                    result.append(temp)\n                    temp = \"\"\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 1:  # if there is only one '(' in the stack, it means we have found a separate group\n                    temp += ')'\n                    result.append(temp)\n                    temp = \"\"\n                else:  # if there are more than one '(' in the stack, we pop them out\n                    temp = \")\" + temp\n                stack.pop()\n        return result"
        ]
    },
    {
        "question_title": "make_palindrome",
        "question_content": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/10",
        "contest_id": "HumanEval/10",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def make_palindrome(self, string: str)-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n\nThis solution works by iterating over the string and checking if the suffix of the string from the current index to the end is a palindrome. If it is, it returns the string concatenated with the reverse of the prefix that comes before the palindromic suffix. If no palindromic suffix is found, it returns the string itself.\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n\nThis solution works by iterating over the string and checking if the suffix from the current index to the end of the string is a palindrome. If it is, we append the reversed prefix before the current index to the end of the string to make it a palindrome.\n",
            "```python\nclass Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n```\n\nThis solution works by iterating over the string and checking if the suffix from the current index to the end of the string is a palindrome. If it is, we know that the shortest palindrome that starts with the given string is the original string plus the reverse of the prefix before the palindromic suffix.\n"
        ],
        "code_list": [
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str)-> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]",
            "class Solution:\n    def make_palindrome(self, string: str) -> str:\n        if string == string[::-1]:\n            return string\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]"
        ]
    },
    {
        "question_title": "make_a_pile",
        "question_content": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/100",
        "contest_id": "HumanEval/100",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def make_a_pile(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        if n % 2 == 0:\n            for i in range(n):\n                result.append(n + 2*i)\n        else:\n            for i in range(n):\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        if n % 2 == 0:\n            for i in range(n):\n                result.append(n + 2*i)\n        else:\n            for i in range(n):\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        if n % 2 == 0:\n            for i in range(n):\n                result.append(n + 2*i)\n        else:\n            for i in range(n):\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        if n % 2 == 0:\n            for i in range(n):\n                result.append(n + 2*i)\n        else:\n            for i in range(n):\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result",
            "class Solution:\n    def make_a_pile(self, n):\n        result = []\n        for i in range(n):\n            if n % 2 == 0:\n                result.append(n + 2*i)\n            else:\n                result.append(n + 2*i)\n        return result"
        ]
    },
    {
        "question_title": "words_string",
        "question_content": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/101",
        "contest_id": "HumanEval/101",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def words_string(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n",
            "```python\nclass Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()",
            "class Solution:\n    def words_string(self, s):\n        return s.replace(',', '').split()"
        ]
    },
    {
        "question_title": "choose_num",
        "question_content": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/102",
        "contest_id": "HumanEval/102",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def choose_num(self, x, y):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n\n# Test cases\ns = Solution()\nprint(s.choose_num(12, 15))  # Output: 14\nprint(s.choose_num(13, 12))  # Output: -1\nprint(s.choose_num(14, 15))  # Output: 14\nprint(s.choose_num(15, 16))  # Output: 16\nprint(s.choose_num(16, 17))  # Output: -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n\nThis solution works by first checking if `x` is greater than `y`. If it is, the function returns `-1` as there's no number in the range `[x, y]`.\n\nThen it checks if `x` is even. If it is, the function checks if `y` is also even. If `y` is even, it returns `y`. If `y` is not even, it returns `y - 1`.\n\nIf `x` is not even, the function checks if `y` is even. If `y` is even, it returns `y`. If `y` is not even, it checks if `y - 1` is greater than `x`. If it is, it returns `y - 1`. If `y - 1` is not greater than `x`, it returns `-1`.\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        # Check if x and y are positive\n        if x < 0 or y < 0:\n            return -1\n\n        # Check if x is greater than y\n        if x > y:\n            return -1\n\n        # Loop from y down to x\n        for i in range(y, x-1, -1):\n            # If i is even, return it\n            if i % 2 == 0:\n                return i\n\n        # If no even number is found, return -1\n        return -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n",
            "```python\nclass Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n\n# Test cases\ns = Solution()\nprint(s.choose_num(12, 15))  # Output: 14\nprint(s.choose_num(13, 12))  # Output: -1\nprint(s.choose_num(14, 15))  # Output: 14\nprint(s.choose_num(15, 16))  # Output: 16\nprint(s.choose_num(16, 17))  # Output: -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        # Check if x and y are positive\n        if x < 0 or y < 0:\n            return -1\n\n        # Check if x is greater than y\n        if x > y:\n            return -1\n\n        # Loop from y down to x\n        for i in range(y, x-1, -1):\n            # If i is even, return it\n            if i % 2 == 0:\n                return i\n\n        # If no even number is found, return -1\n        return -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1",
            "class Solution:\n    def choose_num(self, x, y):\n        if x > y:\n            return -1\n        elif x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1"
        ]
    },
    {
        "question_title": "rounded_avg",
        "question_content": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/103",
        "contest_id": "HumanEval/103",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def rounded_avg(self, n, m):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)\n```\n",
            "```python\nclass Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        avg = round((n + m) / 2)\n        return bin(avg)",
            "class Solution:\n    def rounded_avg(self, n, m):\n        if n > m:\n            return -1\n        else:\n            avg = round((n + m) / 2)\n            return bin(avg)"
        ]
    },
    {
        "question_title": "unique_digits",
        "question_content": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/104",
        "contest_id": "HumanEval/104",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def unique_digits(self, x):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases\nsolution = Solution()\nprint(solution.unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(solution.unique_digits([152, 323, 1422, 10]))  # []\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n```\n\nIn this solution, we define a helper function `has_even_digit` that checks if a number has an even digit. We then use a list comprehension to generate a list of numbers from the input list `x` that do not have an even digit. The list is then sorted in increasing order before being returned.\n",
            "```python\nclass Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases\nsolution = Solution()\nprint(solution.unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(solution.unique_digits([152, 323, 1422, 10]))  # []",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        def has_even_digit(n):\n            return any(int(digit) % 2 == 0 for digit in str(n))\n\n        return sorted([num for num in x if not has_even_digit(num)])",
            "class Solution:\n    def unique_digits(self, x):\n        result = []\n        for num in x:\n            if all(int(digit) % 2 != 0 for digit in str(num)):\n                result.append(num)\n        return sorted(result)"
        ]
    },
    {
        "question_title": "by_length",
        "question_content": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/105",
        "contest_id": "HumanEval/105",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def by_length(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out the numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number by its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n\nThis solution first creates a dictionary to map numbers to their names. It then filters out the numbers that are not between 1 and 9 inclusive. After that, it sorts the array in descending order. Finally, it replaces each number by its corresponding name and returns the resulting array.\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out the numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in ascending order\n        arr.sort()\n\n        # Reverse the array\n        arr.reverse()\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort and reverse the array\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its corresponding name\n        return [num_to_name[num] for num in arr]\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        arr = [i for i in arr if 1 <= i <= 9]\n        arr.sort(reverse=True)\n        return [num_to_name[i] for i in arr]\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Define the mapping from numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in reverse order\n        arr.sort(reverse=True)\n\n        # Replace each number with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Define a dictionary that maps numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n        result = []\n        for i in arr:\n            if 1 <= i <= 9:\n                result.append(i)\n        result.sort(reverse=True)\n        return [num2words[i] for i in result]\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Define the mapping from numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n",
            "```python\nclass Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in ascending order\n        arr.sort()\n\n        # Reverse the array\n        arr.reverse()\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out the numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number by its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out the numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in ascending order\n        arr.sort()\n\n        # Reverse the array\n        arr.reverse()\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort and reverse the array\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its corresponding name\n        return [num_to_name[num] for num in arr]",
            "class Solution:\n    def by_length(self, arr):\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        arr = [i for i in arr if 1 <= i <= 9]\n        arr.sort(reverse=True)\n        return [num_to_name[i] for i in arr]",
            "class Solution:\n    def by_length(self, arr):\n        # Define the mapping from numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in reverse order\n        arr.sort(reverse=True)\n\n        # Replace each number with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        # Define a dictionary that maps numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n        result = []\n        for i in arr:\n            if 1 <= i <= 9:\n                result.append(i)\n        result.sort(reverse=True)\n        return [num2words[i] for i in result]",
            "class Solution:\n    def by_length(self, arr):\n        # Define the mapping from numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter the array to only include numbers between 1 and 9\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n\n        # Replace each number in the array with its name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr",
            "class Solution:\n    def by_length(self, arr):\n        # Create a dictionary to map numbers to their names\n        num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n        # Filter out numbers that are not between 1 and 9 inclusive\n        arr = [num for num in arr if 1 <= num <= 9]\n\n        # Sort the array in ascending order\n        arr.sort()\n\n        # Reverse the array\n        arr.reverse()\n\n        # Replace each number in the array with its corresponding name\n        arr = [num_to_name[num] for num in arr]\n\n        return arr"
        ]
    },
    {
        "question_title": "f",
        "question_content": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/106",
        "contest_id": "HumanEval/106",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def f(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n\nThis solution defines two helper functions, `factorial` and `sum_to_n`, to calculate the factorial and the sum of numbers from 1 to n, respectively. Then it iterates from 1 to n (inclusive), appends the factorial of the number if it's even, or the sum of numbers from 1 to the number if it's odd, to the result list. Finally, it returns the result list.\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n\nThis solution defines two helper functions, `factorial` and `sum_to_n`, to calculate the factorial and the sum of numbers from 1 to n, respectively. Then it iterates over the range from 1 to n (inclusive), and for each number, it checks if it's even. If it is, it appends the factorial of the number to the result list. Otherwise, it appends the sum of numbers from 1 to the number to the result list. Finally, it returns the result list.\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n\nThis solution defines two helper functions: `factorial` and `sum_to_n`. `factorial` calculates the factorial of a number, and `sum_to_n` calculates the sum of numbers from 1 to n. The main function `f` then iterates over the range from 1 to n (inclusive), and for each number, it checks if it's even. If it is, it appends the factorial of the number to the result list. If it's not, it appends the sum of numbers from 1 to the number to the result list. Finally, it returns the result list.\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n\nThis solution defines two helper functions: `factorial` and `sum_to_n`. The `factorial` function calculates the factorial of a number, and the `sum_to_n` function calculates the sum of numbers from 1 to n. The main function `f` then iterates over the range from 1 to n (inclusive), and for each number, it checks if it's even. If it is, it appends the factorial of the number to the result list. If it's not, it appends the sum of numbers from 1 to the number to the result list. Finally, it returns the result list.\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n",
            "```python\nclass Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n + 1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result",
            "class Solution:\n    def f(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        def sum_to_n(n):\n            return n * (n+1) // 2\n\n        result = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum_to_n(i))\n        return result"
        ]
    },
    {
        "question_title": "even_odd_palindrome",
        "question_content": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/107",
        "contest_id": "HumanEval/107",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def even_odd_palindrome(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n\nThis solution works by first defining a helper function `is_palindrome` that checks if a number is the same forwards and backwards. It then iterates over the range from 1 to `n` (inclusive), and for each number, it checks if it is a palindrome. If it is, it then checks if the number is even or odd and increments the corresponding counter. Finally, it returns a tuple of the counts of even and odd palindromes.\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n\nThis solution works by iterating over the range from 1 to n (inclusive). For each number, it checks if it's a palindrome by converting it to a string and comparing it with its reverse. If it is a palindrome, it then checks if it's even or odd by checking if the remainder of the division by 2 is 0 (for even numbers) or 1 (for odd numbers). It increments the appropriate counter for each palindrome it finds. Finally, it returns a tuple with the counts of even and odd palindromes.\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n\nThis solution works by first defining a helper function `is_palindrome` that checks if a given number is the same forwards and backwards. It then iterates over all numbers from 1 to `n` (inclusive), and for each number, it checks if it is a palindrome. If it is, it then checks if the number is even or odd and increments the corresponding counter. Finally, it returns a tuple containing the counts of even and odd palindromes.\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_palindrome(self, n):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        even_count = 0\n        odd_count = 0\n\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        return (even_count, odd_count)"
        ]
    },
    {
        "question_title": "count_nums",
        "question_content": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/108",
        "contest_id": "HumanEval/108",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def count_nums(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count\n```\n\nThis solution works by iterating over each number in the array. For each number, it converts it to a string and iterates over each character (digit) in the string. It then converts each digit back to an integer and adds it to a running total (digit_sum). If the total is greater than 0, it increments a counter. Finally, it returns the count.\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        def sum_digits(n):\n            return sum(int(d) for d in str(n))\n\n        return sum(1 for n in arr if sum_digits(n) > 0)\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        def sum_digits(n):\n            return sum(int(d) for d in str(n))\n\n        return sum(1 for n in arr if sum_digits(n) > 0)",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digits = [int(d) for d in str(num)]\n            if sum(digits) > 0:\n                count += 1\n        return count",
            "class Solution:\n    def count_nums(self, arr):\n        count = 0\n        for num in arr:\n            digit_sum = 0\n            for digit in str(num):\n                digit_sum += int(digit)\n            if digit_sum > 0:\n                count += 1\n        return count"
        ]
    },
    {
        "question_title": "move_one_ball",
        "question_content": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/109",
        "contest_id": "HumanEval/109",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def move_one_ball(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by iterating through the array and checking if each element is greater than the next one. If it is, it increments a counter. It also checks if the last element is greater than the first one, and if it is, it increments the counter. Finally, it returns whether the counter is less than or equal to 1. This is because in order to sort the array, at most one operation (a right shift) is needed.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by counting the number of times the current element is greater than the next element in the array. This is because a right shift operation will move the next element to the current position. If the count is more than 1, it means that more than one right shift operation is needed to sort the array, so the function returns False. If the count is 1 or 0, it means that it is possible to sort the array with one or no right shift operations, so the function returns True. The function also handles the case where the array is empty, returning True.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by counting the number of times the current element is greater than the next element in the array. This is because in order to sort the array in non-decreasing order, each element should be less than or equal to the next element. If the count is more than 1, it means we can't sort the array by performing the right shift operation, so we return False. If the count is 1 or less, it means we can sort the array by performing the right shift operation, so we return True.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nIn the above code, we first check if the array is empty. If it is, we return True. Then we count the number of times the current element is greater than the next element in the array. If the last element is greater than the first element, we also count it. If the count is more than 1, we return False. Otherwise, we return True.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nIn the above code, we first check if the array is empty. If it is, we return True. Then we count the number of times the current element is greater than the next element in the array. If the last element is greater than the first element, we also count this. If the count is more than 1, we return False because we can't sort the array by performing at most one right shift operation. Otherwise, we return True.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by iterating over the array and checking if each element is greater than the next one. If it is, we increment a counter. If the counter is greater than 1 at the end of the loop, we return False, because that means we have more than one place where the array is not sorted. If the counter is 1 or less, we return True, because that means we can sort the array by at most one right shift operation. If the array is empty, we return True, as an empty array is already sorted.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by iterating through the array and checking if each element is greater than the next one. If it is, we increment a counter. We also check if the last element is greater than the first one, and if it is, we increment the counter. Finally, we return whether the counter is less than or equal to 1. This is because we can sort the array by at most one right shift operation.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by iterating through the array and counting the number of times the current element is greater than the next. If the last element is greater than the first, we also count it. If the count is 1 or 0, we return True, indicating that it is possible to sort the array by performing at most one right shift operation. Otherwise, we return False.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nThis solution works by iterating over the array and checking if each element is greater than the next one. If it is, we increment a counter. We also check if the last element is greater than the first one, and if it is, we increment the counter. The function then returns True if the counter is less than or equal to 1, and False otherwise. This is because we can sort the array by at most one right shift operation.\n",
            "```python\nclass Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n```\n\nIn this solution, we first check if the array is empty. If it is, we return True because an empty array is already sorted. Then we count the number of pairs in the array where the current element is greater than the next one. This is because in order to sort the array, we need to move the elements to the right so that the current element is less than the next one. If the last element is greater than the first one, we also count it. If the count is more than 1, we return False because we can't sort the array with more than one right shift operation. Otherwise, we return True.\n"
        ],
        "code_list": [
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1",
            "class Solution:\n    def move_one_ball(self, arr):\n        if len(arr) == 0:\n            return True\n        count = 0\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1"
        ]
    },
    {
        "question_title": "string_xor",
        "question_content": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/11",
        "contest_id": "HumanEval/11",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, append '0'\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, append '1'\n            else:\n                result += '1'\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, XOR is 0\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, XOR is 1\n            else:\n                result += '1'\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, XOR is 0\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, XOR is 1\n            else:\n                result += '1'\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n",
            "```python\nclass Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, append '0'\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, append '1'\n            else:\n                result += '1'\n\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, XOR is 0\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, XOR is 1\n            else:\n                result += '1'\n\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = ''\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        # Initialize result\n        result = \"\"\n\n        # Traverse both strings\n        for i in range(len(a)):\n            # If characters are same, XOR is 0\n            if a[i] == b[i]:\n                result += '0'\n            # If characters are different, XOR is 1\n            else:\n                result += '1'\n\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str)-> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result",
            "class Solution:\n    def string_xor(self, a: str, b: str) -> str:\n        result = \"\"\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        return result"
        ]
    },
    {
        "question_title": "exchange",
        "question_content": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/110",
        "contest_id": "HumanEval/110",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def exchange(self, lst1, lst2):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        \n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nThis solution works by first creating two lists: `odd_lst1` which contains all the odd numbers from `lst1`, and `even_lst2` which contains all the even numbers from `lst2`. Then it checks if the number of odd numbers in `lst1` is less than or equal to the number of even numbers in `lst2`. If it is, it means we can exchange elements between `lst1` and `lst2` to make all the elements of `lst1` even, so it returns \"YES\". Otherwise, it returns \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nThis solution works by first creating two lists: `odd_lst1` which contains all the odd numbers in `lst1`, and `even_lst2` which contains all the even numbers in `lst2`. Then it checks if the sum of the odd numbers in `lst1` is less than or equal to the sum of the even numbers in `lst2`. If it is, it means it's possible to exchange some numbers from `lst2` to make all numbers in `lst1` even. If it's not, it means it's not possible.\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nIn this solution, we first create two lists: `odd_lst1` which contains all the odd numbers from `lst1` and `even_lst2` which contains all the even numbers from `lst2`. Then we check if the sum of the odd numbers in `lst1` is less than or equal to the sum of the even numbers in `lst2`. If it is, we return \"YES\" because it is possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` to be even. If it is not, we return \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nIn this solution, we first create two lists: `odd_lst1` which contains all the odd numbers in `lst1` and `even_lst2` which contains all the even numbers in `lst2`. Then we compare the lengths of these two lists. If the number of odd numbers in `lst1` is less than or equal to the number of even numbers in `lst2`, we can exchange the elements to make all numbers in `lst1` even, so we return \"YES\". Otherwise, we can't do so, so we return \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nThis solution works by first creating two lists: odd_lst1, which contains all the odd numbers from lst1, and even_lst2, which contains all the even numbers from lst2. It then checks if the sum of the odd numbers in lst1 is less than or equal to the sum of the even numbers in lst2. If it is, it means it's possible to exchange elements between lst1 and lst2 to make all the elements of lst1 to be even, so it returns \"YES\". Otherwise, it returns \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nIn this solution, we first create two lists: `odd_lst1` which contains all the odd numbers from `lst1` and `even_lst2` which contains all the even numbers from `lst2`. Then we check if the sum of the odd numbers in `lst1` is less than or equal to the sum of the even numbers in `lst2`. If it is, we return \"YES\", because it's possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` to be even. If it's not, we return \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nThis solution works by first creating two lists: `odd_lst1` which contains all the odd numbers from `lst1` and `even_lst2` which contains all the even numbers from `lst2`. It then checks if the sum of the odd numbers in `lst1` is less than or equal to the sum of the even numbers in `lst2`. If it is, it means it's possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` even, so it returns \"YES\". Otherwise, it returns \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nIn this solution, we first create two lists: `odd_lst1` which contains all the odd numbers from `lst1` and `even_lst2` which contains all the even numbers from `lst2`. Then we check if the sum of the odd numbers in `lst1` is less than or equal to the sum of the even numbers in `lst2`. If it is, we return \"YES\", because it is possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` to be even. If it is not, we return \"NO\", because it is not possible to do so.\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nThis solution works by first creating two lists: `odd_lst1` which contains all the odd numbers in `lst1` and `even_lst2` which contains all the even numbers in `lst2`. Then it checks if the number of odd numbers in `lst1` is less than or equal to the number of even numbers in `lst2`. If it is, then it is possible to make all the numbers in `lst1` even by exchanging elements between `lst1` and `lst2`, so it returns \"YES\". Otherwise, it is not possible, so it returns \"NO\".\n",
            "```python\nclass Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n```\n\nIn this solution, we first create two lists: `odd_lst1` which contains all the odd numbers from `lst1` and `even_lst2` which contains all the even numbers from `lst2`. Then we check if the number of odd numbers in `lst1` is less than or equal to the number of even numbers in `lst2`. If it is, we return \"YES\" because it is possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` to be even. If not, we return \"NO\".\n"
        ],
        "code_list": [
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        \n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [num for num in lst1 if num % 2 != 0]\n        even_lst2 = [num for num in lst2 if num % 2 == 0]\n        if sum(odd_lst1) <= sum(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\"",
            "class Solution:\n    def exchange(self, lst1, lst2):\n        odd_lst1 = [x for x in lst1 if x % 2 != 0]\n        even_lst2 = [x for x in lst2 if x % 2 == 0]\n        if len(odd_lst1) <= len(even_lst2):\n            return \"YES\"\n        else:\n            return \"NO\""
        ]
    },
    {
        "question_title": "histogram",
        "question_content": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/111",
        "contest_id": "HumanEval/111",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def histogram(self, test):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the count of each letter\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over the items in the count dictionary\n        for key, value in count_dict.items():\n            # If the count is equal to the maximum count, add it to the result dictionary\n            if value == max_count:\n                result[key] = value\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the count of each letter\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Create a new dictionary to store the letters with the maximum count\n        result = {k: v for k, v in count_dict.items() if v == max_count}\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq = {}\n        \n        # Split the string into words\n        words = test.split()\n        \n        # Iterate over each word\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq:\n                freq[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq[word] = 1\n        \n        # Find the maximum frequency\n        max_freq = max(freq.values()) if freq else 0\n        \n        # Create a new dictionary to store the result\n        result = {}\n        \n        # Iterate over each item in the original dictionary\n        for key, value in freq.items():\n            # If the count is equal to the maximum frequency, add it to the result\n            if value == max_freq:\n                result[key] = value\n        \n        return result\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over each item in the frequency dictionary\n        for key, value in freq_dict.items():\n            # If the count is equal to the maximum count, add it to the result dictionary\n            if value == max_count:\n                result[key] = value\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum frequency\n        max_freq = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over each item in the frequency dictionary\n        for key, value in freq_dict.items():\n            # If the frequency is equal to the maximum frequency, add it to the result dictionary\n            if value == max_freq:\n                result[key] = value\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in count_dict.items() if count == max_count}\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add the word to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}\n```\n",
            "```python\nclass Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum frequency\n        max_freq = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the letters with the maximum frequency\n        max_freq_dict = {k: v for k, v in freq_dict.items() if v == max_freq}\n\n        return max_freq_dict\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the count of each letter\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over the items in the count dictionary\n        for key, value in count_dict.items():\n            # If the count is equal to the maximum count, add it to the result dictionary\n            if value == max_count:\n                result[key] = value\n\n        return result",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the count of each letter\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Create a new dictionary to store the letters with the maximum count\n        result = {k: v for k, v in count_dict.items() if v == max_count}\n\n        return result",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq = {}\n        \n        # Split the string into words\n        words = test.split()\n        \n        # Iterate over each word\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq:\n                freq[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq[word] = 1\n        \n        # Find the maximum frequency\n        max_freq = max(freq.values()) if freq else 0\n        \n        # Create a new dictionary to store the result\n        result = {}\n        \n        # Iterate over each item in the original dictionary\n        for key, value in freq.items():\n            # If the count is equal to the maximum frequency, add it to the result\n            if value == max_freq:\n                result[key] = value\n        \n        return result",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over each item in the frequency dictionary\n        for key, value in freq_dict.items():\n            # If the count is equal to the maximum count, add it to the result dictionary\n            if value == max_count:\n                result[key] = value\n\n        return result",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum frequency\n        max_freq = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the result\n        result = {}\n\n        # Iterate over each item in the frequency dictionary\n        for key, value in freq_dict.items():\n            # If the frequency is equal to the maximum frequency, add it to the result dictionary\n            if value == max_freq:\n                result[key] = value\n\n        return result",
            "class Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary\n        count_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over the list of words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                count_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(count_dict.values()) if count_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in count_dict.items() if count == max_count}",
            "class Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add the word to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}",
            "class Solution:\n    def histogram(self, test):\n        # Initialize an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the input string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum count\n        max_count = max(freq_dict.values()) if freq_dict else 0\n\n        # Return a dictionary containing only the words with the maximum count\n        return {word: count for word, count in freq_dict.items() if count == max_count}",
            "class Solution:\n    def histogram(self, test):\n        # Create an empty dictionary to store the frequency of each letter\n        freq_dict = {}\n\n        # Split the string into a list of words\n        words = test.split()\n\n        # Iterate over each word in the list\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in freq_dict:\n                freq_dict[word] += 1\n            # Otherwise, add it to the dictionary with a count of 1\n            else:\n                freq_dict[word] = 1\n\n        # Find the maximum frequency\n        max_freq = max(freq_dict.values()) if freq_dict else 0\n\n        # Create a new dictionary to store the letters with the maximum frequency\n        max_freq_dict = {k: v for k, v in freq_dict.items() if v == max_freq}\n\n        return max_freq_dict"
        ]
    },
    {
        "question_title": "reverse_delete",
        "question_content": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/112",
        "contest_id": "HumanEval/112",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def reverse_delete(self, s,c):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def reverse_delete(self, s,c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n\n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n\n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s,c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is a palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n\n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n\n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n",
            "```python\nclass Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is a palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def reverse_delete(self, s,c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n\n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n\n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s,c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is a palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n\n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n\n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all the characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)",
            "class Solution:\n    def reverse_delete(self, s, c):\n        # Delete all characters in s that are equal to any character in c\n        for char in c:\n            s = s.replace(char, '')\n        \n        # Check if the result string is a palindrome\n        is_palindrome = s == s[::-1]\n        \n        return (s, is_palindrome)"
        ]
    },
    {
        "question_title": "odd_count",
        "question_content": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/113",
        "contest_id": "HumanEval/113",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def odd_count(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, string in enumerate(lst):\n            odd_digits = sum(1 for char in string if int(char) % 2 != 0)\n            element = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits, odd_digits, odd_digits, odd_digits)\n            result.append(element)\n        return result\n```\n\nThis solution works by iterating over the input list of strings. For each string, it counts the number of odd digits by checking each character and checking if it is odd (i.e., its remainder when divided by 2 is not 0). It then constructs the required string using the count of odd digits and appends it to the result list. The function then returns the result list.\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, string in enumerate(lst):\n            count = sum(1 for char in string if int(char) % 2 != 0)\n            string = string.replace(string, str(count))\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n\nThis solution works by iterating over the list of strings, and for each string, it counts the number of odd digits by checking each character. It then constructs the required string using this count and appends it to the result list. The enumerate function is used to get both the index (i) and value (s) of each string in the list. The f-string is used to format the string with the count of odd digits.\n",
            "```python\nclass Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, string in enumerate(lst):\n            odd_digits = sum(1 for char in string if int(char) % 2 != 0)\n            element = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits, odd_digits, odd_digits, odd_digits)\n            result.append(element)\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, string in enumerate(lst):\n            count = sum(1 for char in string if int(char) % 2 != 0)\n            string = string.replace(string, str(count))\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result",
            "class Solution:\n    def odd_count(self, lst):\n        result = []\n        for i, s in enumerate(lst):\n            count = sum(1 for c in s if int(c) % 2 != 0)\n            result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n        return result"
        ]
    },
    {
        "question_title": "minSubArraySum",
        "question_content": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/114",
        "contest_id": "HumanEval/114",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def minSubArraySum(self, nums):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum\n```\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n            \n        return min_sum\n```\n\nThis solution uses Kadane's algorithm, which is an efficient way to solve this problem. It iterates over the array, updating the current sum and the minimum sum at each step. The current sum is the minimum of the current number and the sum of the current number and the previous current sum. The minimum sum is the minimum of the current minimum sum and the current sum. The time complexity of this solution is O(n), where n is the length of the array.\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        min_sum = float('inf')\n        cur_sum = 0\n        for num in nums:\n            cur_sum += num\n            min_sum = min(min_sum, cur_sum)\n            if cur_sum > 0:\n                cur_sum = 0\n        return min_sum if min_sum != float('inf') else max(nums)\n```\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum\n```\n\nThis solution uses Kadane's algorithm, which is an efficient way to solve this problem. It iterates over the array, adding each number to the current sum. If the current sum becomes greater than the minimum sum found so far, it updates the minimum sum. If the current sum becomes negative, it resets the current sum to 0. The minimum sum found is the minimum sum of any non-empty sub-array of nums.\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        min_sum = float('inf')\n        cur_sum = 0\n        for num in nums:\n            cur_sum += num\n            min_sum = min(min_sum, cur_sum)\n            if cur_sum > 0:\n                cur_sum = 0\n        return min_sum if min_sum != float('inf') else max(nums)\n```\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum\n```\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum\n```\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n            \n        return min_sum\n```\n\nThis solution uses Kadane's algorithm, which is an efficient way to solve this problem. It iterates over the array, updating the current sum and the minimum sum at each step. The current sum is updated to be the minimum of the current number and the sum of the current number and the previous current sum. The minimum sum is updated to be the minimum of the current minimum sum and the current sum. This ensures that the minimum sum is always updated to be the smallest sum of any non-empty subarray ending at the current position. The function then returns the minimum sum.\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n        return min_sum\n```\n\nThis solution uses Kadane's algorithm, which is an efficient way to solve this problem. It iterates over the array and at each step, it updates the current sum and the minimum sum found so far. The current sum is updated to be the minimum of the current number and the sum of the current number and the previous current sum. The minimum sum is updated to be the minimum of the current minimum sum and the current sum. This way, the function returns the minimum sum of any non-empty sub-array of nums.\n",
            "```python\nclass Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n            \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        min_sum = float('inf')\n        cur_sum = 0\n        for num in nums:\n            cur_sum += num\n            min_sum = min(min_sum, cur_sum)\n            if cur_sum > 0:\n                cur_sum = 0\n        return min_sum if min_sum != float('inf') else max(nums)",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        min_sum = float('inf')\n        cur_sum = 0\n        for num in nums:\n            cur_sum += num\n            min_sum = min(min_sum, cur_sum)\n            if cur_sum > 0:\n                cur_sum = 0\n        return min_sum if min_sum != float('inf') else max(nums)",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n            \n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        current_sum = min_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = min(num, current_sum + num)\n            min_sum = min(min_sum, current_sum)\n        return min_sum",
            "class Solution:\n    def minSubArraySum(self, nums):\n        if not nums:\n            return 0\n        \n        min_sum = float('inf')\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            min_sum = min(min_sum, current_sum)\n            if current_sum > 0:\n                current_sum = 0\n                \n        return min_sum"
        ]
    },
    {
        "question_title": "max_fill",
        "question_content": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/115",
        "contest_id": "HumanEval/115",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def max_fill(self, grid, capacity):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n            \n            # Calculate the number of buckets needed for this row\n            row_buckets = math.ceil(wells / capacity)\n            \n            # Add the number of buckets for this row to the total count\n            buckets += row_buckets\n        \n        # Return the total count of buckets\n        return buckets\n```\n\nThis solution works by iterating over each row in the grid. For each row, it counts the number of 1s (which represent wells) and calculates the number of buckets needed for that row by dividing the number of wells by the capacity of the bucket and rounding up to the nearest integer. This number is then added to the total count of buckets. Finally, the total count of buckets is returned.\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n\n            # Calculate the number of buckets needed to empty the wells\n            # and add it to the total count\n            buckets += math.ceil(wells / capacity)\n\n        # Return the total count of buckets\n        return buckets\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count\n```\n\nThis solution works by iterating over each cell in the grid. If the cell contains water (1), it increments the count of buckets by the capacity. Finally, it returns the count of buckets.\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        \n        # Return the number of buckets used\n        return buckets\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n            # Calculate the number of buckets needed to empty the wells\n            buckets += math.ceil(wells / capacity)\n        # Return the total number of buckets\n        return buckets\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        # Return the total number of buckets used\n        return buckets\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count\n```\n\nThis solution works by iterating over each cell in the grid. If the cell contains water (1), it increments the count of buckets by the capacity. Finally, it returns the count of buckets. This solution assumes that the capacity of the bucket is the same for all cells.\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        \n        # Return the number of buckets used\n        return buckets\n```\n",
            "```python\nclass Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n\n            # Calculate the number of buckets needed to empty the wells\n            # and add it to the total count\n            buckets += math.ceil(wells / capacity)\n\n        # Return the total count of buckets\n        return buckets\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n            \n            # Calculate the number of buckets needed for this row\n            row_buckets = math.ceil(wells / capacity)\n            \n            # Add the number of buckets for this row to the total count\n            buckets += row_buckets\n        \n        # Return the total count of buckets\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n\n            # Calculate the number of buckets needed to empty the wells\n            # and add it to the total count\n            buckets += math.ceil(wells / capacity)\n\n        # Return the total count of buckets\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        \n        # Return the number of buckets used\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n            # Calculate the number of buckets needed to empty the wells\n            buckets += math.ceil(wells / capacity)\n        # Return the total number of buckets\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        # Return the total number of buckets used\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        count = 0\n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1)\n                if cell == 1:\n                    # Increment the count of buckets by the capacity\n                    count += capacity\n        # Return the count of buckets\n        return count",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n        \n        # Iterate over each row in the grid\n        for row in grid:\n            # Iterate over each cell in the row\n            for cell in row:\n                # If the cell contains water (1), add the capacity to the buckets\n                if cell == 1:\n                    buckets += capacity\n        \n        # Return the number of buckets used\n        return buckets",
            "class Solution:\n    def max_fill(self, grid, capacity):\n        # Initialize the count of buckets to 0\n        buckets = 0\n\n        # Iterate over each row in the grid\n        for row in grid:\n            # Count the number of 1s in the row\n            wells = row.count(1)\n\n            # Calculate the number of buckets needed to empty the wells\n            # and add it to the total count\n            buckets += math.ceil(wells / capacity)\n\n        # Return the total count of buckets\n        return buckets"
        ]
    },
    {
        "question_title": "sort_array",
        "question_content": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/116",
        "contest_id": "HumanEval/116",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sort_array(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nIn this solution, we use the built-in `sorted` function in Python. The `key` parameter of the `sorted` function is a function that takes an input and returns a value that will be used for sorting purposes. In this case, we use a lambda function that returns a tuple. The first element of the tuple is the number of ones in the binary representation of the number, and the second element is the number itself. Python's sorting algorithm will first sort by the first element of the tuple (the number of ones in the binary representation), and then sort by the second element of the tuple (the decimal value of the number) if the first elements are equal.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nThis solution uses Python's built-in `sorted` function and a lambda function as the key. The lambda function returns a tuple where the first element is the count of '1's in the binary representation of the number and the second element is the number itself. The `sorted` function uses these values to sort the array.\n\nThe `bin` function is used to convert the number to binary and `count` is used to count the number of '1's in the binary representation.\n\nThis solution works for both positive and negative numbers because the binary representation of negative numbers in Python starts with '-0b' and the count of '1's in the binary representation of negative numbers is the same as the count of '1's in the binary representation of the absolute value of the number.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        # Function to count the number of ones in the binary representation of a number\n        def count_ones(n):\n            return bin(n).count('1')\n\n        # Sort the array based on the number of ones in the binary representation and then by the decimal value\n        return sorted(arr, key=lambda x: (count_ones(x), x))\n```\n\nThis solution uses the built-in `sorted` function in Python. The `key` parameter of the `sorted` function is a function that takes an element of the iterable and returns a value that will be used for sorting purposes. In this case, the `key` function is a tuple where the first element is the number of ones in the binary representation of the number and the second element is the decimal value of the number itself. Python's tuples are compared lexicographically, so it first compares the first elements, then if they are equal it compares the second elements, and so on. This is exactly what we want for our sorting.\n\nThe `count_ones` function uses Python's built-in `bin` function to convert a number to its binary representation as a string, and then counts the number of '1's in that string.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\ns = Solution()\nprint(s.sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(s.sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(s.sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nThis solution uses Python's built-in `sorted` function with a custom key. The key is a tuple where the first element is the count of '1's in the binary representation of the number and the second element is the number itself. Python's tuples are sorted lexicographically, so this will sort the numbers first by the number of '1's in their binary representation and then by their decimal value.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nIn the above code, we are using the built-in `sorted` function in Python. The `key` parameter of the `sorted` function is a function that takes an input and returns a value that will be used for sorting purposes. In this case, we are using a lambda function that returns a tuple. The first element of the tuple is the number of ones in the binary representation of the number, and the second element is the number itself. Python's sorting algorithm will first sort by the first element of the tuple (the number of ones in the binary representation), and then sort by the second element of the tuple (the actual number).\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nThis solution uses Python's built-in `sorted` function with a custom key. The key is a tuple where the first element is the number of ones in the binary representation of the number and the second element is the number itself. The `sorted` function will sort the list based on these two criteria.\n\nThe `bin` function is used to get the binary representation of the number as a string. The `count` method is then used to count the number of ones in the binary representation.\n\nThis solution assumes that the input list will only contain non-negative integers. If the input list can contain negative integers, then the key function should be modified to handle this case.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nThis solution uses Python's built-in `sorted` function with a custom key. The key is a tuple where the first element is the number of ones in the binary representation of the number and the second element is the number itself. The `sorted` function uses these keys to sort the array.\n\nIn the lambda function, `bin(x)` converts the number to binary and `.count('1')` counts the number of ones in the binary representation. The number itself (`x`) is used as a tiebreaker when the number of ones is the same.\n",
            "```python\nclass Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\ns = Solution()\nprint(s.sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(s.sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(s.sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        # Function to count the number of ones in the binary representation of a number\n        def count_ones(n):\n            return bin(n).count('1')\n\n        # Sort the array based on the number of ones in the binary representation and then by the decimal value\n        return sorted(arr, key=lambda x: (count_ones(x), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\ns = Solution()\nprint(s.sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(s.sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(s.sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "class Solution:\n    def sort_array(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\ns = Solution()\nprint(s.sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(s.sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(s.sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]"
        ]
    },
    {
        "question_title": "select_words",
        "question_content": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/117",
        "contest_id": "HumanEval/117",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def select_words(self, s, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonants = [word for word in words if sum(1 for char in word if char not in vowels) == n]\n\n        return consonants\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        def count_consonants(word):\n            return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n        return [word for word in s.split() if count_consonants(word) == n]\n```\n\nIn this solution, we first check if the string `s` is empty. If it is, we return an empty list. Then we define a helper function `count_consonants` that counts the number of consonants in a given word. This function uses a generator expression to iterate over each character in the word, and checks if it is a consonant by checking if it is in the string `'bcdfghjklmnpqrstvwxyz'`.\n\nFinally, we return a list comprehension that splits the string `s` into words and checks if the number of consonants in each word is equal to `n`. If it is, we include the word in the list.\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        words = s.split(' ')\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter in consonants:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result\n```\n\nIn the above code, we first check if the string is empty. If it is, we return an empty list. We then split the string into words and initialize an empty list to store our results. We iterate over each word in the list of words. For each word, we count the number of consonants by checking if each letter is not in the string of vowels. If the count of consonants equals n, we append the word to our results list. Finally, we return the results list.\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n        words = s.split(' ')\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        result = []\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter in consonants:\n                    count += 1\n            if count == n:\n                result.append(word)\n        return result\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonant_words = []\n\n        for word in words:\n            consonant_count = 0\n            for letter in word:\n                if letter not in vowels:\n                    consonant_count += 1\n            if consonant_count == n:\n                consonant_words.append(word)\n\n        return consonant_words\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        def count_consonants(word):\n            return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n        return [word for word in s.split() if count_consonants(word) == n]\n```\n\nThis solution works by first checking if the input string is empty. If it is, the function returns an empty list. If the string is not empty, the function defines a helper function `count_consonants` that counts the number of consonants in a given word. This helper function is then used in a list comprehension to generate the list of words from the string `s` that contain exactly `n` consonants. The words are split by spaces in the string `s`.\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = \"aeiouAEIOU\"\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonant_words = []\n\n        for word in words:\n            consonant_count = 0\n            for letter in word:\n                if letter not in vowels:\n                    consonant_count += 1\n            if consonant_count == n:\n                consonant_words.append(word)\n\n        return consonant_words\n```\n\nThis solution works by first checking if the string `s` is empty. If it is, the function returns an empty list. Then it splits the string `s` into a list of words. It then iterates over each word in the list, counting the number of consonants in the word. If the count of consonants in the word is equal to `n`, the word is added to the list `consonant_words`. Finally, the function returns the list `consonant_words`.\n"
        ],
        "code_list": [
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonants = [word for word in words if sum(1 for char in word if char not in vowels) == n]\n\n        return consonants",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        def count_consonants(word):\n            return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n        return [word for word in s.split() if count_consonants(word) == n]",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        words = s.split(' ')\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter in consonants:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n        words = s.split(' ')\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        result = []\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter in consonants:\n                    count += 1\n            if count == n:\n                result.append(word)\n        return result",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonant_words = []\n\n        for word in words:\n            consonant_count = 0\n            for letter in word:\n                if letter not in vowels:\n                    consonant_count += 1\n            if consonant_count == n:\n                consonant_words.append(word)\n\n        return consonant_words",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        def count_consonants(word):\n            return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n        return [word for word in s.split() if count_consonants(word) == n]",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = \"aeiouAEIOU\"\n        words = s.split()\n        result = []\n\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in vowels:\n                    count += 1\n            if count == n:\n                result.append(word)\n\n        return result",
            "class Solution:\n    def select_words(self, s, n):\n        if not s:\n            return []\n\n        vowels = 'aeiouAEIOU'\n        words = s.split()\n        consonant_words = []\n\n        for word in words:\n            consonant_count = 0\n            for letter in word:\n                if letter not in vowels:\n                    consonant_count += 1\n            if consonant_count == n:\n                consonant_words.append(word)\n\n        return consonant_words"
        ]
    },
    {
        "question_title": "get_closest_vowel",
        "question_content": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/118",
        "contest_id": "HumanEval/118",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def get_closest_vowel(self, word):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]  # Reverse the word\n        for i in range(1, len(word) - 1):\n            # Check if the current character is a vowel and both neighbors are consonants\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return ''\n```\n\nThis solution works by iterating through the reversed word from right to left (excluding the first and last characters). For each character, it checks if it is a vowel and if both its neighbors are consonants. If it finds such a character, it returns it. If it doesn't find any such character, it returns an empty string.\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n\nIn this solution, we first reverse the given word so that we can start from the right side. Then we iterate over the reversed word, checking each character to see if it is a vowel and if the characters to its left and right are not vowels. If we find such a character, we return it. If we don't find any such characters, we return an empty string.\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        for i in range(len(word) - 2, 0, -1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'aeiouAEIOU'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n\nIn this solution, we first reverse the input word so that we can start from the right side. Then we iterate over the characters in the word, starting from the second character (index 1) and ending at the second to last character. For each character, we check if it is a vowel and if the characters to its left and right are not vowels. If we find such a character, we return it. If we don't find any such character, we return an empty string.\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n\nThis solution works by reversing the input word and iterating over it. For each character, it checks if it is a vowel and if the characters to its left and right are not vowels. If it finds such a character, it returns it. If it doesn't find any such characters, it returns an empty string.\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        for i in range(len(word) - 2, 0, -1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n```\n",
            "```python\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n        return \"\"\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]  # Reverse the word\n        for i in range(1, len(word) - 1):\n            # Check if the current character is a vowel and both neighbors are consonants\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return ''",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        for i in range(len(word) - 2, 0, -1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'aeiouAEIOU'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = 'AEIOUaeiou'\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        for i in range(len(word) - 2, 0, -1):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
            "class Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"AEIOUaeiou\"\n        word = word[::-1]\n        for i in range(1, len(word) - 1):\n            if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n        return \"\""
        ]
    },
    {
        "question_title": "match_parens",
        "question_content": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/119",
        "contest_id": "HumanEval/119",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def match_parens(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a stack to keep track of the open parentheses\n        stack = []\n\n        # Iterate over each string in the list\n        for string in lst:\n            # Iterate over each character in the string\n            for char in string:\n                # If the character is an open parenthesis, push it onto the stack\n                if char == '(':\n                    stack.append(char)\n                # If the character is a close parenthesis\n                else:\n                    # If the stack is empty, return 'No' because there's no matching open parenthesis\n                    if not stack:\n                        return 'No'\n                    # Otherwise, pop the last element from the stack\n                    stack.pop()\n\n        # If the stack is empty, return 'Yes' because all parentheses are balanced\n        if not stack:\n            return 'Yes'\n        # If the stack is not empty, return 'No' because there are unbalanced open parentheses\n        else:\n            return 'No'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a stack to keep track of open parentheses\n        stack = []\n\n        # Concatenate the two strings\n        s = lst[0] + lst[1]\n\n        # Iterate over each character in the string\n        for char in s:\n            # If the character is an open parenthesis, push it onto the stack\n            if char == '(':\n                stack.append(char)\n            # If the character is a close parenthesis\n            else:\n                # If the stack is empty, return 'No' because there is no matching open parenthesis\n                if not stack:\n                    return 'No'\n                # Pop the last open parenthesis from the stack\n                stack.pop()\n\n        # If the stack is empty, return 'Yes' because all parentheses are balanced\n        if not stack:\n            return 'Yes'\n        # If there are still parentheses in the stack, return 'No' because there is a closing parenthesis without a matching open parenthesis\n        else:\n            return 'No'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n\nThis solution works by iterating over the characters in the two strings. If it encounters an open parenthesis, it increments the open_count. If it encounters a close parenthesis, it checks if there are any open parentheses to match it. If there are, it decrements the open_count. If there aren't, it returns 'No'. If it finishes iterating over both strings without encountering any unbalanced parentheses, it returns 'Yes'.\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize the count of open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over each string in the list\n        for s in lst:\n            # Iterate over each character in the string\n            for ch in s:\n                # If the character is an open parenthesis, increment the counter\n                if ch == '(':\n                    open_count += 1\n                # If the character is a close parenthesis, increment the counter\n                elif ch == ')':\n                    close_count += 1\n\n        # If the number of open parentheses is greater than or equal to the number of close parentheses,\n        # it's possible to make a good string\n        if open_count >= close_count:\n            return 'Yes'\n        else:\n            return 'No'\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a stack to keep track of the open parentheses\n        stack = []\n\n        # Iterate over each string in the list\n        for string in lst:\n            # Iterate over each character in the string\n            for char in string:\n                # If the character is an open parenthesis, push it onto the stack\n                if char == '(':\n                    stack.append(char)\n                # If the character is a close parenthesis\n                else:\n                    # If the stack is empty, return 'No' because there's no matching open parenthesis\n                    if not stack:\n                        return 'No'\n                    # Otherwise, pop the last element from the stack\n                    stack.pop()\n\n        # If the stack is empty, return 'Yes' because all parentheses are balanced\n        if not stack:\n            return 'Yes'\n        # If the stack is not empty, return 'No' because there are unbalanced open parentheses\n        else:\n            return 'No'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a stack to keep track of open parentheses\n        stack = []\n\n        # Concatenate the two strings\n        s = lst[0] + lst[1]\n\n        # Iterate over each character in the string\n        for char in s:\n            # If the character is an open parenthesis, push it onto the stack\n            if char == '(':\n                stack.append(char)\n            # If the character is a close parenthesis\n            else:\n                # If the stack is empty, return 'No' because there is no matching open parenthesis\n                if not stack:\n                    return 'No'\n                # Pop the last open parenthesis from the stack\n                stack.pop()\n\n        # If the stack is empty, return 'Yes' because all parentheses are balanced\n        if not stack:\n            return 'Yes'\n        # If there are still parentheses in the stack, return 'No' because there is a closing parenthesis without a matching open parenthesis\n        else:\n            return 'No'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize the count of open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count = 0\n        close_count = 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over the first string in the list\n        for char in lst[0]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # Iterate over the second string in the list\n        for char in lst[1]:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n\n        # If there are unbalanced open parentheses, return 'No'\n        if open_count > 0:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def match_parens(self, lst):\n        # Initialize a counter for open and close parentheses\n        open_count, close_count = 0, 0\n\n        # Iterate over each string in the list\n        for s in lst:\n            # Iterate over each character in the string\n            for ch in s:\n                # If the character is an open parenthesis, increment the counter\n                if ch == '(':\n                    open_count += 1\n                # If the character is a close parenthesis, increment the counter\n                elif ch == ')':\n                    close_count += 1\n\n        # If the number of open parentheses is greater than or equal to the number of close parentheses,\n        # it's possible to make a good string\n        if open_count >= close_count:\n            return 'Yes'\n        else:\n            return 'No'"
        ]
    },
    {
        "question_title": "longest",
        "question_content": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/12",
        "contest_id": "HumanEval/12",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def longest(self, strings: List[str])-> Optional[str]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_len = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_len:\n                return string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_length = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_length:\n                return string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n```\n",
            "```python\nfrom typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_length = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_length:\n                return string\n```\n"
        ],
        "code_list": [
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_len = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_len:\n                return string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "class Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "class Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_length = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_length:\n                return string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string",
            "from typing import List, Optional\n\nclass Solution:\n    def longest(self, strings: List[str]) -> Optional[str]:\n        if not strings:\n            return None\n        max_length = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_length:\n                return string"
        ]
    },
    {
        "question_title": "maximum",
        "question_content": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/120",
        "contest_id": "HumanEval/120",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def maximum(self, arr, k):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n        # Return the first k elements from the sorted array\n        return arr[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n\nThis solution uses Python's built-in `sorted` function to sort the array in descending order. Then it slices the first k elements from the sorted array to get the maximum k numbers.\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n        # Return the first k elements of the sorted array\n        return arr[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n\nThis solution uses Python's built-in `sorted` function to sort the array in descending order. Then it slices the first `k` elements from the sorted array to get the maximum `k` numbers.\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n\nThis solution uses Python's built-in `sorted` function to sort the array in descending order. Then it slices the first `k` elements from the sorted array to get the maximum `k` numbers.\n",
            "```python\nclass Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]\n```\n\nThis solution uses Python's built-in `sorted` function to sort the array in descending order and then slices the first `k` elements from the sorted array. The `reverse=True` argument to the `sorted` function ensures that the array is sorted in descending order.\n"
        ],
        "code_list": [
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n        # Return the first k elements from the sorted array\n        return arr[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n        # Return the first k elements of the sorted array\n        return arr[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]",
            "class Solution:\n    def maximum(self, arr, k):\n        return sorted(arr, reverse=True)[:k]"
        ]
    },
    {
        "question_title": "solution",
        "question_content": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/121",
        "contest_id": "HumanEval/121",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def solution(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\nsol = Solution()\nprint(sol.solution([5, 8, 7, 1])) # should return 12\nprint(sol.solution([3, 3, 3, 3, 3])) # should return 9\nprint(sol.solution([30, 13, 24, 321])) # should return 0\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\ns = Solution()\nprint(s.solution([5, 8, 7, 1]))  # 12\nprint(s.solution([3, 3, 3, 3, 3]))  # 9\nprint(s.solution([30, 13, 24, 321]))  # 0\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\nsol = Solution()\nprint(sol.solution([5, 8, 7, 1])) # should return 12\nprint(sol.solution([3, 3, 3, 3, 3])) # should return 9\nprint(sol.solution([30, 13, 24, 321])) # should return 0",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\ns = Solution()\nprint(s.solution([5, 8, 7, 1]))  # 12\nprint(s.solution([3, 3, 3, 3, 3]))  # 9\nprint(s.solution([30, 13, 24, 321]))  # 0",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)",
            "class Solution:\n    def solution(self, lst):\n        return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"
        ]
    },
    {
        "question_title": "add_elements",
        "question_content": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/122",
        "contest_id": "HumanEval/122",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def add_elements(self, arr, k):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n",
            "```python\nclass Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)",
            "class Solution:\n    def add_elements(self, arr, k):\n        return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)"
        ]
    },
    {
        "question_title": "get_odd_collatz",
        "question_content": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/123",
        "contest_id": "HumanEval/123",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def get_odd_collatz(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the Collatz sequence\n        collatz = [n]\n\n        # Continue generating the sequence until we reach 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = 3 * n + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the even numbers and sort the remaining odd numbers\n        odd_collatz = sorted([num for num in collatz if num % 2 != 0])\n\n        return odd_collatz\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # While the current number is not 1\n        while n != 1:\n            # If the number is even\n            if n % 2 == 0:\n                # Divide it by 2\n                n = n // 2\n            # If the number is odd\n            else:\n                # Multiply it by 3 and add 1\n                n = 3 * n + 1\n\n            # If the new number is odd, add it to the list\n            if n % 2 != 0:\n                collatz.append(n)\n\n        # Return the list sorted in increasing order\n        return sorted(collatz)\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n        \n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))\n```\n\nIn this solution, we first define a helper function `collatz` that generates the full Collatz sequence for a given number `n`. Then, we use a list comprehension to generate a list of all odd numbers in the sequence. Finally, we return this list sorted in increasing order. We use `set` to remove duplicates from the list before converting it back to a list.\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # Continue until the sequence reaches 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = 3 * n + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the odd numbers from the sequence\n        odd_collatz = [num for num in collatz if num % 2 != 0]\n\n        # Return the sorted list of odd numbers\n        return sorted(odd_collatz)\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list to store the odd numbers in the Collatz sequence\n        odd_numbers = []\n\n        # Continue the Collatz sequence until we reach 1\n        while n != 1:\n            # If the current number is odd, add it to the list\n            if n % 2 != 0:\n                odd_numbers.append(n)\n\n            # Apply the Collatz operation\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n\n        # Add 1 to the list of odd numbers since we have already checked it\n        odd_numbers.append(1)\n\n        # Sort the list of odd numbers\n        odd_numbers.sort()\n\n        return odd_numbers\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the Collatz sequence\n        collatz = [n]\n\n        # Continue the sequence until we reach 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = n * 3 + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the odd numbers and sort the list\n        odd_collatz = sorted([n for n in collatz if n % 2 != 0])\n\n        return odd_collatz\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # Continue until we reach 1\n        while n != 1:\n            # If the number is even\n            if n % 2 == 0:\n                n = n // 2\n            # If the number is odd\n            else:\n                n = 3 * n + 1\n\n            # If the new number is odd, add it to the list\n            if n % 2 != 0:\n                collatz.append(n)\n\n        # Return the list sorted in increasing order\n        return sorted(collatz)\n```\n",
            "```python\nclass Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))\n```\n\nThis solution first defines a helper function `collatz(n)` that generates the Collatz sequence for a given number `n`. It then uses a list comprehension to generate a list of all odd numbers in the sequence. Finally, it sorts and returns this list. The use of `set` ensures that duplicate values are removed from the list.\n"
        ],
        "code_list": [
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the Collatz sequence\n        collatz = [n]\n\n        # Continue generating the sequence until we reach 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = 3 * n + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the even numbers and sort the remaining odd numbers\n        odd_collatz = sorted([num for num in collatz if num % 2 != 0])\n\n        return odd_collatz",
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # While the current number is not 1\n        while n != 1:\n            # If the number is even\n            if n % 2 == 0:\n                # Divide it by 2\n                n = n // 2\n            # If the number is odd\n            else:\n                # Multiply it by 3 and add 1\n                n = 3 * n + 1\n\n            # If the new number is odd, add it to the list\n            if n % 2 != 0:\n                collatz.append(n)\n\n        # Return the list sorted in increasing order\n        return sorted(collatz)",
            "class Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n        \n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))",
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # Continue until the sequence reaches 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = 3 * n + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the odd numbers from the sequence\n        odd_collatz = [num for num in collatz if num % 2 != 0]\n\n        # Return the sorted list of odd numbers\n        return sorted(odd_collatz)",
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list to store the odd numbers in the Collatz sequence\n        odd_numbers = []\n\n        # Continue the Collatz sequence until we reach 1\n        while n != 1:\n            # If the current number is odd, add it to the list\n            if n % 2 != 0:\n                odd_numbers.append(n)\n\n            # Apply the Collatz operation\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n\n        # Add 1 to the list of odd numbers since we have already checked it\n        odd_numbers.append(1)\n\n        # Sort the list of odd numbers\n        odd_numbers.sort()\n\n        return odd_numbers",
            "class Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))",
            "class Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))",
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the Collatz sequence\n        collatz = [n]\n\n        # Continue the sequence until we reach 1\n        while n != 1:\n            # If the current number is even, divide it by 2\n            if n % 2 == 0:\n                n = n // 2\n            # If the current number is odd, multiply it by 3 and add 1\n            else:\n                n = n * 3 + 1\n            # Add the new number to the sequence\n            collatz.append(n)\n\n        # Filter out the odd numbers and sort the list\n        odd_collatz = sorted([n for n in collatz if n % 2 != 0])\n\n        return odd_collatz",
            "class Solution:\n    def get_odd_collatz(self, n):\n        # Initialize the list with the first number in the sequence\n        collatz = [n]\n\n        # Continue until we reach 1\n        while n != 1:\n            # If the number is even\n            if n % 2 == 0:\n                n = n // 2\n            # If the number is odd\n            else:\n                n = 3 * n + 1\n\n            # If the new number is odd, add it to the list\n            if n % 2 != 0:\n                collatz.append(n)\n\n        # Return the list sorted in increasing order\n        return sorted(collatz)",
            "class Solution:\n    def get_odd_collatz(self, n):\n        def collatz(n):\n            sequence = [n]\n            while n != 1:\n                if n % 2 == 0:\n                    n = n // 2\n                else:\n                    n = 3 * n + 1\n                sequence.append(n)\n            return sequence\n\n        sequence = collatz(n)\n        odd_numbers = [num for num in sequence if num % 2 != 0]\n        return sorted(list(set(odd_numbers)))"
        ]
    },
    {
        "question_title": "valid_date",
        "question_content": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/124",
        "contest_id": "HumanEval/124",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def valid_date(self, date):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if date == '':\n            return False\n\n        date_parts = date.split('-')\n\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 31:\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n        if not month or not day or not year:\n            return False\n\n        try:\n            month = int(month)\n            day = int(day)\n            year = int(year)\n        except ValueError:\n            return False\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        if year < 1:\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n\n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True\n```\n\nThis solution first checks if the date string is not empty. Then it splits the date string into month, day, and year parts. It checks if all parts are digits and if they are within the expected ranges for each month.\n\nFor February, it checks if the day is not less than 1 or greater than 29 because it's not a leap year. For other months, it checks if the day is not less than 1 or greater than 31. For months with 30 days, it checks if the day is not less than 1 or greater than 30.\n\nIf all checks pass, the function returns True, indicating a valid date. Otherwise, it returns False.\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True\n```\n\nThis solution first checks if the date is not empty and if it contains exactly two hyphens. If not, it returns False. Then it splits the date into month, day, and year and converts them into integers.\n\nNext, it checks if the month is between 1 and 12. If not, it returns False.\n\nThen it checks if the day is valid for the given month. For months 4, 6, 9, and 11, it checks if the day is between 1 and 30. For month 2, it checks if the day is between 1 and 29. For all other months, it checks if the day is between 1 and 31. If any of these checks fail, it returns False.\n\nIf all checks pass, it returns True, indicating that the date is valid.\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        if year < 1:\n            return False\n\n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n        \n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        \n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        \n        month, day, year = int(month), int(day), int(year)\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1 or day > 31:\n            return False\n        \n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n        \n        if year < 1:\n            return False\n        \n        return True\n```\n",
            "```python\nclass Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n        if date.count('-') != 2:\n            return False\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if month not in [1, 3, 5, 7, 8, 10, 12] and day > 30:\n            return False\n        return True\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def valid_date(self, date):\n        if date == '':\n            return False\n\n        date_parts = date.split('-')\n\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 31:\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n        if not month or not day or not year:\n            return False\n\n        try:\n            month = int(month)\n            day = int(day)\n            year = int(year)\n        except ValueError:\n            return False\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        if year < 1:\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n\n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        date_parts = date.split('-')\n\n        if len(date_parts) != 3:\n            return False\n\n        month, day, year = date_parts\n\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n\n        month, day, year = int(month), int(day), int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if day < 1 or day > 31:\n            return False\n\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n\n        if date.count('-') != 2:\n            return False\n\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        if year < 1:\n            return False\n\n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n        \n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        \n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        \n        month, day, year = int(month), int(day), int(year)\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1 or day > 31:\n            return False\n        \n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 30:\n            return False\n        \n        if year < 1:\n            return False\n        \n        return True",
            "class Solution:\n    def valid_date(self, date):\n        if not date:\n            return False\n        if date.count('-') != 2:\n            return False\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        month, day, year = parts\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if month not in [1, 3, 5, 7, 8, 10, 12] and day > 30:\n            return False\n        return True"
        ]
    },
    {
        "question_title": "split_words",
        "question_content": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/125",
        "contest_id": "HumanEval/125",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def split_words(self, txt):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1])\n```\n",
            "```python\nclass Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1])",
            "class Solution:\n    def split_words(self, txt):\n        if ' ' in txt:\n            return txt.split(' ')\n        elif ',' in txt:\n            return txt.split(',')\n        else:\n            return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"
        ]
    },
    {
        "question_title": "is_sorted",
        "question_content": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/126",
        "contest_id": "HumanEval/126",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_sorted(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) < 2:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) <= 2:\n            return True\n        increasing = True\n        decreasing = True\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                increasing = False\n            if lst[i] < lst[i + 1]:\n                decreasing = False\n        return increasing or decreasing\n```\n\nThis solution works by first checking if the list is of length 2 or less. If so, it is trivially sorted. Then it checks if the list is sorted in increasing order or decreasing order by iterating through the list and comparing each element to the next one. If it finds an element that is greater than the next one, it sets the `increasing` variable to `False`. If it finds an element that is less than the next one, it sets the `decreasing` variable to `False`. Finally, it returns whether either `increasing` or `decreasing` is `True`.\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        # Check if list is sorted in ascending order\n        return lst == sorted(lst)\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        # Check if the list is sorted in ascending order\n        return lst == sorted(lst)\n\n# Test cases\ns = Solution()\nprint(s.is_sorted([5])) # \u279e True\nprint(s.is_sorted([1, 2, 3, 4, 5])) # \u279e True\nprint(s.is_sorted([1, 3, 2, 4, 5])) # \u279e False\nprint(s.is_sorted([1, 2, 3, 4, 5, 6])) # \u279e True\nprint(s.is_sorted([1, 2, 3, 4, 5, 6, 7])) # \u279e True\nprint(s.is_sorted([1, 3, 2, 4, 5, 6, 7])) # \u279e False\nprint(s.is_sorted([1, 2, 2, 3, 3, 4])) # \u279e True\nprint(s.is_sorted([1, 2, 2, 2, 3, 4])) # \u279e False\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) < 2:\n            return True\n        if lst[0] > lst[1]:\n            return False\n        for i in range(2, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        # Check if the list is sorted in ascending order\n        return lst == sorted(lst)\n```\n\nThis solution works by comparing the original list with a sorted version of the list. If they are the same, the original list is sorted in ascending order, and the function returns True. If they are not the same, the original list is not sorted in ascending order, and the function returns False.\n",
            "```python\nclass Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        else:\n            for i in range(len(lst)-1):\n                if lst[i] >= lst[i+1]:\n                    return False\n            return True\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) < 2:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) <= 2:\n            return True\n        increasing = True\n        decreasing = True\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                increasing = False\n            if lst[i] < lst[i + 1]:\n                decreasing = False\n        return increasing or decreasing",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True",
            "class Solution:\n    def is_sorted(self, lst):\n        # Check if list is sorted in ascending order\n        return lst == sorted(lst)",
            "class Solution:\n    def is_sorted(self, lst):\n        # Check if the list is sorted in ascending order\n        return lst == sorted(lst)\n\n# Test cases\ns = Solution()\nprint(s.is_sorted([5])) # \u279e True\nprint(s.is_sorted([1, 2, 3, 4, 5])) # \u279e True\nprint(s.is_sorted([1, 3, 2, 4, 5])) # \u279e False\nprint(s.is_sorted([1, 2, 3, 4, 5, 6])) # \u279e True\nprint(s.is_sorted([1, 2, 3, 4, 5, 6, 7])) # \u279e True\nprint(s.is_sorted([1, 3, 2, 4, 5, 6, 7])) # \u279e False\nprint(s.is_sorted([1, 2, 2, 3, 3, 4])) # \u279e True\nprint(s.is_sorted([1, 2, 2, 2, 3, 4])) # \u279e False",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) < 2:\n            return True\n        if lst[0] > lst[1]:\n            return False\n        for i in range(2, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True",
            "class Solution:\n    def is_sorted(self, lst):\n        # Check if the list is sorted in ascending order\n        return lst == sorted(lst)",
            "class Solution:\n    def is_sorted(self, lst):\n        if len(lst) == 1:\n            return True\n        else:\n            for i in range(len(lst)-1):\n                if lst[i] >= lst[i+1]:\n                    return False\n            return True"
        ]
    },
    {
        "question_title": "intersection",
        "question_content": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/127",
        "contest_id": "HumanEval/127",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def intersection(self, interval1, interval2):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the intersection and its length. It then checks if the length is a prime number by trying to divide it by all numbers up to its square root. If it finds a divisor, it returns \"NO\". If it doesn't find any divisors, it returns \"YES\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the intersection and its length. It then checks if the length is a prime number by trying to divide it by all numbers up to its square root. If it finds a divisor, it returns \"NO\". If it doesn't find any divisors, it returns \"YES\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n\n        # Calculate intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n\n        # Calculate length of intersection\n        intersection_length = intersection_end - intersection_start + 1\n\n        # Check if length is prime\n        if intersection_length < 2:\n            return \"NO\"\n\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n\n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the start and end of the intersection, and then calculates the length of the intersection. It then checks if this length is a prime number by iterating from 2 to the square root of the length and checking if the length is divisible by any of these numbers. If it is, it returns \"NO\", otherwise it returns \"YES\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Find the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        \n        # If the intervals do not intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n        \n        # Calculate the length of the intersection\n        length = end - start + 1\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n\nThis code first calculates the intersection of the two intervals. If the intervals do not intersect, it returns \"NO\". Otherwise, it calculates the length of the intersection and checks if this length is a prime number. If the length is a prime number, it returns \"YES\", otherwise it returns \"NO\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do, it calculates the intersection and its length. Finally, it checks if the length is a prime number. If it is, it returns \"YES\", otherwise it returns \"NO\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n\n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n\n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n\n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n\n        return \"YES\"\n```\n\nThis solution first checks if the two intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the start and end of the intersection and its length. It then checks if the length of the intersection is a prime number. If it is, it returns \"YES\". If it isn't, it returns \"NO\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Determine the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        \n        # If the intervals don't intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n        \n        # Calculate the length of the intersection\n        length = end - start + 1\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n\nThis solution first calculates the intersection of the two intervals. If the intervals don't intersect, it returns \"NO\". Otherwise, it calculates the length of the intersection and checks if this length is a prime number. If the length is a prime number, it returns \"YES\", otherwise it returns \"NO\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        \n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        \n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        \n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the start and end of the intersection and its length. Then it checks if the length of the intersection is a prime number. If it is, it returns \"YES\", otherwise it returns \"NO\".\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Find the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\n        # If the intervals don't intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n\n        # Calculate the length of the intersection\n        length = end - start + 1\n\n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n```\n",
            "```python\nclass Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        \n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        \n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        \n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\"\n```\n\nThis solution first checks if the intervals intersect. If they don't, it returns \"NO\". If they do intersect, it calculates the start and end of the intersection and its length. It then checks if the length of the intersection is a prime number. If it is, it returns \"YES\". If it isn't, it returns \"NO\".\n"
        ],
        "code_list": [
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n\n        # Calculate intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n\n        # Calculate length of intersection\n        intersection_length = intersection_end - intersection_start + 1\n\n        # Check if length is prime\n        if intersection_length < 2:\n            return \"NO\"\n\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Find the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        \n        # If the intervals do not intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n        \n        # Calculate the length of the intersection\n        length = end - start + 1\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        \n        # Calculate the length of the intersection\n        length = intersection[1] - intersection[0]\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n\n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n\n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n\n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Determine the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        \n        # If the intervals don't intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n        \n        # Calculate the length of the intersection\n        length = end - start + 1\n        \n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        \n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        \n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        \n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Find the intersection of the two intervals\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\n        # If the intervals don't intersect, return \"NO\"\n        if start > end:\n            return \"NO\"\n\n        # Calculate the length of the intersection\n        length = end - start + 1\n\n        # Check if the length is a prime number\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"",
            "class Solution:\n    def intersection(self, interval1, interval2):\n        # Check if the intervals intersect\n        if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n            return \"NO\"\n        \n        # Calculate the intersection\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        \n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        \n        # Check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        \n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\""
        ]
    },
    {
        "question_title": "prod_signs",
        "question_content": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/128",
        "contest_id": "HumanEval/128",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def prod_signs(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sum_magnitudes = 0\n        product_signs = 1\n        for num in arr:\n            sum_magnitudes += abs(num)\n            if num < 0:\n                product_signs *= -1\n        return sum_magnitudes * product_signs\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if len(arr) == 0:\n            return None\n        else:\n            sign_product = 1\n            magnitude_sum = 0\n            for num in arr:\n                if num < 0:\n                    sign_product *= -1\n                elif num > 0:\n                    sign_product *= 1\n                magnitude_sum += abs(num)\n            return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n```\n",
            "```python\nclass Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sum_magnitudes = 0\n        product_signs = 1\n        for num in arr:\n            sum_magnitudes += abs(num)\n            if num < 0:\n                product_signs *= -1\n        return sum_magnitudes * product_signs\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sum_magnitudes = 0\n        product_signs = 1\n        for num in arr:\n            sum_magnitudes += abs(num)\n            if num < 0:\n                product_signs *= -1\n        return sum_magnitudes * product_signs",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if len(arr) == 0:\n            return None\n        else:\n            sign_product = 1\n            magnitude_sum = 0\n            for num in arr:\n                if num < 0:\n                    sign_product *= -1\n                elif num > 0:\n                    sign_product *= 1\n                magnitude_sum += abs(num)\n            return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum",
            "class Solution:\n    def prod_signs(self, arr):\n        if not arr:\n            return None\n        sum_magnitudes = 0\n        product_signs = 1\n        for num in arr:\n            sum_magnitudes += abs(num)\n            if num < 0:\n                product_signs *= -1\n        return sum_magnitudes * product_signs"
        ]
    },
    {
        "question_title": "minPath",
        "question_content": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/129",
        "contest_id": "HumanEval/129",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def minPath(self, grid, k):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, z = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        if z + 1 <= s:\n                            if dp[nx][ny][z + 1] > val + grid[nx][ny]:\n                                dp[nx][ny][z + 1] = val + grid[nx][ny]\n                                q.append((dp[nx][ny][z + 1], nx, ny, z + 1))\n                        if dp[nx][ny][z] > val:\n                            dp[nx][ny][z] = val\n                            q.append((dp[nx][ny][z], nx, ny, z))\n        return min(dp[n - 1][n - 1])\n```\n\nThis solution uses dynamic programming to solve the problem. It initializes a 3D list dp with the size of the grid, where dp[i][j][k] represents the minimum path length from the top left cell to the cell (i, j) with k steps. For each step, it updates the minimum path length to the neighboring cells. Finally, it returns the minimum path length for the last cell with k steps.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s - 1], (0, 0))]\n            while q:\n                d, (x, y) = heapq.heappop(q)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        if d + grid[nx][ny] < dp[nx][ny][s]:\n                            dp[nx][ny][s] = d + grid[nx][ny]\n                            heapq.heappush(q, (dp[nx][ny][s], (nx, ny)))\n        return min(dp[n - 1][n - 1])\n```\n\nThis solution uses a dynamic programming approach with a priority queue to find the minimum path. The dp array stores the minimum path sum for each cell and length of path. The priority queue is used to select the cell with the smallest path sum for the next step. The moves list contains the possible moves from a cell. The solution iterates over the length of the path from 1 to k, and for each length, it iterates over all cells in the grid. For each cell, it checks all possible moves and updates the dp array if a smaller path sum is found. Finally, it returns the minimum path sum for the last cell and length k.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][0] = grid[i][j]\n\n        for l in range(1, k):\n            for i in range(n):\n                for j in range(n):\n                    for move in moves:\n                        ni, nj = i + move[0], j + move[1]\n                        if 0 <= ni < n and 0 <= nj < n:\n                            dp[i][j][l] = min(dp[i][j][l], dp[ni][nj][l - 1])\n\n        min_path = min(dp[i][j][k - 1] for i in range(n) for j in range(n))\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j][k - 1] == min_path:\n                    return self.get_path(grid, dp, k, i, j)\n\n    def get_path(self, grid, dp, k, i, j):\n        if k == 0:\n            return []\n        res = []\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for move in moves:\n            ni, nj = i + move[0], j + move[1]\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid) and dp[ni][nj][k - 1] < dp[i][j][k]:\n                res = self.get_path(grid, dp, k - 1, ni, nj)\n                break\n        return [grid[i][j]] + res\n```\n\nThis solution uses dynamic programming to keep track of the minimum path of length k ending at each cell. The dp array is initialized with infinity for all cells and paths of length 0 (which are just the cell values themselves). Then for each path length from 1 to k, we iterate over all cells and update the minimum path ending at that cell. Finally, we find the minimum path of length k and return the corresponding path.\n\nThe helper function get_path is used to reconstruct the path from the dp array. It starts from the end cell and recursively traces back the path by following the minimum values in the dp array.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s - 1], (0, 0))]\n            while q:\n                (d, (i, j)) = heapq.heappop(q)\n                for (di, dj) in moves:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < n and 0 <= nj < n:\n                        if d + grid[ni][nj] < dp[ni][nj][s]:\n                            dp[ni][nj][s] = d + grid[ni][nj]\n                            heapq.heappush(q, (dp[ni][nj][s], (ni, nj)))\n        return min(dp[i][j][k] for i in range(n) for j in range(n))\n```\n\nThis solution uses a dynamic programming approach. It first initializes a 3D list `dp` with dimensions (n x n x k+1), where `n` is the size of the grid. The value of `dp[i][j][s]` is the minimum path length from the top left cell to the cell at (i, j) with exactly `s` steps.\n\nThen, it uses a priority queue to iteratively update the minimum path length for each cell (i, j) and each step count `s`. For each cell (i, j), it considers all possible moves and updates the minimum path length for the next cell (ni, nj) if a shorter path is found.\n\nFinally, it returns the minimum path length for the bottom right cell with `k` steps.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        path = [[''] * (k + 1) for _ in range(n)]\n\n        def dfs(x, y, k):\n            if k == 0:\n                return ''\n            if dp[x][y][k] != float('inf'):\n                return path[x][y][k]\n            for dx, dy in moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    if grid[nx][ny] < grid[x][y]:\n                        temp = dfs(nx, ny, k - 1) + str(grid[x][y])\n                        if len(temp) < len(path[x][y][k]):\n                            path[x][y][k] = temp\n                            dp[x][y][k] = dp[nx][ny][k - 1]\n            return path[x][y][k]\n\n        min_path = float('inf')\n        min_x, min_y = 0, 0\n        for i in range(n):\n            for j in range(n):\n                temp = dfs(i, j, k)\n                if len(temp) < min_path:\n                    min_path = len(temp)\n                    min_x, min_y = i, j\n        return [int(i) for i in dfs(min_x, min_y, k)]\n```\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, n * n):\n            for _ in range(s):\n                x1, y1, z1 = map(int, input().split())\n                for dx, dy in moves:\n                    x2, y2 = x1 + dx, y1 + dy\n                    if 0 <= x2 < n and 0 <= y2 < n:\n                        for z in range(min(s, k), z1 - 1, -1):\n                            dp[x2][y2][z] = min(dp[x2][y2][z], dp[x1][y1][z - 1] + grid[x2][y2])\n        return min(dp[n - 1][n - 1][k:])\n```\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, steps = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and steps + 1 <= s:\n                        new_val = val + grid[nx][ny]\n                        if new_val < dp[nx][ny][steps + 1]:\n                            dp[nx][ny][steps + 1] = new_val\n                            q.append((new_val, nx, ny, steps + 1))\n        return min(dp[n - 1][n - 1])\n```\n\nThis solution uses a dynamic programming approach. The dp array is a 3D array where dp[i][j][k] represents the minimum path length from the top left cell to the cell (i, j) with k steps. The dp array is initialized with infinity for all cells. The base case is dp[0][0][0] = grid[0][0]. Then, for each step from 1 to k, we perform a breadth-first search (BFS) on the grid to update the dp array. For each cell, we consider all its neighbors and update the dp array accordingly. Finally, we return the minimum value in the last row and last column of the dp array as the minimum path length.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, z = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and z + 1 <= s:\n                        new_val = val + grid[nx][ny]\n                        if new_val < dp[nx][ny][s]:\n                            dp[nx][ny][s] = new_val\n                            q.append((new_val, nx, ny, s))\n        return min(dp[n - 1][n - 1])\n```\n\nThis solution uses dynamic programming to solve the problem. The dp array stores the minimum path sum for each cell and length of path. The outermost loop iterates over the length of the path, and the innermost loop uses a priority queue to find the minimum path sum for each cell. The priority queue is sorted by the path sum, and the smallest path sum is popped off the queue. The next cells to consider are the neighboring cells of the current cell, and the path sum for these cells is updated if a smaller path sum is found. The minimum path sum for the destination cell is returned as the result.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, n * n + 1):\n            for x in range(min(s, n)):\n                y = s - x\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        for l in range(min(s, k)):\n                            dp[x][y][s] = min(dp[x][y][s], dp[nx][ny][s - 1] + grid[x][y])\n                            if l + 1 < s:\n                                dp[x][y][s] = min(dp[x][y][s], dp[nx][ny][l] + grid[x][y])\n        return min(dp[i][j][k] for i in range(n) for j in range(n))\n```\n\nThis solution uses dynamic programming to solve the problem. The dp[i][j][s] represents the minimum path length starting from cell (0, 0) to cell (i, j) of length s. The dp array is initialized with infinity for all cells. The base case is dp[0][0][0] = grid[0][0]. For each cell (i, j), we consider all possible previous cells (nx, ny) and all possible lengths s. For each length s, we consider all possible previous lengths l and update the dp value accordingly. Finally, we return the minimum path length for all cells and length k.\n",
            "```python\nclass Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dx = [-1, 1, 0, 0]\n        dy = [0, 0, -1, 1]\n\n        def dfs(x, y, k):\n            if k == 0:\n                return []\n            res = [grid[x][y]]\n            for i in range(4):\n                nx, ny = x + dx[i], y + dy[i]\n                if 0 <= nx < n and 0 <= ny < n:\n                    if dp[nx][ny][k - 1] > dp[x][y][k] + grid[nx][ny]:\n                        dp[nx][ny][k - 1] = dp[x][y][k] + grid[nx][ny]\n                        res = [grid[nx][ny]] + dfs(nx, ny, k - 1)\n            return res\n\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][0] = grid[i][j]\n                dp[i][j][1] = min(dp[i][j][1], grid[i][j])\n\n        for l in range(2, k + 1):\n            for i in range(n):\n                for j in range(n):\n                    for m in range(4):\n                        nx, ny = i + dx[m], j + dy[m]\n                        if 0 <= nx < n and 0 <= ny < n:\n                            dp[i][j][l] = min(dp[i][j][l], dp[nx][ny][l - 1] + grid[i][j])\n\n        min_val = float('inf')\n        min_x, min_y = 0, 0\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j][k] < min_val:\n                    min_val = dp[i][j][k]\n                    min_x, min_y = i, j\n\n        return dfs(min_x, min_y, k)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, z = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        if z + 1 <= s:\n                            if dp[nx][ny][z + 1] > val + grid[nx][ny]:\n                                dp[nx][ny][z + 1] = val + grid[nx][ny]\n                                q.append((dp[nx][ny][z + 1], nx, ny, z + 1))\n                        if dp[nx][ny][z] > val:\n                            dp[nx][ny][z] = val\n                            q.append((dp[nx][ny][z], nx, ny, z))\n        return min(dp[n - 1][n - 1])",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s - 1], (0, 0))]\n            while q:\n                d, (x, y) = heapq.heappop(q)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        if d + grid[nx][ny] < dp[nx][ny][s]:\n                            dp[nx][ny][s] = d + grid[nx][ny]\n                            heapq.heappush(q, (dp[nx][ny][s], (nx, ny)))\n        return min(dp[n - 1][n - 1])",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][0] = grid[i][j]\n\n        for l in range(1, k):\n            for i in range(n):\n                for j in range(n):\n                    for move in moves:\n                        ni, nj = i + move[0], j + move[1]\n                        if 0 <= ni < n and 0 <= nj < n:\n                            dp[i][j][l] = min(dp[i][j][l], dp[ni][nj][l - 1])\n\n        min_path = min(dp[i][j][k - 1] for i in range(n) for j in range(n))\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j][k - 1] == min_path:\n                    return self.get_path(grid, dp, k, i, j)\n\n    def get_path(self, grid, dp, k, i, j):\n        if k == 0:\n            return []\n        res = []\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for move in moves:\n            ni, nj = i + move[0], j + move[1]\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid) and dp[ni][nj][k - 1] < dp[i][j][k]:\n                res = self.get_path(grid, dp, k - 1, ni, nj)\n                break\n        return [grid[i][j]] + res",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s - 1], (0, 0))]\n            while q:\n                (d, (i, j)) = heapq.heappop(q)\n                for (di, dj) in moves:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < n and 0 <= nj < n:\n                        if d + grid[ni][nj] < dp[ni][nj][s]:\n                            dp[ni][nj][s] = d + grid[ni][nj]\n                            heapq.heappush(q, (dp[ni][nj][s], (ni, nj)))\n        return min(dp[i][j][k] for i in range(n) for j in range(n))",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        path = [[''] * (k + 1) for _ in range(n)]\n\n        def dfs(x, y, k):\n            if k == 0:\n                return ''\n            if dp[x][y][k] != float('inf'):\n                return path[x][y][k]\n            for dx, dy in moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    if grid[nx][ny] < grid[x][y]:\n                        temp = dfs(nx, ny, k - 1) + str(grid[x][y])\n                        if len(temp) < len(path[x][y][k]):\n                            path[x][y][k] = temp\n                            dp[x][y][k] = dp[nx][ny][k - 1]\n            return path[x][y][k]\n\n        min_path = float('inf')\n        min_x, min_y = 0, 0\n        for i in range(n):\n            for j in range(n):\n                temp = dfs(i, j, k)\n                if len(temp) < min_path:\n                    min_path = len(temp)\n                    min_x, min_y = i, j\n        return [int(i) for i in dfs(min_x, min_y, k)]",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, n * n):\n            for _ in range(s):\n                x1, y1, z1 = map(int, input().split())\n                for dx, dy in moves:\n                    x2, y2 = x1 + dx, y1 + dy\n                    if 0 <= x2 < n and 0 <= y2 < n:\n                        for z in range(min(s, k), z1 - 1, -1):\n                            dp[x2][y2][z] = min(dp[x2][y2][z], dp[x1][y1][z - 1] + grid[x2][y2])\n        return min(dp[n - 1][n - 1][k:])",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, steps = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and steps + 1 <= s:\n                        new_val = val + grid[nx][ny]\n                        if new_val < dp[nx][ny][steps + 1]:\n                            dp[nx][ny][steps + 1] = new_val\n                            q.append((new_val, nx, ny, steps + 1))\n        return min(dp[n - 1][n - 1])",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for s in range(1, k + 1):\n            q = [(dp[0][0][s-1], 0, 0, s-1)]\n            while q:\n                q.sort()\n                val, x, y, z = q.pop(0)\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and z + 1 <= s:\n                        new_val = val + grid[nx][ny]\n                        if new_val < dp[nx][ny][s]:\n                            dp[nx][ny][s] = new_val\n                            q.append((new_val, nx, ny, s))\n        return min(dp[n - 1][n - 1])",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        for s in range(1, n * n + 1):\n            for x in range(min(s, n)):\n                y = s - x\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        for l in range(min(s, k)):\n                            dp[x][y][s] = min(dp[x][y][s], dp[nx][ny][s - 1] + grid[x][y])\n                            if l + 1 < s:\n                                dp[x][y][s] = min(dp[x][y][s], dp[nx][ny][l] + grid[x][y])\n        return min(dp[i][j][k] for i in range(n) for j in range(n))",
            "class Solution:\n    def minPath(self, grid, k):\n        n = len(grid)\n        dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n        dx = [-1, 1, 0, 0]\n        dy = [0, 0, -1, 1]\n\n        def dfs(x, y, k):\n            if k == 0:\n                return []\n            res = [grid[x][y]]\n            for i in range(4):\n                nx, ny = x + dx[i], y + dy[i]\n                if 0 <= nx < n and 0 <= ny < n:\n                    if dp[nx][ny][k - 1] > dp[x][y][k] + grid[nx][ny]:\n                        dp[nx][ny][k - 1] = dp[x][y][k] + grid[nx][ny]\n                        res = [grid[nx][ny]] + dfs(nx, ny, k - 1)\n            return res\n\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][0] = grid[i][j]\n                dp[i][j][1] = min(dp[i][j][1], grid[i][j])\n\n        for l in range(2, k + 1):\n            for i in range(n):\n                for j in range(n):\n                    for m in range(4):\n                        nx, ny = i + dx[m], j + dy[m]\n                        if 0 <= nx < n and 0 <= ny < n:\n                            dp[i][j][l] = min(dp[i][j][l], dp[nx][ny][l - 1] + grid[i][j])\n\n        min_val = float('inf')\n        min_x, min_y = 0, 0\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j][k] < min_val:\n                    min_val = dp[i][j][k]\n                    min_x, min_y = i, j\n\n        return dfs(min_x, min_y, k)"
        ]
    },
    {
        "question_title": "greatest_common_divisor",
        "question_content": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/13",
        "contest_id": "HumanEval/13",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n",
            "```python\nclass Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a",
            "class Solution:\n    def greatest_common_divisor(self, a: int, b: int)-> int:\n        while b != 0:\n            a, b = b, a % b\n        return a"
        ]
    },
    {
        "question_title": "tri",
        "question_content": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/130",
        "contest_id": "HumanEval/130",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def tri(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq\n```\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq\n```\n\nThis solution uses a list to store the Tribonacci sequence up to the nth term. The base cases are handled separately for n=0, n=1, and n=2. For n>2, the sequence is computed by iterating from 3 to n (inclusive) and appending the next term to the list based on whether the current term is even or odd. If it's even, the next term is 1 + the current term divided by 2. If it's odd, the next term is the sum of the previous two terms and the next term in the sequence.\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq\n```\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq\n```\n\nThis solution uses a list to store the Tribonacci sequence up to the nth term. The base cases are handled first, where n is 0, 1, or 2. For n greater than 2, the sequence is computed iteratively, using the given recurrence relation. The sequence is appended to the list for each term, and finally the list is returned.\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n        return tri_seq\n```\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq\n```\n\nThis solution uses a list to store the Tribonacci sequence. The base cases are handled first, where n is 0, 1, or 2. For n > 2, the sequence is computed iteratively. If the current number is even, it is divided by 2 and 1 is added. If the current number is odd, the sum of the previous three numbers in the sequence is computed. The computed number is then appended to the sequence. The function finally returns the sequence.\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n        return tri_seq\n```\n\nThis solution uses a dynamic programming approach to solve the problem. It first checks if n is 0, 1, or 2, and returns the corresponding Tribonacci sequence. If n is greater than 2, it initializes the Tribonacci sequence with the first three numbers (0, 3, 2) and then iteratively calculates the next numbers in the sequence based on the given recurrence relation. The result is a list of the first n + 1 numbers in the Tribonacci sequence.\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq\n```\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n            return tri_seq\n```\n",
            "```python\nclass Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n        return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n        return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n            return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        else:\n            tri_seq = [0, 3, 2]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    tri_seq.append(1 + i // 2)\n                else:\n                    tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i])\n            return tri_seq",
            "class Solution:\n    def tri(self, n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 3]\n        elif n == 2:\n            return [0, 3, 2]\n        \n        tri_seq = [0, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[i-1] + tri_seq[i-2] + tri_seq[i])\n        return tri_seq"
        ]
    },
    {
        "question_title": "digits",
        "question_content": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/131",
        "contest_id": "HumanEval/131",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def digits(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        has_odd_digit = False\n        for digit in str(n):\n            digit = int(digit)\n            if digit % 2 != 0:\n                product *= digit\n                has_odd_digit = True\n        return product if has_odd_digit else 0\n```\n",
            "```python\nclass Solution:\n    def digits(self, n):\n        product = 1\n        has_odd = False\n        for digit in str(n):\n            digit = int(digit)\n            if digit % 2 != 0:\n                product *= digit\n                has_odd = True\n        return 0 if not has_odd else product\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n = n // 10\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        has_odd_digit = False\n        for digit in str(n):\n            digit = int(digit)\n            if digit % 2 != 0:\n                product *= digit\n                has_odd_digit = True\n        return product if has_odd_digit else 0",
            "class Solution:\n    def digits(self, n):\n        product = 1\n        has_odd = False\n        for digit in str(n):\n            digit = int(digit)\n            if digit % 2 != 0:\n                product *= digit\n                has_odd = True\n        return 0 if not has_odd else product"
        ]
    },
    {
        "question_title": "is_nested",
        "question_content": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/132",
        "contest_id": "HumanEval/132",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_nested(self, string):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return bool(stack)\n```\n\nIn this solution, we use a stack to keep track of the brackets. When we encounter an opening bracket, we push it onto the stack. When we encounter a closing bracket, we check if the stack is empty or the top of the stack is not an opening bracket. If either of these conditions is true, we return False. Otherwise, we pop the top of the stack. After we have processed all the brackets, if the stack is not empty, it means there is a valid subsequence of brackets where at least one bracket is nested, so we return True. Otherwise, we return False.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0 or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n```\n\nThis solution uses a stack to keep track of the open brackets. When it encounters a closing bracket, it checks if the stack is empty or the last bracket in the stack is not an opening bracket. If either of these conditions is true, it returns False. If it encounters an opening bracket, it adds it to the stack. Finally, it returns True if the stack is empty (meaning all brackets were properly closed) and False otherwise.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n```\n\nThis solution uses a stack to keep track of the open brackets. When an open bracket is encountered, it is pushed onto the stack. When a close bracket is encountered, it checks if the stack is empty or the top of the stack is not an open bracket. If either of these conditions is true, it returns False. Otherwise, it pops the top of the stack. If the stack is empty after processing all the brackets, it returns True. Otherwise, it returns False.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n```\n\nThis solution uses a stack to keep track of the open brackets. When an open bracket is encountered, it is pushed onto the stack. When a close bracket is encountered, it checks if the stack is empty. If it is, then there is no matching open bracket for this close bracket, so it returns False. If the stack is not empty, it pops the last open bracket from the stack. If the stack is empty at the end, it means all brackets have been matched, so it returns True.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return False\n        return True\n```\n\nIn this solution, we use a stack to keep track of the brackets. When we encounter an opening bracket, we push it onto the stack. When we encounter a closing bracket, we check if the stack is empty. If it is, we return False because there is no matching opening bracket. If it's not empty, we pop the last bracket from the stack. After going through all the brackets, if the stack is not empty, it means there is at least one valid subsequence of brackets where at least one bracket is nested, so we return True. If the stack is empty, it means there is no valid subsequence of brackets where at least one bracket is nested, so we return False.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n```\n\nThis solution uses a stack to keep track of the open brackets. When it encounters a closing bracket, it checks if there is a matching open bracket in the stack. If there is, it removes it from the stack. If there isn't, it returns False. If there are any open brackets left in the stack after checking all the closing brackets, it returns False. If there are no open brackets left, it returns True.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n```\n\nIn the code above, we use a stack to keep track of the brackets. When we encounter an opening bracket, we push it onto the stack. When we encounter a closing bracket, we check if the stack is empty or the top of the stack is not an opening bracket. If either of these conditions is true, we return False because this means there is no matching opening bracket for the closing bracket. If the stack is not empty and the top of the stack is an opening bracket, we pop the top of the stack. At the end of the function, we check if the stack is empty. If it is, this means all brackets have been matched and we return True. If the stack is not empty, this means there are unmatched opening brackets and we return False.\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n                if len(stack) > 0 and bracket == ']':\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return bool(stack)\n\ns = Solution()\nprint(s.is_nested('[[]]'))  # \u279e True\nprint(s.is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(s.is_nested('[][]'))  # \u279e False\nprint(s.is_nested('[]'))  # \u279e False\nprint(s.is_nested('[[][]]'))  # \u279e True\nprint(s.is_nested('[[]][['))  # \u279e True\n```\n",
            "```python\nclass Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n```\n\nThis solution uses a stack to keep track of the open brackets. When it encounters a closing bracket, it checks if the stack is empty or the last element in the stack is not an opening bracket. If either of these conditions is true, it returns False. If it is not, it pops the last element from the stack. After going through all the brackets, it checks if the stack is empty. If it is, it returns True, indicating that there is at least one valid subsequence of brackets. If the stack is not empty, it means there are unmatched opening brackets, so it returns False.\n"
        ],
        "code_list": [
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return bool(stack)",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0 or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return False\n        return True",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n                if len(stack) > 0 and bracket == ']':\n                    return True\n        return False",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return bool(stack)\n\ns = Solution()\nprint(s.is_nested('[[]]'))  # \u279e True\nprint(s.is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(s.is_nested('[][]'))  # \u279e False\nprint(s.is_nested('[]'))  # \u279e False\nprint(s.is_nested('[[][]]'))  # \u279e True\nprint(s.is_nested('[[]][['))  # \u279e True",
            "class Solution:\n    def is_nested(self, string):\n        stack = []\n        for bracket in string:\n            if bracket == '[':\n                stack.append(bracket)\n            elif bracket == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0"
        ]
    },
    {
        "question_title": "sum_squares",
        "question_content": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/133",
        "contest_id": "HumanEval/133",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sum_squares(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num)+0.5)**2 for num in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n```\n\nThis solution uses the built-in `sum` function in Python, along with a generator expression to iterate over each number in the input list `lst`. For each number, it first calculates the absolute value, rounds it to the nearest integer using the `round` function, and then squares it. The `abs` function is used to ensure the number is positive, and the `0.5` is added to ensure rounding to the nearest integer, which is necessary because the `round` function in Python always rounds to the nearest even number. The result is then summed up by the `sum` function.\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(num)**2 for num in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(i) ** 2 for i in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num)+0.5)**2 for num in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(num)**2 for num in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(i) ** 2 for i in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(x) ** 2 for x in lst)",
            "class Solution:\n    def sum_squares(self, lst):\n        return sum(int(abs(num) + 0.5) ** 2 for num in lst)"
        ]
    },
    {
        "question_title": "check_if_last_char_is_a_letter",
        "question_content": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/134",
        "contest_id": "HumanEval/134",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt or not txt[-1].isalpha():\n            return False\n        if len(txt) == 1:\n            return True\n        return txt[-2] == ' '\n```\n\nThis solution works by first checking if the string is empty or if the last character is not a letter. If either of these conditions is true, the function returns False. If the string has only one character, the function returns True because there are no other characters to check. Finally, the function checks if the second to last character is a space, which would indicate that the last character is not part of a word. If this condition is true, the function returns True, otherwise it returns False.\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt or not txt[-1].isalpha():\n            return False\n        if len(txt) == 1:\n            return True\n        return txt[-2] == ' '\n```\n\nThis solution works by first checking if the string is empty or if the last character is not a letter. If either of these conditions is true, the function returns False. If the string has only one character, the function returns True because there are no characters before the last one. Finally, the function checks if the character before the last one is a space, which would indicate that the last character is not part of a word. If this is the case, the function returns True, otherwise it returns False.\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt or not txt[-1].isalpha():\n            return False\n        if len(txt) == 1:\n            return True\n        return txt[-2] == ' '",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt or not txt[-1].isalpha():\n            return False\n        if len(txt) == 1:\n            return True\n        return txt[-2] == ' '",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False",
            "class Solution:\n    def check_if_last_char_is_a_letter(self, txt):\n        if not txt:\n            return False\n        if txt[-1].isalpha():\n            if len(txt) == 1 or txt[-2] == ' ':\n                return True\n        return False"
        ]
    },
    {
        "question_title": "can_arrange",
        "question_content": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/135",
        "contest_id": "HumanEval/135",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def can_arrange(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1",
            "class Solution:\n    def can_arrange(self, arr):\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1"
        ]
    },
    {
        "question_title": "largest_smallest_integers",
        "question_content": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/136",
        "contest_id": "HumanEval/136",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def largest_smallest_integers(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n",
            "```python\nclass Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)",
            "class Solution:\n    def largest_smallest_integers(self, lst):\n        largest_negative = None\n        smallest_positive = None\n\n        for num in lst:\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n        return (largest_negative, smallest_positive)"
        ]
    },
    {
        "question_title": "compare_one",
        "question_content": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/137",
        "contest_id": "HumanEval/137",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def compare_one(self, a, b):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Convert the strings to floats if they are in the format of \"x,y\"\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if isinstance(a, float) and isinstance(b, float):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif isinstance(a, int) and isinstance(b, int):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        else:\n            # If one of the variables is a float and the other is an int, convert the int to float\n            if isinstance(a, int):\n                a = float(a)\n            else:\n                b = float(b)\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n```\n\nThis solution first checks the types of `a` and `b`. If they are both strings, it converts them to floats and replaces the comma with a dot. Then it compares the values and returns the larger one. If the values are equal, it returns `None`. If one of the variables is an integer and the other is a float, it converts the integer to a float before comparing.\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in case the numbers are represented as strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        if a == b:\n            return None\n        elif isinstance(a, float) and isinstance(b, float):\n            return max(a, b)\n        elif isinstance(a, int) and isinstance(b, int):\n            return max(a, b)\n        elif isinstance(a, float):\n            return a\n        elif isinstance(b, float):\n            return b\n        elif isinstance(a, int):\n            return a\n        else:\n            return b\n```\n\nThis solution first checks if the inputs are strings and if so, it replaces the comma with a dot and converts the string to a float. Then it checks if the inputs are equal and if so, it returns None. If the inputs are not equal, it checks which type is float and returns the larger one. If neither of the inputs is a float, it returns the larger integer.\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the string representation of numbers\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n```\n",
            "```python\nclass Solution:\n    def compare_one(self, a, b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        if a == b:\n            return None\n        elif isinstance(a, float) and isinstance(b, float):\n            return max(a, b)\n        elif isinstance(a, int) and isinstance(b, int):\n            return max(a, b)\n        elif isinstance(a, float):\n            return a\n        elif isinstance(b, float):\n            return b\n        elif isinstance(a, int):\n            return a\n        else:\n            return b\n```\n\nThis solution first checks if the inputs are strings and if so, it replaces the comma with a dot to make them valid float numbers. Then it checks if the inputs are equal and if so, it returns None. If the inputs are not equal, it checks which type is float and which is int and returns the larger one. If one of the inputs is float and the other is int, it returns the float. If neither of the inputs is float, it returns the int.\n"
        ],
        "code_list": [
            "class Solution:\n    def compare_one(self, a, b):\n        # Convert the strings to floats if they are in the format of \"x,y\"\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if isinstance(a, float) and isinstance(b, float):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif isinstance(a, int) and isinstance(b, int):\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        else:\n            # If one of the variables is a float and the other is an int, convert the int to float\n            if isinstance(a, int):\n                a = float(a)\n            else:\n                b = float(b)\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in case the numbers are represented as strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        if a == b:\n            return None\n        elif isinstance(a, float) and isinstance(b, float):\n            return max(a, b)\n        elif isinstance(a, int) and isinstance(b, int):\n            return max(a, b)\n        elif isinstance(a, float):\n            return a\n        elif isinstance(b, float):\n            return b\n        elif isinstance(a, int):\n            return a\n        else:\n            return b",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the string representation of numbers\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        # Replace ',' with '.' in the strings\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        # Compare the values and return the larger one\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None",
            "class Solution:\n    def compare_one(self, a, b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        if a == b:\n            return None\n        elif isinstance(a, float) and isinstance(b, float):\n            return max(a, b)\n        elif isinstance(a, int) and isinstance(b, int):\n            return max(a, b)\n        elif isinstance(a, float):\n            return a\n        elif isinstance(b, float):\n            return b\n        elif isinstance(a, int):\n            return a\n        else:\n            return b"
        ]
    },
    {
        "question_title": "is_equal_to_sum_even",
        "question_content": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/138",
        "contest_id": "HumanEval/138",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_equal_to_sum_even(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0\n```\n\nThis solution works by checking if the given number is less than 10. If it is, it returns False because a number less than 10 cannot be the sum of exactly 4 positive even numbers. If the number is 10 or greater, it checks if the number is even. If it is, it returns True; if not, it returns False.\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0\n```\n\nThis solution works by checking if the given number is less than 10. If it is, it returns False because a number less than 10 cannot be written as the sum of exactly 4 positive even numbers. If the number is 10 or greater, it checks if the number is even. If it is, it returns True; if it's not, it returns False.\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False\n```\n\nThis solution uses a recursive approach to check all possible combinations of 4 positive even numbers that sum up to the given number. If it finds a combination that sums up to the number, it returns True. If it doesn't find any, it returns False.\n\nHowever, this solution has exponential time complexity due to the recursive nature of the problem. It will not work for large inputs. A more efficient solution would use a dynamic programming approach to solve the problem in linear time.\n\nHere is a more efficient solution:\n\n```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        dp = [0]*(n+1)\n        dp[0] = 1\n        for i in range(2, n+1, 2):\n            for j in range(i, n+1):\n                dp[j] = max(dp[j], dp[j-i]+1)\n        return dp[n] == 4\n```\n\nThis solution uses a dynamic programming approach to solve the problem. It creates a list dp where dp[i] is the maximum number of positive even numbers that sum up to i. It then iterates over all even numbers from 2 to n, and for each number i, it updates dp[j] as max(dp[j], dp[j-i]+1) for all j >= i. Finally, it returns True if dp[n] is 4, indicating that n can be written as the sum of exactly 4 positive even numbers, and False otherwise.\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0\n```\n\nThis solution works by checking if the given number is less than 10. If it is, it returns False because a number less than 10 cannot be expressed as the sum of exactly 4 positive even numbers. If the number is 10 or greater, it checks if the number is even. If it is, it returns True; if not, it returns False.\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n\n        return False",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        dp = [0]*(n+1)\n        dp[0] = 1\n        for i in range(2, n+1, 2):\n            for j in range(i, n+1):\n                dp[j] = max(dp[j], dp[j-i]+1)\n        return dp[n] == 4",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        else:\n            return n % 2 == 0",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        if n < 10:\n            return False\n        for i in range(2, n//2+1, 2):\n            if self.is_equal_to_sum_even(n-i):\n                return True\n        return False",
            "class Solution:\n    def is_equal_to_sum_even(self, n):\n        # Check if the number is even\n        if n % 2 != 0:\n            return False\n\n        # Check if the number can be written as the sum of exactly 4 positive even numbers\n        for i in range(2, n, 2):\n            for j in range(i, n, 2):\n                for k in range(j, n, 2):\n                    for l in range(k, n, 2):\n                        if i + j + k + l == n:\n                            return True\n\n        return False"
        ]
    },
    {
        "question_title": "special_factorial",
        "question_content": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/139",
        "contest_id": "HumanEval/139",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def special_factorial(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n + 1):\n                fact *= i\n            return fact * self.special_factorial(n - 1)\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result\n```\n\nThis solution uses a helper function `factorial(n)` to calculate the factorial of a number. The main function `special_factorial(n)` uses a for loop to calculate the special factorial by multiplying the factorial of each number from `n` down to `1`.\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n + 1):\n                fact *= i\n            return fact * self.special_factorial(n - 1)\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n        return result\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact * self.special_factorial(n-1)\n```\n\nThis solution uses a recursive approach to calculate the special factorial. It starts with the factorial of the input number, then multiplies it by the factorial of the number minus one, and so on, until it reaches 1. This results in the special factorial of the input number.\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact * self.special_factorial(n-1)\n```\n\nThis solution uses a recursive approach to calculate the special factorial. The base case is when n is 0, in which case the function returns 1. For all other values of n, the function calculates the factorial of n and then recursively calls itself with n-1, multiplying the result by the factorial of n. This continues until n is 0, at which point the recursion stops and the final result is returned.\n",
            "```python\nclass Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n        return result",
            "class Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n + 1):\n                fact *= i\n            return fact * self.special_factorial(n - 1)",
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result",
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result",
            "class Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n + 1):\n                fact *= i\n            return fact * self.special_factorial(n - 1)",
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        \n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n        return result",
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result",
            "class Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact * self.special_factorial(n-1)",
            "class Solution:\n    def special_factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, n+1):\n                fact *= i\n            return fact * self.special_factorial(n-1)",
            "class Solution:\n    def special_factorial(self, n):\n        def factorial(n):\n            if n == 0 or n == 1:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        result = 1\n        for i in range(n, 0, -1):\n            result *= factorial(i)\n\n        return result"
        ]
    },
    {
        "question_title": "all_prefixes",
        "question_content": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/14",
        "contest_id": "HumanEval/14",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def all_prefixes(self, string: str)-> List[str]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes\n```\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(len(string)):\n            prefixes.append(string[:i+1])\n        return prefixes",
            "from typing import List\n\nclass Solution:\n    def all_prefixes(self, string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string) + 1):\n            prefixes.append(string[:i])\n        return prefixes"
        ]
    },
    {
        "question_title": "fix_spaces",
        "question_content": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/140",
        "contest_id": "HumanEval/140",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fix_spaces(self, text):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)\n```\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for char in text:\n            if char == ' ':\n                count += 1\n                if count == 1:\n                    result += '_'\n                elif count > 2:\n                    result = result[:-1] + '-'\n            else:\n                result += char\n                count = 0\n        return result\n```\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result += '-'\n            else:\n                if count > 0:\n                    result += '_' * count\n                    count = 0\n                result += ch\n        if count > 0:\n            result += '_' * count\n        return result\n```\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)\n```\n\nThis solution works by iterating over the characters in the input string. If it encounters a space, it increments a counter. If the counter is 2, it appends a '-' to the result. If it encounters a non-space character, it checks if the counter is greater than 0. If so, it appends an underscore or a hyphen to the result based on the value of the counter, and then resets the counter to 0. Finally, it joins the result into a string and returns it.\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)\n```\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for char in text:\n            if char == ' ':\n                count += 1\n                if count == 2:\n                    result += '-'\n            else:\n                if count > 0:\n                    result += '_' * count\n                    count = 0\n                result += char\n        if count > 0:\n            result += '_' * count\n        return result\n```\n\nThis solution iterates over the input string character by character. If it encounters a space, it increments a counter. If the counter reaches 2, it appends a hyphen to the result string. If it encounters a non-space character, it appends the appropriate number of underscores to the result string (which is equal to the counter value), resets the counter to 0, and then appends the non-space character to the result string. Finally, if the counter is greater than 0 at the end of the string, it appends the appropriate number of underscores to the result string.\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = \"\"\n        count = 0\n        for char in text:\n            if char == \" \":\n                count += 1\n                if count == 2:\n                    result += \"-\"\n            else:\n                if count > 0:\n                    result += \"_\" * count\n                    count = 0\n                result += char\n        if count > 0:\n            result += \"_\" * count\n        return result\n```\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)\n```\n\nThis solution works by iterating over each character in the input string. If the character is a space, it increments a counter. If the counter is 2, it appends a '-' to the result. If the character is not a space, it appends the appropriate number of underscores or dashes to the result (if the counter was 1, it appends an underscore, and if the counter was greater than 1, it appends a dash) and then appends the character itself. Finally, it joins the result into a single string and returns it.\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)\n```\n\nThis solution works by iterating over each character in the input string. If the character is a space, it increments a counter. If the counter is 2, it appends a '-' to the result. If the character is not a space, it appends the appropriate number of underscores or dashes to the result (depending on the value of the counter), resets the counter to 0, and then appends the character itself.\n",
            "```python\nclass Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    if count == 1:\n                        result.append('_')\n                    result.append(ch)\n                    count = 0\n                else:\n                    result.append(ch)\n        return ''.join(result)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)",
            "class Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for char in text:\n            if char == ' ':\n                count += 1\n                if count == 1:\n                    result += '_'\n                elif count > 2:\n                    result = result[:-1] + '-'\n            else:\n                result += char\n                count = 0\n        return result",
            "class Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result += '-'\n            else:\n                if count > 0:\n                    result += '_' * count\n                    count = 0\n                result += ch\n        if count > 0:\n            result += '_' * count\n        return result",
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)",
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)",
            "class Solution:\n    def fix_spaces(self, text):\n        result = ''\n        count = 0\n        for char in text:\n            if char == ' ':\n                count += 1\n                if count == 2:\n                    result += '-'\n            else:\n                if count > 0:\n                    result += '_' * count\n                    count = 0\n                result += char\n        if count > 0:\n            result += '_' * count\n        return result",
            "class Solution:\n    def fix_spaces(self, text):\n        result = \"\"\n        count = 0\n        for char in text:\n            if char == \" \":\n                count += 1\n                if count == 2:\n                    result += \"-\"\n            else:\n                if count > 0:\n                    result += \"_\" * count\n                    count = 0\n                result += char\n        if count > 0:\n            result += \"_\" * count\n        return result",
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)",
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    result.append('_' if count == 1 else '-')\n                    count = 0\n                result.append(ch)\n        return ''.join(result)",
            "class Solution:\n    def fix_spaces(self, text):\n        result = []\n        count = 0\n        for ch in text:\n            if ch == ' ':\n                count += 1\n                if count == 2:\n                    result.append('-')\n            else:\n                if count > 0:\n                    if count == 1:\n                        result.append('_')\n                    result.append(ch)\n                    count = 0\n                else:\n                    result.append(ch)\n        return ''.join(result)"
        ]
    },
    {
        "question_title": "file_name_check",
        "question_content": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/141",
        "contest_id": "HumanEval/141",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def file_name_check(self, file_name):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if the file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there are more than three digits in the file name\n        if len(re.findall(r'\\d', file_name)) > 3:\n            return 'No'\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into the name and extension parts\n        name, extension = file_name.split('.')\n\n        # Check if the name part is not empty and starts with a letter\n        if not name or not name[0].isalpha():\n            return 'No'\n\n        # Check if the extension is one of the allowed extensions\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits in the name\n        if not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than 3 digits in the name\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if the file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nclass Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into the name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'\n```\n",
            "```python\nimport re\n\nclass Solution:\n    def file_name_check(self, file_name):\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n        \n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n        \n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n        \n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n        \n        return 'Yes'\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if the file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there are more than three digits in the file name\n        if len(re.findall(r'\\d', file_name)) > 3:\n            return 'No'\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into the name and extension parts\n        name, extension = file_name.split('.')\n\n        # Check if the name part is not empty and starts with a letter\n        if not name or not name[0].isalpha():\n            return 'No'\n\n        # Check if the extension is one of the allowed extensions\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits in the name\n        if not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than 3 digits in the name\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if the file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and contains no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "class Solution:\n    def file_name_check(self, file_name):\n        import re\n\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n\n        # Split the file name into the name and extension\n        name, extension = file_name.split('.')\n\n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n            return 'No'\n\n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n\n        return 'Yes'",
            "import re\n\nclass Solution:\n    def file_name_check(self, file_name):\n        # Check if there is exactly one dot in the file name\n        if file_name.count('.') != 1:\n            return 'No'\n        \n        # Split the file name into name and extension\n        name, extension = file_name.split('.')\n        \n        # Check if the name starts with a letter and there are no more than three digits\n        if not name[0].isalpha() or len(re.findall('\\d', name)) > 3:\n            return 'No'\n        \n        # Check if the extension is one of the allowed ones\n        if extension not in ['txt', 'exe', 'dll']:\n            return 'No'\n        \n        return 'Yes'"
        ]
    },
    {
        "question_title": "sum_squares",
        "question_content": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/142",
        "contest_id": "HumanEval/142",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sum_squares(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n",
            "```python\nclass Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum",
            "class Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0:\n                sum += lst[i] ** 3\n            else:\n                sum += lst[i]\n        return sum",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total",
            "class Solution:\n    def sum_squares(self, lst):\n        total = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                total += lst[i] ** 2\n            elif i % 4 == 0:\n                total += lst[i] ** 3\n            else:\n                total += lst[i]\n        return total"
        ]
    },
    {
        "question_title": "words_in_sentence",
        "question_content": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/143",
        "contest_id": "HumanEval/143",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def words_in_sentence(self, sentence):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return \" \".join(result)\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. It then splits the input sentence into words and uses a list comprehension to filter out the words that have a prime length. The resulting list of words is then joined back into a string with spaces in between.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n\nIn this solution, we first define a helper function `is_prime` to check if a number is prime. Then we split the input sentence into words and use a list comprehension to filter out the words whose lengths are prime numbers. Finally, we join the prime words together with a space in between and return the result.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n\nIn this solution, we first define a helper function `is_prime` to check if a number is prime. Then we split the input sentence into words and use a list comprehension to filter out the words whose lengths are prime numbers. Finally, we join the prime words back into a sentence and return it.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. Then it splits the input sentence into words and filters out the words whose lengths are not prime numbers. Finally, it joins the prime words back into a sentence and returns it.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return ' '.join(result)\n```\n\nIn this solution, we first define a helper function `is_prime` to check if a number is prime. Then we split the input sentence into words. We use a list comprehension to filter out the words whose lengths are prime numbers. Finally, we join the filtered words with a space and return the result.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n\nIn this solution, we first define a helper function `is_prime` that checks if a number is prime. Then we split the input sentence into words and use a list comprehension to filter out the words whose lengths are prime numbers. Finally, we join the prime words back into a string with spaces in between.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return ' '.join(result)\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. It then splits the input sentence into words, and uses a list comprehension to create a list of words whose lengths are prime numbers. Finally, it joins the words in the list into a string with spaces between the words and returns this string.\n",
            "```python\nclass Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n```\n\nIn this solution, we first define a helper function `is_prime` that checks if a number is prime. Then we split the input sentence into words and use a list comprehension to create a list of words whose lengths are prime numbers. Finally, we join the prime words with a space and return the result.\n"
        ],
        "code_list": [
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return \" \".join(result)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return ' '.join(result)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        result = [word for word in words if is_prime(len(word))]\n        return ' '.join(result)",
            "class Solution:\n    def words_in_sentence(self, sentence):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)"
        ]
    },
    {
        "question_title": "simplify",
        "question_content": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/144",
        "contest_id": "HumanEval/144",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def simplify(self, x, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the simplified expression\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_den % result_num == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        return num % den == 0\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerator and denominator\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the multiplication\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_num % result_den == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the simplified expression\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_den % result_num == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the new numerator and denominator\n        new_num = x_num * n_num\n        new_den = x_den * n_den\n\n        # Check if the new numerator is a whole number\n        if new_num % new_den == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the numerator and denominator of the simplified fraction\n        new_num = x_num * n_num\n        new_den = x_den * n_den\n\n        # Check if the simplified fraction is a whole number\n        return new_num % new_den == 0\n```\n\nThis solution works by first splitting the input strings into numerator and denominator parts. It then calculates the numerator and denominator of the simplified fraction by multiplying the numerators and denominators of the input fractions. Finally, it checks if the simplified fraction is a whole number by checking if the remainder of the division of the numerator by the denominator is zero. If the remainder is zero, the function returns True, otherwise it returns False.\n",
            "```python\nclass Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the simplified expression\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_den % result_num == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        return num % den == 0",
            "class Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerator and denominator\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the multiplication\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_num % result_den == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the result of the simplified expression\n        result_num = x_num * n_num\n        result_den = x_den * n_den\n\n        # Check if the result is a whole number\n        if result_den % result_num == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        # Split the strings into numerators and denominators\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the new numerator and denominator\n        new_num = x_num * n_num\n        new_den = x_den * n_den\n\n        # Check if the new numerator is a whole number\n        if new_num % new_den == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Calculate the numerator and denominator of the simplified fraction\n        new_num = x_num * n_num\n        new_den = x_den * n_den\n\n        # Check if the simplified fraction is a whole number\n        return new_num % new_den == 0",
            "class Solution:\n    def simplify(self, x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n\n        # Simplify the expression x * n\n        num = x_num * n_num\n        den = x_den * n_den\n\n        # Check if the result is a whole number\n        if num % den == 0:\n            return True\n        else:\n            return False"
        ]
    },
    {
        "question_title": "order_by_points",
        "question_content": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/145",
        "contest_id": "HumanEval/145",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def order_by_points(self, nums):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```\n\nThis solution works by first converting each number to its absolute value (to handle negative numbers), then converting that to a string so that we can iterate over its digits. For each digit, we convert it back to an integer and sum them up. This gives us the total sum of digits for each number. We then sort the list by this total sum, and if there are multiple numbers with the same total sum, we sort them by their original index in the list.\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Function to calculate the sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Sorting the list based on the sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n```\n\nThis solution uses a helper function `sum_of_digits` to calculate the sum of the digits of a number. The `sorted` function is then used to sort the list `nums` based on the sum of the digits and the index of the number in the original list. The `key` argument of the `sorted` function is a tuple where the first element is the sum of the digits and the second element is the index of the number in the original list. The `sorted` function sorts the list first by the first element of the tuple (i.e., the sum of the digits) and then by the second element (i.e., the index of the number in the original list) if the sums of the digits are equal.\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Create a list of tuples where each tuple contains a number and its sum of digits\n        nums_with_points = [(num, sum(map(int, str(abs(num)))) if num >= 0 else -sum(map(int, str(abs(num))))) for num in nums]\n        # Sort the list of tuples first by the sum of digits, then by the index of the original list\n        nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n        # Return the list of numbers sorted by their sum of digits\n        return [num for num, _ in nums_with_points]\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Define a helper function to calculate the sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Use the sorted function with a custom key function\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Function to calculate sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Sorting the list based on sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Create a list of tuples where each tuple contains the index and sum of digits of each number\n        nums_with_points = [(i, sum(int(digit) for digit in str(abs(num)))) for i, num in enumerate(nums)]\n        # Sort the list of tuples first by the sum of digits, then by the index\n        nums_with_points.sort(key=lambda x: (x[1], x[0]))\n        # Return the sorted list of numbers\n        return [num for _, num in nums_with_points]\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```\n",
            "```python\nclass Solution:\n    def order_by_points(self, nums):\n        # Function to calculate sum of digits\n        def sum_of_digits(n):\n            return sum(map(int, str(abs(n))))\n\n        # Sorting the list based on sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        # Function to calculate the sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Sorting the list based on the sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        # Create a list of tuples where each tuple contains a number and its sum of digits\n        nums_with_points = [(num, sum(map(int, str(abs(num)))) if num >= 0 else -sum(map(int, str(abs(num))))) for num in nums]\n        # Sort the list of tuples first by the sum of digits, then by the index of the original list\n        nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n        # Return the list of numbers sorted by their sum of digits\n        return [num for num, _ in nums_with_points]",
            "class Solution:\n    def order_by_points(self, nums):\n        # Define a helper function to calculate the sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Use the sorted function with a custom key function\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        # Function to calculate sum of digits\n        def sum_of_digits(n):\n            return sum(int(i) for i in str(abs(n)))\n\n        # Sorting the list based on sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        # Create a list of tuples where each tuple contains the index and sum of digits of each number\n        nums_with_points = [(i, sum(int(digit) for digit in str(abs(num)))) for i, num in enumerate(nums)]\n        # Sort the list of tuples first by the sum of digits, then by the index\n        nums_with_points.sort(key=lambda x: (x[1], x[0]))\n        # Return the sorted list of numbers\n        return [num for _, num in nums_with_points]",
            "class Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
            "class Solution:\n    def order_by_points(self, nums):\n        # Function to calculate sum of digits\n        def sum_of_digits(n):\n            return sum(map(int, str(abs(n))))\n\n        # Sorting the list based on sum of digits and index\n        return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"
        ]
    },
    {
        "question_title": "specialFilter",
        "question_content": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/146",
        "contest_id": "HumanEval/146",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def specialFilter(self, nums):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n\nIn the above code, we iterate over each number in the input list. We use the `abs` function to ensure we're checking the digits of positive numbers, even if the input list contains negative numbers. We convert the number to a string and check if the first and last characters of the string are in the set of odd digits ('13579'). If both conditions are met, we increment our count. Finally, we return the count.\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n\nThis solution works by iterating over each number in the input list. For each number, it checks if the number is greater than 10 and if the first and last digits of the number are odd (1, 3, 5, 7, or 9). If both conditions are met, it increments the count. Finally, it returns the count.\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count",
            "class Solution:\n    def specialFilter(self, nums):\n        count = 0\n        for num in nums:\n            if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n                count += 1\n        return count"
        ]
    },
    {
        "question_title": "get_max_triples",
        "question_content": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/147",
        "contest_id": "HumanEval/147",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def get_max_triples(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        \n        # Initialize the count of triples\n        count = 0\n        \n        # Iterate over all possible triples of indices\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if the sum of the elements at the indices is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n        \n        # Return the count of triples\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        # Initialize the array a\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        \n        # Initialize the count of triples\n        count = 0\n        \n        # Iterate over all possible triples (i, j, k)\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    # Check if the sum of a[i], a[j], and a[k] is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n        \n        # Return the count of triples\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i*i - i + 1 for i in range(1, n+1)]\n\n        # Initialize the count of triples\n        count = 0\n\n        # Iterate over all possible triples of a\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    # If the sum of a[i], a[j], and a[k] is a multiple of 3, increment the count\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        # Create an array a of length n\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n\n        # Initialize count of triples\n        count = 0\n\n        # Loop through all possible triples\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if sum of a[i], a[j], a[k] is multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment count if it is\n                        count += 1\n\n        # Return count of triples\n        return count\n```\n\nThis solution works by first creating the array `a` as per the given formula. Then, it iterates over all possible triples of indices `i`, `j`, and `k`, and checks if the sum of `a[i]`, `a[j]`, and `a[k]` is a multiple of 3. If it is, it increments the count of valid triples. Finally, it returns the count.\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        a = [i*i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        a = [i*i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```\n",
            "```python\nclass Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n\n        # Initialize the count of triples\n        count = 0\n\n        # Iterate over all possible triples of a\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if the sum of the elements is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n\n        # Return the count of triples\n        return count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        \n        # Initialize the count of triples\n        count = 0\n        \n        # Iterate over all possible triples of indices\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if the sum of the elements at the indices is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n        \n        # Return the count of triples\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        # Initialize the array a\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        \n        # Initialize the count of triples\n        count = 0\n        \n        # Iterate over all possible triples (i, j, k)\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    # Check if the sum of a[i], a[j], and a[k] is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n        \n        # Return the count of triples\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i*i - i + 1 for i in range(1, n+1)]\n\n        # Initialize the count of triples\n        count = 0\n\n        # Iterate over all possible triples of a\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    # If the sum of a[i], a[j], and a[k] is a multiple of 3, increment the count\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        # Create an array a of length n\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n\n        # Initialize count of triples\n        count = 0\n\n        # Loop through all possible triples\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if sum of a[i], a[j], a[k] is multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment count if it is\n                        count += 1\n\n        # Return count of triples\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        a = [i*i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        a = [i*i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count",
            "class Solution:\n    def get_max_triples(self, n):\n        # Create the array a\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n\n        # Initialize the count of triples\n        count = 0\n\n        # Iterate over all possible triples of a\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    # Check if the sum of the elements is a multiple of 3\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        # Increment the count\n                        count += 1\n\n        # Return the count of triples\n        return count"
        ]
    },
    {
        "question_title": "bf",
        "question_content": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/148",
        "contest_id": "HumanEval/148",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def bf(self, planet1, planet2):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])\n```\n\nThis solution uses a list of the planets in order of their proximity to the sun. It then finds the indices of the input planets in this list. If the indices are out of order, it swaps them. Finally, it returns a tuple of all planets between the two indices, inclusive. If either of the input planets is not in the list, it returns an empty tuple.\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])\n```\n\nThis solution first checks if the input planets are valid. If not, it returns an empty tuple. If they are valid, it finds the indices of the planets in the list of planets. It then returns a tuple of all planets whose indices are between the indices of the input planets, inclusive. The planets are sorted by their proximity to the sun, as per the problem statement.\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])\n```\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])\n\ns = Solution()\nprint(s.bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(s.bf(\"Earth\", \"Mercury\"))  # ==> (\"Venus\")\nprint(s.bf(\"Mercury\", \"Uranus\"))  # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n```\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])\n```\n\nThis solution first checks if the input planets are valid. If not, it returns an empty tuple. If they are valid, it finds the index of the start and end planets in the list of planets. It then returns a tuple of all planets between the start and end planets, inclusive. If the start index is greater than the end index, it swaps them to ensure the range is correct.\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])\n```\n\nThis solution works by first creating a list of the planets in order of their proximity to the sun. It then checks if the input planets are in this list. If they are not, it returns an empty tuple. If they are, it finds the indices of the start and end planets in this list. It then returns a tuple of all planets between these two indices, inclusive. If the start index is greater than the end index, it swaps them to ensure that the range is in the correct order.\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])\n```\n\nIn the above code, we first define a list of planets in the order of their proximity to the sun. Then we check if the input planet names are valid. If not, we return an empty tuple. If the input is valid, we find the index of the start and end planets in the list. If the start index is greater than the end index, we swap them. Finally, we return a tuple of all planets whose index is between the start and end indices (not inclusive).\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])\n```\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])\n```\n\nThis solution works by first checking if the input planets are valid. If they are not, the function returns an empty tuple. If they are valid, the function finds the index of the start and end planets in the list of planets. It then returns a tuple of all planets between the start and end planets, inclusive. If the start index is greater than the end index, it swaps them to ensure the range is correct.\n",
            "```python\nclass Solution:\n    def bf(self, planet1, planet2):\n        planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets_order or planet2 not in planets_order:\n            return ()\n        else:\n            start = planets_order.index(planet1)\n            end = planets_order.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets_order[start+1:end])\n```\n\nIn this solution, we first define the order of the planets in the solar system. Then, we check if the input planets are valid. If not, we return an empty tuple. If the planets are valid, we find their indices in the list and make sure that the start index is smaller than the end index. Then, we return a tuple of all planets whose index is between the start and end indices (not inclusive).\n"
        ],
        "code_list": [
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            index1 = planets.index(planet1)\n            index2 = planets.index(planet2)\n            if index1 > index2:\n                index1, index2 = index2, index1\n            return tuple(planets[index1+1:index2])\n\ns = Solution()\nprint(s.bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(s.bf(\"Earth\", \"Mercury\"))  # ==> (\"Venus\")\nprint(s.bf(\"Mercury\", \"Uranus\"))  # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return ()\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets[start+1:end])",
            "class Solution:\n    def bf(self, planet1, planet2):\n        planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets_order or planet2 not in planets_order:\n            return ()\n        else:\n            start = planets_order.index(planet1)\n            end = planets_order.index(planet2)\n            if start > end:\n                start, end = end, start\n            return tuple(planets_order[start+1:end])"
        ]
    },
    {
        "question_title": "sorted_list_sum",
        "question_content": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/149",
        "contest_id": "HumanEval/149",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sorted_list_sum(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        \n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        \n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Remove strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n\n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n\n        return lst\n```\n",
            "```python\nclass Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        \n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        \n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out the strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Remove strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n\n        # Sort the list by length of each word and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n\n        return lst",
            "class Solution:\n    def sorted_list_sum(self, lst):\n        # Filter out strings with odd lengths\n        lst = [word for word in lst if len(word) % 2 == 0]\n        # Sort the list by length and then alphabetically\n        lst.sort()\n        lst.sort(key=len)\n        return lst"
        ]
    },
    {
        "question_title": "string_sequence",
        "question_content": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/15",
        "contest_id": "HumanEval/15",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def string_sequence(self, n: int)-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n",
            "```python\nclass Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int) -> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))",
            "class Solution:\n    def string_sequence(self, n: int)-> str:\n        return ' '.join(str(i) for i in range(n+1))"
        ]
    },
    {
        "question_title": "x_or_y",
        "question_content": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/150",
        "contest_id": "HumanEval/150",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def x_or_y(self, n, x, y):\n        ",
        "difficulty": "easy",
        "output_list": [
            "Here is the Python code that solves the problem:\n\n```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n\nThis code works by checking if the number `n` is greater than 1. If it is, it then checks if `n` is divisible by any number other than 1 and itself. If it is, it returns `y`. If `n` is not divisible by any other number, it returns `x`. If `n` is not greater than 1, it returns `y`.\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n",
            "```python\nclass Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y",
            "class Solution:\n    def x_or_y(self, n, x, y):\n        if n > 1:\n            for i in range(2, n):\n                if (n % i) == 0:\n                    return y\n            return x\n        else:\n            return y"
        ]
    },
    {
        "question_title": "double_the_difference",
        "question_content": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/151",
        "contest_id": "HumanEval/151",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def double_the_difference(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)\n```\n",
            "```python\nclass Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and n % 2 != 0]\n        return sum(odd_squares)",
            "class Solution:\n    def double_the_difference(self, lst):\n        if not lst:\n            return 0\n        odd_squares = [n**2 for n in lst if n > 0 and isinstance(n, int) and n % 2 != 0]\n        return sum(odd_squares)"
        ]
    },
    {
        "question_title": "compare",
        "question_content": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/152",
        "contest_id": "HumanEval/152",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def compare(self, game,guess):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n\nThis solution uses a list comprehension to iterate over the two input lists simultaneously (using the `zip` function). For each pair of corresponding elements in the two lists, it calculates the absolute difference between the two elements (using the `abs` function) and adds this difference to a new list. This new list is then returned as the result.\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n\nThis solution uses a list comprehension to iterate over the `game` and `guess` arrays simultaneously using the `zip` function. For each pair of corresponding elements, it calculates the absolute difference using the `abs` function and returns a new list with these differences.\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n",
            "```python\nclass Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - h) for g, h in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]",
            "class Solution:\n    def compare(self, game, guess):\n        return [abs(g - a) for a, g in zip(game, guess)]"
        ]
    },
    {
        "question_title": "Strongest_Extension",
        "question_content": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/153",
        "contest_id": "HumanEval/153",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = extensions[0]\n        strongest_strength = sum([1 for c in extensions[0] if c.isupper()]) - sum([1 for c in extensions[0] if c.islower()])\n\n        for extension in extensions[1:]:\n            strength = sum([1 for c in extension if c.isupper()]) - sum([1 for c in extension if c.islower()])\n            if strength > strongest_strength:\n                strongest_extension = extension\n                strongest_strength = strength\n\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution works by initializing the strongest extension and its strength to the first extension in the list. It then iterates over the rest of the extensions, updating the strongest extension and its strength whenever it finds an extension with a stronger strength. Finally, it returns the class name and the strongest extension in the desired format.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution iterates over the list of extensions, calculates the strength of each extension by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, the extension is updated as the strongest extension and the maximum strength is updated. Finally, the function returns a string in the required format.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = -float('inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution works by iterating over each extension in the list of extensions. For each extension, it calculates the strength by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, it updates the maximum strength and sets the strongest extension to the current extension. Finally, it returns a string in the format \"ClassName.StrongestExtensionName\".\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution works by iterating over each extension in the list of extensions. For each extension, it calculates the strength by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, it updates the maximum strength and the strongest extension. Finally, it returns a string in the required format using the class name and the strongest extension.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution iterates over the list of extensions, calculating the strength of each one by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, the extension is updated as the strongest extension and the maximum strength is updated. Finally, the function returns a string in the required format.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = -float('inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution iterates over the list of extensions, calculates the strength of each one, and keeps track of the extension with the highest strength. If there are multiple extensions with the same strength, the first one encountered is kept. The function then returns the class name followed by the strongest extension in the required format.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis code defines a class `Solution` with a method `Strongest_Extension`. This method takes two arguments: `class_name` (a string) and `extensions` (a list of strings). It calculates the strength of each extension by counting the number of uppercase and lowercase letters in the extension's name, and then subtracting the number of lowercase letters from the number of uppercase letters. It then returns a string in the format 'ClassName.StrongestExtensionName'. If there are two or more extensions with the same strength, it chooses the one that comes first in the list.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution works by iterating over each extension in the list of extensions. For each extension, it calculates the strength by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, it updates the maximum strength and the strongest extension. Finally, it returns a string in the format 'ClassName.StrongestExtensionName'.\n",
            "```python\nclass Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"\n```\n\nThis solution works by iterating over each extension in the list of extensions. For each extension, it calculates the strength by subtracting the number of lowercase letters from the number of uppercase letters. If the strength of the current extension is greater than the maximum strength found so far, it updates the maximum strength and the strongest extension. Finally, it returns a string in the format 'ClassName.StrongestExtensionName'.\n"
        ],
        "code_list": [
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = extensions[0]\n        strongest_strength = sum([1 for c in extensions[0] if c.isupper()]) - sum([1 for c in extensions[0] if c.islower()])\n\n        for extension in extensions[1:]:\n            strength = sum([1 for c in extension if c.isupper()]) - sum([1 for c in extension if c.islower()])\n            if strength > strongest_strength:\n                strongest_extension = extension\n                strongest_strength = strength\n\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = -float('inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = -float('inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            CAP = sum(1 for c in extension if c.isupper())\n            SM = sum(1 for c in extension if c.islower())\n            strength = CAP - SM\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\"",
            "class Solution:\n    def Strongest_Extension(self, class_name, extensions):\n        strongest_extension = None\n        max_strength = float('-inf')\n        for extension in extensions:\n            cap = sum(1 for c in extension if c.isupper())\n            sm = sum(1 for c in extension if c.islower())\n            strength = cap - sm\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return f\"{class_name}.{strongest_extension}\""
        ]
    },
    {
        "question_title": "cycpattern_check",
        "question_content": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/154",
        "contest_id": "HumanEval/154",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def cycpattern_check(self, a , b):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        # If no rotation of b is a substring of a, return False\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        # If no rotation of b is a substring of a, return False\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n\n        return False\n```\n\nThis solution works by first checking if the second string (b) is a substring of the first string (a). If it is, the function immediately returns True. If not, it then checks each rotation of the second string to see if it is a substring of the first string. If any rotation is found to be a substring, the function returns True. If no rotations of the second string are found to be substrings of the first string, the function returns False.\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False\n```\n",
            "```python\nclass Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        # If no rotation of b is a substring of a, return False\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        # If no rotation of b is a substring of a, return False\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False",
            "class Solution:\n    def cycpattern_check(self, a , b):\n        # Check if b is a substring of a\n        if b in a:\n            return True\n        \n        # Check if any rotation of b is a substring of a\n        for i in range(len(b)):\n            b = b[-1:] + b[:-1]\n            if b in a:\n                return True\n        \n        return False"
        ]
    },
    {
        "question_title": "even_odd_count",
        "question_content": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/155",
        "contest_id": "HumanEval/155",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def even_odd_count(self, num):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)  # convert to positive if negative\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        num = abs(num)\n        even_count = 0\n        odd_count = 0\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)  # convert to positive if negative\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)\n```\n",
            "```python\nclass Solution:\n    def even_odd_count(self, num):\n        num = abs(num)  # to handle negative numbers\n        even_count = 0\n        odd_count = 0\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)  # convert to positive if negative\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        num = abs(num)\n        even_count = 0\n        odd_count = 0\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)  # convert to positive if negative\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        even_count = 0\n        odd_count = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)",
            "class Solution:\n    def even_odd_count(self, num):\n        num = abs(num)  # to handle negative numbers\n        even_count = 0\n        odd_count = 0\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)"
        ]
    },
    {
        "question_title": "int_to_mini_roman",
        "question_content": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/156",
        "contest_id": "HumanEval/156",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def int_to_mini_roman(self, number):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        result = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            result += numerals[i] * count\n            number -= values[i] * count\n        return result\n```\n\nThis solution works by iterating over the list of roman numeral values from largest to smallest. For each value, it calculates how many times it divides the input number, appends the corresponding numeral to the result string that many times, and subtracts the value from the number. This process is repeated until the number is 0. The result is the roman numeral equivalent of the input number.\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman\n```\n\nThis solution works by iterating over the list of roman numeral values from highest to lowest. For each value, it calculates how many times it fits into the given number, appends the corresponding numeral to the result string the appropriate number of times, and subtracts the value from the number.\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman\n```\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num\n```\n\nThis solution works by iterating over the list of roman numerals and their corresponding values. For each value, it appends the corresponding roman numeral to the result string as many times as possible without exceeding the number. It then continues with the next value and so on.\n\nThe time complexity of this solution is O(1) because the number of iterations does not change with the size of the input number. The space complexity is also O(1) because the amount of memory used does not change with the size of the input number.\n",
            "```python\nclass Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        result = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            result += numerals[i] * count\n            number -= values[i] * count\n        return result",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        roman = ''\n        for i in range(len(values)):\n            count = int(number / values[i])\n            roman += numerals[i] * count\n            number -= values[i] * count\n        return roman",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num",
            "class Solution:\n    def int_to_mini_roman(self, number):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while  number > 0:\n            for _ in range(number // val[i]):\n                roman_num += syb[i]\n                number -= val[i]\n            i += 1\n        return roman_num"
        ]
    },
    {
        "question_title": "right_angle_triangle",
        "question_content": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/157",
        "contest_id": "HumanEval/157",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides\n        sides = sorted([a, b, c])\n\n        # check if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A triangle is a right-angled triangle if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides\n        sides = sorted([a, b, c])\n\n        # check if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle satisfies the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle will have the property that the square of the \n        # hypotenuse (the longest side) is equal to the sum of the squares of the \n        # other two sides.\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n        # This is a Pythagorean theorem\n        return sides[2]**2 == sides[0]**2 + sides[1]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n        \n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) should be equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n",
            "```python\nclass Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n        \n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) should be equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides\n        sides = sorted([a, b, c])\n\n        # check if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A triangle is a right-angled triangle if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides\n        sides = sorted([a, b, c])\n\n        # check if the square of the largest side is equal to the sum of the squares of the other two sides\n        return sides[2]**2 == sides[0]**2 + sides[1]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle satisfies the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # A right-angled triangle will have the property that the square of the \n        # hypotenuse (the longest side) is equal to the sum of the squares of the \n        # other two sides.\n        return sides[0]**2 + sides[1]**2 == sides[2]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n\n        # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n        # This is a Pythagorean theorem\n        return sides[2]**2 == sides[0]**2 + sides[1]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n        \n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) should be equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2",
            "class Solution:\n    def right_angle_triangle(self, a, b, c):\n        # Sort the sides of the triangle\n        sides = sorted([a, b, c])\n        \n        # A right-angled triangle will satisfy the Pythagorean theorem\n        # i.e., the square of the hypotenuse (the longest side) should be equal to the sum of the squares of the other two sides\n        return sides[0]**2 + sides[1]**2 == sides[2]**2"
        ]
    },
    {
        "question_title": "find_max",
        "question_content": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/158",
        "contest_id": "HumanEval/158",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def find_max(self, words):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word\n```\n\nThis solution works by iterating over each word in the list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicate characters) and taking the length of the set. If the number of unique characters is greater than the current maximum, it updates the maximum and the corresponding word. If the number of unique characters is equal to the current maximum, it updates the word if the new word comes lexicographically before the current word. Finally, it returns the word with the maximum number of unique characters.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word\n```\n\nThis solution works by iterating over each word in the input list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicates) and then taking the length of the set. If this number is greater than the current maximum number of unique characters, it updates the maximum number of unique characters and the word with that many unique characters. If the number of unique characters is equal to the current maximum, it chooses the lexicographically smaller word. Finally, it returns the word with the maximum number of unique characters.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word\n```\n\nThis solution works by iterating over each word in the input list. For each word, it calculates the number of unique characters by converting the word to a set (which automatically removes duplicates) and taking the length of the set. If the number of unique characters is greater than the current maximum, it updates the maximum and the corresponding word. If the number of unique characters is equal to the current maximum, it updates the word only if the new word comes lexicographically before the current word.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word\n```\n\nThis solution works by iterating over each word in the input list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicate characters) and taking the length of the set. If the number of unique characters is greater than the current maximum, it updates the maximum and the corresponding word. If the number of unique characters is equal to the current maximum, it updates the word if the new word comes lexicographically before the current word. Finally, it returns the word with the maximum number of unique characters.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n\nThis solution works by iterating over each word in the input list. For each word, it calculates the number of unique characters by converting the word to a set (which removes duplicate characters) and getting its length. If the number of unique characters is greater than the current maximum, it updates the maximum and the corresponding word. If the number of unique characters is equal to the current maximum, it chooses the lexicographically smaller word. Finally, it returns the word with the maximum number of unique characters.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n\nThis solution works by iterating over each word in the list. For each word, it calculates the number of unique characters by converting the word to a set (which automatically removes duplicates) and taking the length of that set. If this number is greater than the current maximum number of unique characters found, it updates the maximum number of unique characters and the corresponding word. If the number of unique characters is equal to the current maximum, it updates the word if the new word comes lexicographically before the current word. Finally, it returns the word with the maximum number of unique characters.\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n",
            "```python\nclass Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = ''\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word",
            "class Solution:\n    def find_max(self, words):\n        max_unique_chars = 0\n        max_word = \"\"\n\n        for word in words:\n            unique_chars = len(set(word))\n            if unique_chars > max_unique_chars:\n                max_unique_chars = unique_chars\n                max_word = word\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n\n        return max_word"
        ]
    },
    {
        "question_title": "eat",
        "question_content": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/159",
        "contest_id": "HumanEval/159",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def eat(self, number, need, remaining):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n",
            "```python\nclass Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if remaining >= need:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]",
            "class Solution:\n    def eat(self, number, need, remaining):\n        if need <= remaining:\n            return [number + need, remaining - need]\n        else:\n            return [number + remaining, 0]"
        ]
    },
    {
        "question_title": "count_distinct_characters",
        "question_content": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/16",
        "contest_id": "HumanEval/16",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))\n```\n\nThis solution works by converting the string to lowercase and then converting it to a set. A set in Python is a data structure that only contains unique elements. Therefore, when we convert the string to a set, we automatically remove any duplicate characters. The length of the set is then returned as the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))\n```\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n\nThis solution works by converting the string to lowercase and then converting it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. The length of the set is then returned as the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))\n```\n\nThis solution works by converting the string to lowercase and then converting it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. The length of the set is then returned as the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))\n```\n\nIn this solution, we convert the string to lowercase and then convert it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. Then we return the length of the set, which is the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n\nThis solution works by converting the string to lowercase and then converting it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. The length of the set is then returned as the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n\nIn this solution, we convert the string to lowercase and then convert it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. The length of the set is then returned as the number of distinct characters in the string.\n",
            "```python\nclass Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str)-> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))",
            "class Solution:\n    def count_distinct_characters(self, string: str) -> int:\n        return len(set(string.lower()))"
        ]
    },
    {
        "question_title": "do_algebra",
        "question_content": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/160",
        "contest_id": "HumanEval/160",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def do_algebra(self, operator, operand):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution works by first converting the first operand to a string, then appending each operator and operand to the string, separated by a space. Finally, it evaluates the resulting string using the `eval` function, which interprets it as a Python expression and returns the result.\n\nPlease note that the `eval` function can be potentially dangerous if you're evaluating strings that come from an untrusted source, as it can execute any Python code. In this case, we know that the input is always well-formed and safe, so this is safe to use.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution uses the `eval` function to evaluate the string representation of the algebraic expression. The `eval` function is used here because it allows us to dynamically evaluate a string as a Python expression.\n\nPlease note that the use of `eval` can be dangerous if you are evaluating strings that could contain arbitrary code. In this case, we know that the strings are safe because they are only basic arithmetic operations and integers.\n\nAlso, this solution assumes that the operand list will always have at least two elements, as per the problem statement.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n\n# Test cases\nsolution = Solution()\nprint(solution.do_algebra(['+', '*', '-'], [2, 3, 4, 5]))  # Output: 9\nprint(solution.do_algebra(['-', '+'], [10, 20, 30]))  # Output: 0\nprint(solution.do_algebra(['*', '/'], [10, 2, 3]))  # Output: 5\n```\n\nThis solution works by first converting the first operand to a string and then iterating over the operator and operand lists. For each pair of an operator and an operand, it appends a space, the operator, and the operand to the expression string. Finally, it evaluates the expression string using the built-in eval function and returns the result.\n\nPlease note that the use of the eval function can be potentially dangerous if you are not completely sure about the input data, as it can evaluate any Python code. In this case, we know that the input data is always valid Python expressions, so it should be safe to use.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution uses a for loop to iterate over the operator list and operand list. It constructs a string representation of the expression by concatenating the operand and operator at each step. The eval function is used to evaluate the expression and return the result.\n\nPlease note that using eval function can be dangerous if you are planning to use it on untrusted input as it can evaluate any Python code. In this case, we know that the input is safe because we are only dealing with integers and basic arithmetic operations.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution works by first converting the first operand to a string. Then, for each operator in the list, it appends the operator and the next operand to the expression string. Finally, it evaluates the expression string using the `eval` function and returns the result.\n\nPlease note that the `eval` function can be dangerous if you are evaluating strings that could contain arbitrary code. In this case, we know that the input is always valid (i.e., it's a string of space-separated numbers and operators), so it's safe to use.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result\n```\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result\n```\n\nThis Python program uses a for loop to iterate over the operator list. For each operator, it performs the corresponding operation on the result and the next operand. The result is then returned.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result\n```\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution works by first converting the first operand to a string. Then, for each operator and operand in the input lists, it appends the operator and operand to the expression string, separated by spaces. Finally, it evaluates the expression string using the `eval` function and returns the result.\n\nPlease note that the `eval` function can be potentially dangerous if you are evaluating strings that could contain arbitrary code. In this case, we know that the input is always valid (i.e., it's a string of space-separated numbers and operators), so it's safe to use.\n",
            "```python\nclass Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n```\n\nThis solution works by first converting the first operand to a string. Then, for each operator and operand, it appends the operator and the operand to the expression string. Finally, it evaluates the expression string using the built-in `eval` function and returns the result.\n\nPlease note that the use of `eval` function can be dangerous if you are planning to use it on untrusted input as it can evaluate any Python code. In this case, we know that the input is safe because it comes from a trusted source (the problem specification).\n"
        ],
        "code_list": [
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)\n\n# Test cases\nsolution = Solution()\nprint(solution.do_algebra(['+', '*', '-'], [2, 3, 4, 5]))  # Output: 9\nprint(solution.do_algebra(['-', '+'], [10, 20, 30]))  # Output: 0\nprint(solution.do_algebra(['*', '/'], [10, 2, 3]))  # Output: 5",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        result = operand[0]\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n            elif operator[i] == '**':\n                result **= operand[i+1]\n        return result",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)",
            "class Solution:\n    def do_algebra(self, operator, operand):\n        expression = str(operand[0])\n        for i in range(len(operator)):\n            expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n        return eval(expression)"
        ]
    },
    {
        "question_title": "solve",
        "question_content": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/161",
        "contest_id": "HumanEval/161",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def solve(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n\nThis solution uses the built-in Python functions `isalpha()`, `upper()`, and `lower()` to check if a character is a letter, convert it to upper case, and convert it to lower case respectively. The `any()` function is used to check if there is at least one letter in the string. If there are no letters, the string is reversed. If there are letters, the function goes through each character in the string and reverses its case if it's a letter, otherwise it keeps the character as it is. The resulting characters are joined into a string and returned.\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n\nThis solution works by first checking if the string contains any letters. If it doesn't, it simply reverses the string. If it does, it goes through each character in the string and checks if it's a lowercase letter. If it is, it converts it to uppercase. If it's not, it converts it to lowercase. Finally, it joins all the characters back together into a string and returns it.\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n",
            "```python\nclass Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])",
            "class Solution:\n    def solve(self, s):\n        if not any(char.isalpha() for char in s):\n            return s[::-1]\n        else:\n            return ''.join([char.upper() if char.islower() else char.lower() for char in s])"
        ]
    },
    {
        "question_title": "string_to_md5",
        "question_content": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/162",
        "contest_id": "HumanEval/162",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def string_to_md5(self, text):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nfrom hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nfrom hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()\n```\n",
            "```python\nfrom hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n",
            "```python\nimport hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()\n```\n"
        ],
        "code_list": [
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "from hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "from hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()",
            "from hashlib import md5\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()",
            "import hashlib\n\nclass Solution:\n    def string_to_md5(self, text):\n        if text == \"\":\n            return None\n        else:\n            return hashlib.md5(text.encode()).hexdigest()"
        ]
    },
    {
        "question_title": "generate_integers",
        "question_content": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/163",
        "contest_id": "HumanEval/163",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def generate_integers(self, a, b):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate through the range from a to b\n        for i in range(a, b+1):\n            # Check if the number is even\n            if i % 2 == 0:\n                # If it is, append it to the list\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\ns = Solution()\nprint(s.generate_integers(2, 8))\nprint(s.generate_integers(8, 2))\nprint(s.generate_integers(10, 14))\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\ns = Solution()\nprint(s.generate_integers(2, 8))\nprint(s.generate_integers(8, 2))\nprint(s.generate_integers(10, 14))\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate over the range from a to b\n        for i in range(a, b+1):\n            # Check if the number is even\n            if i % 2 == 0:\n                # If it is, append it to the list\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate over the range from a to b\n        for i in range(a, b+1):\n            # If the number is even, append it to the list\n            if i % 2 == 0:\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers\n```\n",
            "```python\nclass Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\nsolution = Solution()\nprint(solution.generate_integers(2, 8))  # [2, 4, 6, 8]\nprint(solution.generate_integers(8, 2))  # [2, 4, 6, 8]\nprint(solution.generate_integers(10, 14))  # []\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate through the range from a to b\n        for i in range(a, b+1):\n            # Check if the number is even\n            if i % 2 == 0:\n                # If it is, append it to the list\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\ns = Solution()\nprint(s.generate_integers(2, 8))\nprint(s.generate_integers(8, 2))\nprint(s.generate_integers(10, 14))",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\ns = Solution()\nprint(s.generate_integers(2, 8))\nprint(s.generate_integers(8, 2))\nprint(s.generate_integers(10, 14))",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]",
            "class Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate over the range from a to b\n        for i in range(a, b+1):\n            # Check if the number is even\n            if i % 2 == 0:\n                # If it is, append it to the list\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers",
            "class Solution:\n    def generate_integers(self, a, b):\n        # Swap a and b if a is greater than b\n        if a > b:\n            a, b = b, a\n\n        # Initialize an empty list to store the even numbers\n        even_numbers = []\n\n        # Iterate over the range from a to b\n        for i in range(a, b+1):\n            # If the number is even, append it to the list\n            if i % 2 == 0:\n                even_numbers.append(i)\n\n        # Return the list of even numbers\n        return even_numbers",
            "class Solution:\n    def generate_integers(self, a, b):\n        if a > b:\n            a, b = b, a\n        return [i for i in range(a, b+1) if i % 2 == 0]\n\nsolution = Solution()\nprint(solution.generate_integers(2, 8))  # [2, 4, 6, 8]\nprint(solution.generate_integers(8, 2))  # [2, 4, 6, 8]\nprint(solution.generate_integers(10, 14))  # []"
        ]
    },
    {
        "question_title": "parse_music",
        "question_content": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/17",
        "contest_id": "HumanEval/17",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def parse_music(self, music_string: str)-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n\nThis solution splits the input string into a list of notes. Then it iterates over this list and appends the corresponding number of beats to the `beats` list. The function returns this list of beats.\n",
            "```python\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n",
            "```python\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats\n```\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "class Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "class Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "from typing import List\n\nclass Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats",
            "class Solution:\n    def parse_music(self, music_string: str) -> List[int]:\n        notes = music_string.split()\n        beats = []\n        for note in notes:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n        return beats"
        ]
    },
    {
        "question_title": "how_many_times",
        "question_content": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/18",
        "contest_id": "HumanEval/18",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n\n# Test cases\ns = Solution()\nprint(s.how_many_times('', 'a'))  # 0\nprint(s.how_many_times('aaa', 'a'))  # 3\nprint(s.how_many_times('aaaa', 'aa'))  # 3\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n",
            "```python\nclass Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count\n\n# Test cases\ns = Solution()\nprint(s.how_many_times('', 'a'))  # 0\nprint(s.how_many_times('aaa', 'a'))  # 3\nprint(s.how_many_times('aaaa', 'aa'))  # 3",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str)-> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count",
            "class Solution:\n    def how_many_times(self, string: str, substring: str) -> int:\n        count = start = 0\n        while start < len(string):\n            pos = string.find(substring, start)\n            if pos != -1:\n                start = pos + 1\n                count += 1\n            else:\n                break\n        return count"
        ]
    },
    {
        "question_title": "sort_numbers",
        "question_content": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/19",
        "contest_id": "HumanEval/19",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n\nIn the above code, we first create a dictionary `num_dict` to map the string numbers to their corresponding integer values. Then, we split the input string `numbers` into a list of words, sort this list using the `sorted` function and the `key` parameter set to a lambda function that uses `num_dict` to determine the order of the elements. Finally, we join the sorted list of words back into a string with spaces in between the words and return this string.\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\ns = Solution()\nprint(s.sort_numbers('three one five'))\n```\n\nIn this solution, we first create a dictionary `num_dict` where the keys are the English words from 'zero' to 'nine' and the values are their corresponding numerical values. Then we split the input string `numbers` into a list of words, sort this list using the `sorted` function and the `key` parameter set to a lambda function that uses the `num_dict` to determine the sort order. Finally, we join the sorted list back into a string with spaces in between the words and return this string.\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n\nThis solution works by first creating a dictionary that maps the string numbers to their corresponding integer values. Then, it splits the input string into a list of words, sorts that list using the dictionary to determine the order of the words, and finally joins the sorted list back into a string.\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases\ns = Solution()\nprint(s.sort_numbers('three one five'))  # Output: 'one three five'\n```\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n\nThis solution works by first creating a dictionary that maps the string numbers to their corresponding integer values. Then, it splits the input string into a list of words, sorts that list using the dictionary to determine the order of the words, and finally joins the sorted list back into a string.\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n\nThis solution works by first creating a dictionary that maps the string numbers to their corresponding integer values. Then, it splits the input string into a list of words, sorts this list using the dictionary values as the key, and finally joins the sorted list back into a string.\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n```\n",
            "```python\nclass Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        # create a dictionary to map english numbers to their corresponding digit\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        # split the input string into a list of words\n        words = numbers.split()\n\n        # sort the list of words based on their corresponding digit in the dictionary\n        words.sort(key=lambda x: num_dict[x])\n\n        # join the sorted list of words into a single string and return it\n        return ' '.join(words)\n```\n\nThis solution works by first creating a dictionary that maps English words to their corresponding digit. It then splits the input string into a list of words, sorts this list based on the corresponding digit for each word, and joins the sorted list back into a single string.\n"
        ],
        "code_list": [
            "class Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\ns = Solution()\nprint(s.sort_numbers('three one five'))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases\ns = Solution()\nprint(s.sort_numbers('three one five'))  # Output: 'one three five'",
            "class Solution:\n    def sort_numbers(self, numbers: str) -> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9\n        }\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",
            "class Solution:\n    def sort_numbers(self, numbers: str)-> str:\n        # create a dictionary to map english numbers to their corresponding digit\n        num_dict = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        }\n\n        # split the input string into a list of words\n        words = numbers.split()\n\n        # sort the list of words based on their corresponding digit in the dictionary\n        words.sort(key=lambda x: num_dict[x])\n\n        # join the sorted list of words into a single string and return it\n        return ' '.join(words)"
        ]
    },
    {
        "question_title": "find_closest_elements",
        "question_content": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/20",
        "contest_id": "HumanEval/20",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def find_closest_elements(self, numbers: List[float])-> Tuple[float, float]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list to find the two numbers with the smallest difference. The smallest difference is stored in `min_diff` and the pair of numbers with this difference is stored in `result`. The function then returns `result`.\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result\n```\n\nThis solution sorts the list of numbers first. Then it iterates through the sorted list, comparing each pair of numbers to find the pair with the smallest difference. The pair with the smallest difference is then returned.\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result\n```\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result\n```\n\nThis solution sorts the input list of numbers. It then iterates over the sorted list, comparing each pair of numbers to find the pair with the smallest difference. The pair with the smallest difference is stored in the variable `result`. This pair is then returned as the result.\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list to find the two elements that are closest to each other. The closest pair of elements are stored in the variable `result` and returned at the end.\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list to find the two elements that are closest to each other. The closest pair of elements are stored in the variable `result` and returned at the end.\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result\n```\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result\n```\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result\n```\n",
            "```python\nclass Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result\n```\n\nThis solution sorts the list of numbers and then iterates over the sorted list to find the two numbers with the smallest difference. The smallest difference is stored in `min_diff` and the pair of numbers with this difference is stored in `result`. The function returns `result` after iterating over the entire list.\n"
        ],
        "code_list": [
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(1, len(numbers)):\n            diff = numbers[i] - numbers[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i - 1], numbers[i])\n        return result",
            "class Solution:\n    def find_closest_elements(self, numbers: List[float]) -> Tuple[float, float]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i+1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i+1])\n        return result"
        ]
    },
    {
        "question_title": "rescale_to_unit",
        "question_content": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/21",
        "contest_id": "HumanEval/21",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def rescale_to_unit(self, numbers: List[float])-> List[float]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n# Test the function\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n# Testing the function\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n```\n\nThis solution first finds the minimum and maximum of the input list. Then it applies a linear transformation to each number in the list, subtracting the minimum and dividing by the range (maximum - minimum). This rescales the numbers so that the smallest number becomes 0 and the largest number becomes 1.\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n# Test the function\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n# Testing the function\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
            "from typing import List\n\nclass Solution:\n    def rescale_to_unit(self, numbers: List[float]) -> List[float]:\n        min_num = min(numbers)\n        max_num = max(numbers)\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n\nsolution = Solution()\nprint(solution.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"
        ]
    },
    {
        "question_title": "filter_integers",
        "question_content": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/22",
        "contest_id": "HumanEval/22",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def filter_integers(self, values: List[Any])-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n\nThis solution uses a list comprehension to iterate over the input list. The `isinstance(value, int)` function checks if each element in the list is an integer. If it is, it is included in the output list. If it is not, it is skipped.\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n\nThis solution uses a list comprehension to iterate over the `values` list. For each `value` in `values`, it checks if `value` is an instance of the `int` class using the `isinstance()` function. If `value` is an integer, it is included in the new list. If not, it is ignored. The resulting list is returned.\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n\nsolution = Solution()\nprint(solution.filter_integers(['a', 3.14, 5]))  # Output: [5]\nprint(solution.filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]\n```\n",
            "```python\nfrom typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n```\n"
        ],
        "code_list": [
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]\n\nsolution = Solution()\nprint(solution.filter_integers(['a', 3.14, 5]))  # Output: [5]\nprint(solution.filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]",
            "from typing import List, Any\n\nclass Solution:\n    def filter_integers(self, values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]"
        ]
    },
    {
        "question_title": "strlen",
        "question_content": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/23",
        "contest_id": "HumanEval/23",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def strlen(self, string: str)-> int:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str)-> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n",
            "```python\nclass Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str)-> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)",
            "class Solution:\n    def strlen(self, string: str) -> int:\n        return len(string)"
        ]
    },
    {
        "question_title": "largest_divisor",
        "question_content": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/24",
        "contest_id": "HumanEval/24",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int) -> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n",
            "```python\nclass Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int) -> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i",
            "class Solution:\n    def largest_divisor(self, n: int)-> int:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i"
        ]
    },
    {
        "question_title": "factorize",
        "question_content": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/25",
        "contest_id": "HumanEval/25",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def factorize(self, n: int)-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors\n```\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors",
            "from typing import List\n\nclass Solution:\n    def factorize(self, n: int) -> List[int]:\n        factors = []\n        divisor = 2\n        while(divisor <= n):\n            if (n % divisor) == 0:\n                factors.append(divisor)\n                n = n / divisor\n            else:\n                divisor += 1\n        return factors"
        ]
    },
    {
        "question_title": "remove_duplicates",
        "question_content": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/26",
        "contest_id": "HumanEval/26",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def remove_duplicates(self, numbers: List[int])-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers\n```\n",
            "```python\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        seen = set()\n        for num in numbers:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        seen = set()\n        for num in numbers:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result\n```\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers",
            "class Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        unique_numbers = []\n        for num in numbers:\n            if num not in unique_numbers:\n                unique_numbers.append(num)\n        return unique_numbers",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        seen = set()\n        for num in numbers:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        seen = set()\n        for num in numbers:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n        return result",
            "from typing import List\n\nclass Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        result = []\n        for num in numbers:\n            if num not in result:\n                result.append(num)\n        return result"
        ]
    },
    {
        "question_title": "flip_case",
        "question_content": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/27",
        "contest_id": "HumanEval/27",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def flip_case(self, string: str)-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str) -> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        result = ''\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        result = ''\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n```\n",
            "```python\nclass Solution:\n    def flip_case(self, string: str) -> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result",
            "class Solution:\n    def flip_case(self, string: str) -> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        result = ''\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        result = ''\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result",
            "class Solution:\n    def flip_case(self, string: str)-> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])",
            "class Solution:\n    def flip_case(self, string: str) -> str:\n        result = \"\"\n        for char in string:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\nsolution = Solution()\nprint(solution.flip_case('Hello'))  # Output: 'hELLO'"
        ]
    },
    {
        "question_title": "concatenate",
        "question_content": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/28",
        "contest_id": "HumanEval/28",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def concatenate(self, strings: List[str])-> str:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)\n```\n"
        ],
        "code_list": [
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "class Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "class Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "class Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "class Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)",
            "from typing import List\n\nclass Solution:\n    def concatenate(self, strings: List[str]) -> str:\n        return ''.join(strings)"
        ]
    },
    {
        "question_title": "filter_by_prefix",
        "question_content": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/29",
        "contest_id": "HumanEval/29",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n\nsolution = Solution()\nprint(solution.filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\n```\n",
            "```python\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n",
            "```python\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "from typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "from typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "from typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "from typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]\n\nsolution = Solution()\nprint(solution.filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))",
            "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "from typing import List\n\nclass Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str) -> List[str]:\n        return [s for s in strings if s.startswith(prefix)]",
            "class Solution:\n    def filter_by_prefix(self, strings: List[str], prefix: str)-> List[str]:\n        return [s for s in strings if s.startswith(prefix)]"
        ]
    },
    {
        "question_title": "below_zero",
        "question_content": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/3",
        "contest_id": "HumanEval/3",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def below_zero(self, operations: List[int])-> bool:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "from typing import List\n\nclass Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False",
            "class Solution:\n    def below_zero(self, operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False"
        ]
    },
    {
        "question_title": "get_positive",
        "question_content": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/30",
        "contest_id": "HumanEval/30",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def get_positive(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [i for i in l if i > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]\n```\n",
            "```python\nclass Solution:\n    def get_positive(self, l: list):\n        return [i for i in l if i > 0]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [i for i in l if i > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [num for num in l if num > 0]",
            "class Solution:\n    def get_positive(self, l: list):\n        return [i for i in l if i > 0]"
        ]
    },
    {
        "question_title": "is_prime",
        "question_content": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/31",
        "contest_id": "HumanEval/31",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_prime(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = int(n**0.5) + 1\n        for i in range(3, sqrt_n, 2):\n            if n % i == 0:\n                return False\n        return True\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_prime(self, n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True",
            "class Solution:\n    def is_prime(self, n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = int(n**0.5) + 1\n        for i in range(3, sqrt_n, 2):\n            if n % i == 0:\n                return False\n        return True"
        ]
    },
    {
        "question_title": "sort_third",
        "question_content": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/33",
        "contest_id": "HumanEval/33",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sort_third(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three.pop(0)\n        return l\n```\n\nThis solution works by first creating a sorted list of the elements at the indices divisible by three. Then it iterates over the original list, replacing the elements at the indices divisible by three with the elements from the sorted list. The elements are removed from the sorted list as they are used.\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        divisible_by_three.sort()\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [v for i, v in enumerate(l) if (i+1) % 3 == 0]\n        divisible_by_three.sort()\n        for i, v in enumerate(l):\n            if (i+1) % 3 == 0:\n                l[i] = divisible_by_three.pop(0)\n        return l\n```\n\nThis solution works by first creating a list of the values at the indices that are divisible by three (as Python uses 0-based indexing, we add 1 to the index to match the problem statement). We then sort this list. We then iterate over the original list, and whenever we encounter an index that is divisible by three, we replace the value at that index in the original list with the next value from the sorted list of values at indices divisible by three.\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list of elements at indices divisible by 3\n        div_by_three.sort()\n        \n        # Replace the elements at indices divisible by 3 with the sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list\n        divisible_by_three.sort()\n        \n        # Replace elements at indices divisible by 3 with sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        \n        return l\n```\n\nThis solution works by first creating a list of elements at indices divisible by 3. It then sorts this list. Finally, it replaces the elements at indices divisible by 3 in the original list with the sorted elements.\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list of elements at indices divisible by 3\n        div_by_three.sort()\n        \n        # Replace the elements at indices divisible by 3 with the sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Get the values at the indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the values\n        div_by_three.sort()\n        \n        # Replace the values at the indices divisible by 3 with the sorted values\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Get the values at the indices divisible by 3\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the values\n        divisible_by_three.sort()\n        \n        # Replace the values at the indices divisible by 3 with the sorted values\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        \n        return l\n```\n\nThis solution works by first creating a list of the values at the indices divisible by 3. It then sorts this list. Finally, it replaces the values at the indices divisible by 3 in the original list with the sorted values.\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list\n        div_by_three.sort()\n        \n        # Replace elements at indices divisible by 3 with sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        divisible_by_three.sort()\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        return l\n```\n\nThis solution first creates a list of elements at indices divisible by three. It then sorts this list. After that, it iterates over the original list and replaces elements at indices divisible by three with the corresponding element from the sorted list. The sorted list is then returned.\n"
        ],
        "code_list": [
            "class Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three.pop(0)\n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        divisible_by_three.sort()\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [v for i, v in enumerate(l) if (i+1) % 3 == 0]\n        divisible_by_three.sort()\n        for i, v in enumerate(l):\n            if (i+1) % 3 == 0:\n                l[i] = divisible_by_three.pop(0)\n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list of elements at indices divisible by 3\n        div_by_three.sort()\n        \n        # Replace the elements at indices divisible by 3 with the sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list\n        divisible_by_three.sort()\n        \n        # Replace elements at indices divisible by 3 with sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list of elements at indices divisible by 3\n        div_by_three.sort()\n        \n        # Replace the elements at indices divisible by 3 with the sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Get the values at the indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the values\n        div_by_three.sort()\n        \n        # Replace the values at the indices divisible by 3 with the sorted values\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Get the values at the indices divisible by 3\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the values\n        divisible_by_three.sort()\n        \n        # Replace the values at the indices divisible by 3 with the sorted values\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        # Create a list of elements at indices divisible by 3\n        div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        \n        # Sort the list\n        div_by_three.sort()\n        \n        # Replace elements at indices divisible by 3 with sorted elements\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = div_by_three[i // 3]\n        \n        return l",
            "class Solution:\n    def sort_third(self, l: list):\n        divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n        divisible_by_three.sort()\n        for i in range(len(l)):\n            if i % 3 == 0:\n                l[i] = divisible_by_three[i // 3]\n        return l"
        ]
    },
    {
        "question_title": "unique",
        "question_content": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/34",
        "contest_id": "HumanEval/34",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def unique(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n",
            "```python\nclass Solution:\n    def unique(self, l: list):\n        return sorted(set(l))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))",
            "class Solution:\n    def unique(self, l: list):\n        return sorted(set(l))"
        ]
    },
    {
        "question_title": "max_element",
        "question_content": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/35",
        "contest_id": "HumanEval/35",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def max_element(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n",
            "```python\nclass Solution:\n    def max_element(self, l: list):\n        return max(l)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)",
            "class Solution:\n    def max_element(self, l: list):\n        return max(l)"
        ]
    },
    {
        "question_title": "fizz_buzz",
        "question_content": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/36",
        "contest_id": "HumanEval/36",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fizz_buzz(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n",
            "```python\nclass Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int) -> int:\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count",
            "class Solution:\n    def fizz_buzz(self, n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count"
        ]
    },
    {
        "question_title": "sort_even",
        "question_content": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/37",
        "contest_id": "HumanEval/37",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sort_even(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Create a list of even indexed elements and sort it\n        even_elements = sorted([l[i] for i in range(0, len(l), 2)])\n\n        # Create a copy of the list\n        l_prime = l[:]\n\n        # Replace the even indexed elements with the sorted ones\n        for i in range(0, len(l), 2):\n            l_prime[i] = even_elements.pop(0)\n\n        return l_prime\n```\n\nThis solution works by first creating a list of the elements at even indices in the original list, sorting that list, and then replacing the elements at even indices in the original list with the sorted elements. The sorted list of even indexed elements is stored in `even_elements` and is popped from in order.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Create a list of even indexed elements\n        even_index_elements = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the list of even indexed elements\n        even_index_elements.sort()\n        \n        # Create a list of odd indexed elements\n        odd_index_elements = [l[i] for i in range(1, len(l), 2)]\n        \n        # Combine the sorted even indexed elements, odd indexed elements and the remaining elements\n        result = [None] * len(l)\n        result[::2] = even_index_elements\n        result[1::2] = odd_index_elements\n        \n        return result\n```\n\nThis solution works by first separating the elements at even and odd indices into two separate lists. It then sorts the list of even indexed elements. After that, it combines the sorted even indexed elements, the odd indexed elements, and the remaining elements to form the final result.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Separate even and odd indexed elements\n        even_elements = [l[i] for i in range(0, len(l), 2)]\n        odd_elements = [l[i] for i in range(1, len(l), 2)]\n\n        # Sort the even elements\n        even_elements.sort()\n\n        # Merge the sorted even elements and odd elements\n        l_prime = [None] * len(l)\n        l_prime[::2] = even_elements\n        l_prime[1::2] = odd_elements\n\n        return l_prime\n```\n\nThis solution works by first separating the even and odd indexed elements of the list into two separate lists. It then sorts the even elements and merges them with the odd elements to form the new list. The new list is returned as the result.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        j = 0\n        for i in range(0, len(l), 2):\n            l[i] = even_indices_values[j]\n            j += 1\n        return l\n```\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Create a list of elements at even indices\n        even_indices = [v for i, v in enumerate(l) if i % 2 == 0]\n        # Sort the list of elements at even indices\n        even_indices.sort()\n\n        # Create a new list with the same length as l\n        result = [0] * len(l)\n\n        # Fill the new list with elements from l and the sorted list of elements at even indices\n        for i, v in enumerate(l):\n            if i % 2 == 0:\n                result[i] = even_indices.pop(0)\n            else:\n                result[i] = v\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Create a list of the even indices elements\n        even_indices_elements = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the even indices elements\n        even_indices_elements.sort()\n        \n        # Create a list of the odd indices elements\n        odd_indices_elements = [l[i] for i in range(1, len(l), 2)]\n        \n        # Create the new list\n        new_l = []\n        \n        # Add the even indices elements to the new list\n        for i in range(len(even_indices_elements)):\n            new_l.append(even_indices_elements[i])\n            if i < len(odd_indices_elements):\n                new_l.append(odd_indices_elements[i])\n        \n        # If the length of the original list is odd, add the last odd indices element to the new list\n        if len(l) % 2 == 1:\n            new_l.append(odd_indices_elements[-1])\n        \n        return new_l\n```\n\nThis solution works by first separating the elements at the even and odd indices into two separate lists. It then sorts the list of elements at the even indices. Finally, it constructs the new list by alternating between the elements at the even and odd indices, starting with the elements at the even indices. If the original list has an odd length, the last element at the odd indices is added to the end of the new list.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        new_l = l[:]\n        new_l[::2] = even_indices_values\n        return new_l\n```\n\nThis solution works by first creating a sorted list of the values at even indices in the original list. It then creates a copy of the original list and replaces the values at even indices with the sorted values. The function then returns the modified list.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        # Store the values at even indices in a separate list\n        even_indices_values = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the values at even indices\n        even_indices_values.sort()\n        \n        # Replace the values at even indices with the sorted values\n        for i in range(0, len(l), 2):\n            l[i] = even_indices_values[i // 2]\n        \n        return l\n```\n\nThis solution works by first creating a list of the values at even indices in the input list `l`. It then sorts this list. After that, it replaces the values at even indices in `l` with the sorted values. The result is a list where the values at even indices are sorted, while the values at odd indices are unchanged.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        new_l = l[:]\n        new_l[::2] = even_indices_values\n        return new_l\n```\n\nThis solution works by first creating a sorted list of the values at even indices in the original list. It then creates a copy of the original list and replaces the values at even indices with the sorted values.\n",
            "```python\nclass Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([value for index, value in enumerate(l) if index % 2 == 0])\n        result = []\n        for index, value in enumerate(l):\n            if index % 2 == 0:\n                result.append(even_indices_values.pop(0))\n            else:\n                result.append(value)\n        return result\n```\n\nThis solution first creates a sorted list of values at even indices. Then it creates a new list by iterating over the original list. If the index is even, it appends the next value from the sorted list of even indices values. If the index is odd, it appends the original value.\n"
        ],
        "code_list": [
            "class Solution:\n    def sort_even(self, l: list):\n        # Create a list of even indexed elements and sort it\n        even_elements = sorted([l[i] for i in range(0, len(l), 2)])\n\n        # Create a copy of the list\n        l_prime = l[:]\n\n        # Replace the even indexed elements with the sorted ones\n        for i in range(0, len(l), 2):\n            l_prime[i] = even_elements.pop(0)\n\n        return l_prime",
            "class Solution:\n    def sort_even(self, l: list):\n        # Create a list of even indexed elements\n        even_index_elements = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the list of even indexed elements\n        even_index_elements.sort()\n        \n        # Create a list of odd indexed elements\n        odd_index_elements = [l[i] for i in range(1, len(l), 2)]\n        \n        # Combine the sorted even indexed elements, odd indexed elements and the remaining elements\n        result = [None] * len(l)\n        result[::2] = even_index_elements\n        result[1::2] = odd_index_elements\n        \n        return result",
            "class Solution:\n    def sort_even(self, l: list):\n        # Separate even and odd indexed elements\n        even_elements = [l[i] for i in range(0, len(l), 2)]\n        odd_elements = [l[i] for i in range(1, len(l), 2)]\n\n        # Sort the even elements\n        even_elements.sort()\n\n        # Merge the sorted even elements and odd elements\n        l_prime = [None] * len(l)\n        l_prime[::2] = even_elements\n        l_prime[1::2] = odd_elements\n\n        return l_prime",
            "class Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        j = 0\n        for i in range(0, len(l), 2):\n            l[i] = even_indices_values[j]\n            j += 1\n        return l",
            "class Solution:\n    def sort_even(self, l: list):\n        # Create a list of elements at even indices\n        even_indices = [v for i, v in enumerate(l) if i % 2 == 0]\n        # Sort the list of elements at even indices\n        even_indices.sort()\n\n        # Create a new list with the same length as l\n        result = [0] * len(l)\n\n        # Fill the new list with elements from l and the sorted list of elements at even indices\n        for i, v in enumerate(l):\n            if i % 2 == 0:\n                result[i] = even_indices.pop(0)\n            else:\n                result[i] = v\n\n        return result",
            "class Solution:\n    def sort_even(self, l: list):\n        # Create a list of the even indices elements\n        even_indices_elements = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the even indices elements\n        even_indices_elements.sort()\n        \n        # Create a list of the odd indices elements\n        odd_indices_elements = [l[i] for i in range(1, len(l), 2)]\n        \n        # Create the new list\n        new_l = []\n        \n        # Add the even indices elements to the new list\n        for i in range(len(even_indices_elements)):\n            new_l.append(even_indices_elements[i])\n            if i < len(odd_indices_elements):\n                new_l.append(odd_indices_elements[i])\n        \n        # If the length of the original list is odd, add the last odd indices element to the new list\n        if len(l) % 2 == 1:\n            new_l.append(odd_indices_elements[-1])\n        \n        return new_l",
            "class Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        new_l = l[:]\n        new_l[::2] = even_indices_values\n        return new_l",
            "class Solution:\n    def sort_even(self, l: list):\n        # Store the values at even indices in a separate list\n        even_indices_values = [l[i] for i in range(0, len(l), 2)]\n        \n        # Sort the values at even indices\n        even_indices_values.sort()\n        \n        # Replace the values at even indices with the sorted values\n        for i in range(0, len(l), 2):\n            l[i] = even_indices_values[i // 2]\n        \n        return l",
            "class Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n        new_l = l[:]\n        new_l[::2] = even_indices_values\n        return new_l",
            "class Solution:\n    def sort_even(self, l: list):\n        even_indices_values = sorted([value for index, value in enumerate(l) if index % 2 == 0])\n        result = []\n        for index, value in enumerate(l):\n            if index % 2 == 0:\n                result.append(even_indices_values.pop(0))\n            else:\n                result.append(value)\n        return result"
        ]
    },
    {
        "question_title": "decode_cyclic",
        "question_content": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/38",
        "contest_id": "HumanEval/38",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def decode_cyclic(self, s: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n",
            "```python\nclass Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)",
            "class Solution:\n    def decode_cyclic(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_cyclic function. Returns decoded string.\n        \"\"\"\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # reverse cycle elements in each group. Unless group has fewer elements than 3.\n        groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n        return \"\".join(groups)"
        ]
    },
    {
        "question_title": "prime_fib",
        "question_content": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/39",
        "contest_id": "HumanEval/39",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def prime_fib(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            f = fib(i)\n            if is_prime(f):\n                count += 1\n            i += 1\n        return f\n```\n\nIn the above code, we first define two helper functions: `is_prime` and `fib`. The `is_prime` function checks if a number is prime by iterating from 2 to the square root of the number and checking if the number is divisible by any of these values. If it is, the function returns `False`; otherwise, it returns `True`.\n\nThe `fib` function generates the nth Fibonacci number by iterating from 1 to n and updating the values of `a` and `b` in each iteration.\n\nIn the `prime_fib` function, we initialize `i` to 1 and `count` to 0. We then enter a while loop that continues until `count` is equal to `n`. Inside the loop, we generate the `i`th Fibonacci number using the `fib` function and check if it is prime using the `is_prime` function. If it is, we increment `count`. We then increment `i` and continue the loop. When `count` is equal to `n`, we return the `i`th Fibonacci number.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n```\n\nThis solution defines two helper functions: `is_prime` and `fib`. `is_prime` checks if a number is prime by iterating from 2 to the square root of the number and checking for divisibility. `fib` generates Fibonacci numbers by iteratively updating two variables, `a` and `b`, to the next Fibonacci number.\n\nThe main function `prime_fib` generates Fibonacci numbers and checks if they are prime. If they are, they are added to the `prime_fib_numbers` list. The function continues to generate Fibonacci numbers until the list contains `n` prime Fibonacci numbers. The last number in the list is then returned.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. Then it defines a helper function `fib` to generate Fibonacci numbers. The main function `prime_fib` generates Fibonacci numbers and checks if they are prime. If they are, they are added to the `prime_fib_numbers` list. The function continues to generate Fibonacci numbers until the `prime_fib_numbers` list contains `n` prime Fibonacci numbers. The last number in the `prime_fib_numbers` list is then returned.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n```\n\nThis solution defines two helper functions: `is_prime` and `fib`. The `is_prime` function checks if a number is prime by iterating from 2 to the square root of the number and checking for divisibility. The `fib` function generates Fibonacci numbers by iteratively updating two variables, `a` and `b`, to the next Fibonacci number.\n\nThe main function `prime_fib` generates Fibonacci numbers and checks if they are prime. If they are, they are added to the `prime_fib_numbers` list. The function continues to generate Fibonacci numbers until the list contains `n` prime Fibonacci numbers. The last element of the list is then returned.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n\nsolution = Solution()\nprint(solution.prime_fib(1))  # 2\nprint(solution.prime_fib(2))  # 3\nprint(solution.prime_fib(3))  # 5\nprint(solution.prime_fib(4))  # 13\nprint(solution.prime_fib(5))  # 89\n```\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int) -> int:\n        def is_prime(num: int) -> bool:\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n: int) -> int:\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            f = fib(i)\n            if is_prime(f):\n                count += 1\n            i += 1\n        return f\n\ns = Solution()\nprint(s.prime_fib(1))  # 2\nprint(s.prime_fib(2))  # 3\nprint(s.prime_fib(3))  # 5\nprint(s.prime_fib(4))  # 13\nprint(s.prime_fib(5))  # 89\n```\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            if is_prime(fib(i)):\n                count += 1\n            i += 1\n        return fib(i-1)\n```\n\nThis solution works by first defining two helper functions: `is_prime` and `fib`. `is_prime` checks if a number is prime by iterating from 2 to the square root of the number and checking if the number is divisible by any of these values. If it is, the function returns False, otherwise it returns True. `fib` generates the nth Fibonacci number by starting with two variables, a and b, both set to 1. It then enters a loop that runs n times, updating a and b to be the next two numbers in the Fibonacci sequence.\n\nThe main function `prime_fib` then enters a loop that continues until it has found the nth prime Fibonacci number. It does this by starting with i set to 1 and count set to 0. For each iteration of the loop, it checks if the i-th Fibonacci number is prime by calling `is_prime`. If it is, it increments count. If count is equal to n, it returns the i-th Fibonacci number. Otherwise, it increments i and continues.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            fib_num = fib(i)\n            if is_prime(fib_num):\n                count += 1\n            i += 1\n        return fib_num\n\nsolution = Solution()\nprint(solution.prime_fib(1))  # 2\nprint(solution.prime_fib(2))  # 3\nprint(solution.prime_fib(3))  # 5\nprint(solution.prime_fib(4))  # 13\nprint(solution.prime_fib(5))  # 89\n```\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. Then it defines another helper function `fib` to generate Fibonacci numbers. The main function `prime_fib` generates Fibonacci numbers and checks if they are prime. If they are, they are added to the `prime_fib_numbers` list. The function continues to generate Fibonacci numbers until the list contains `n` prime Fibonacci numbers. The last prime Fibonacci number in the list is then returned.\n",
            "```python\nclass Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a+b\n            return a\n\n        count = 0\n        i = 1\n        while count < n:\n            fib_num = fib(i)\n            if is_prime(fib_num):\n                count += 1\n            i += 1\n        return fib(i-1)\n\n# Test cases\ns = Solution()\nprint(s.prime_fib(1))  # 2\nprint(s.prime_fib(2))  # 3\nprint(s.prime_fib(3))  # 5\nprint(s.prime_fib(4))  # 13\nprint(s.prime_fib(5))  # 89\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            f = fib(i)\n            if is_prime(f):\n                count += 1\n            i += 1\n        return f",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]\n\nsolution = Solution()\nprint(solution.prime_fib(1))  # 2\nprint(solution.prime_fib(2))  # 3\nprint(solution.prime_fib(3))  # 5\nprint(solution.prime_fib(4))  # 13\nprint(solution.prime_fib(5))  # 89",
            "class Solution:\n    def prime_fib(self, n: int) -> int:\n        def is_prime(num: int) -> bool:\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n: int) -> int:\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            f = fib(i)\n            if is_prime(f):\n                count += 1\n            i += 1\n        return f\n\ns = Solution()\nprint(s.prime_fib(1))  # 2\nprint(s.prime_fib(2))  # 3\nprint(s.prime_fib(3))  # 5\nprint(s.prime_fib(4))  # 13\nprint(s.prime_fib(5))  # 89",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            if is_prime(fib(i)):\n                count += 1\n            i += 1\n        return fib(i-1)",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        count = 0\n        while count < n:\n            fib_num = fib(i)\n            if is_prime(fib_num):\n                count += 1\n            i += 1\n        return fib_num\n\nsolution = Solution()\nprint(solution.prime_fib(1))  # 2\nprint(solution.prime_fib(2))  # 3\nprint(solution.prime_fib(3))  # 5\nprint(solution.prime_fib(4))  # 13\nprint(solution.prime_fib(5))  # 89",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a + b\n            return a\n\n        i = 1\n        prime_fib_numbers = []\n        while len(prime_fib_numbers) < n:\n            fib_number = fib(i)\n            if is_prime(fib_number):\n                prime_fib_numbers.append(fib_number)\n            i += 1\n        return prime_fib_numbers[-1]",
            "class Solution:\n    def prime_fib(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def fib(n):\n            a, b = 0, 1\n            for _ in range(n):\n                a, b = b, a+b\n            return a\n\n        count = 0\n        i = 1\n        while count < n:\n            fib_num = fib(i)\n            if is_prime(fib_num):\n                count += 1\n            i += 1\n        return fib(i-1)\n\n# Test cases\ns = Solution()\nprint(s.prime_fib(1))  # 2\nprint(s.prime_fib(2))  # 3\nprint(s.prime_fib(3))  # 5\nprint(s.prime_fib(4))  # 13\nprint(s.prime_fib(5))  # 89"
        ]
    },
    {
        "question_title": "triples_sum_to_zero",
        "question_content": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/40",
        "contest_id": "HumanEval/40",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l)-2):\n            if i>0 and l[i]==l[i-1]:\n                continue\n            left = i+1\n            right = len(l)-1\n            while left<right:\n                total = l[i]+l[left]+l[right]\n                if total<0:\n                    left+=1\n                elif total>0:\n                    right-=1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                cur_sum = l[i] + l[l_ptr] + l[r_ptr]\n                if cur_sum < 0:\n                    l_ptr += 1\n                elif cur_sum > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_new = l[i + 1:]\n            left = 0\n            right = len(l_new) - 1\n            while left < right:\n                s = l_new[left] + l_new[right] + l[i]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_new = l[i + 1:]\n            left = 0\n            right = len(l_new) - 1\n            while left < right:\n                s = l_new[left] + l_new[right] + l[i]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False\n```\n\nThis solution works by first sorting the input list. Then, for each element in the list, it uses two pointers to find two other elements that sum to the negative of the current element. If it finds such two elements, it returns True. If it doesn't find any such three elements, it returns False.\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_i = l[i]\n            start = i + 1\n            end = n - 1\n            while start < end:\n                sum_two = l[start] + l[end]\n                if sum_two < -l_i:\n                    start += 1\n                elif sum_two > -l_i:\n                    end -= 1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False\n```\n\nThis solution works by first sorting the input list. Then, for each element in the list, it uses two pointers to find two other elements that sum to the negative of the current element. If it finds such two elements, it returns True. If it doesn't find any such triplet, it returns False.\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l) - 2):\n            left = i + 1\n            right = len(l) - 1\n            while left < right:\n                current_sum = l[i] + l[left] + l[right]\n                if current_sum == 0:\n                    return True\n                elif current_sum < 0:\n                    left += 1\n                else:\n                    right -= 1\n        return False\n```\n\nThis solution works by first sorting the list. Then, for each element in the list, it uses two pointers to find a triplet that sums to zero. If it finds such a triplet, it returns True. If it doesn't find any, it returns False.\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l) - 2):\n            left = i + 1\n            right = len(l) - 1\n            while left < right:\n                s = l[i] + l[left] + l[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l)-2):\n            if i>0 and l[i]==l[i-1]:\n                continue\n            left = i+1\n            right = len(l)-1\n            while left<right:\n                total = l[i]+l[left]+l[right]\n                if total<0:\n                    left+=1\n                elif total>0:\n                    right-=1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                cur_sum = l[i] + l[l_ptr] + l[r_ptr]\n                if cur_sum < 0:\n                    l_ptr += 1\n                elif cur_sum > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_new = l[i + 1:]\n            left = 0\n            right = len(l_new) - 1\n            while left < right:\n                s = l_new[left] + l_new[right] + l[i]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_new = l[i + 1:]\n            left = 0\n            right = len(l_new) - 1\n            while left < right:\n                s = l_new[left] + l_new[right] + l[i]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_i = l[i]\n            start = i + 1\n            end = n - 1\n            while start < end:\n                sum_two = l[start] + l[end]\n                if sum_two < -l_i:\n                    start += 1\n                elif sum_two > -l_i:\n                    end -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l) - 2):\n            left = i + 1\n            right = len(l) - 1\n            while left < right:\n                current_sum = l[i] + l[left] + l[right]\n                if current_sum == 0:\n                    return True\n                elif current_sum < 0:\n                    left += 1\n                else:\n                    right -= 1\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        l.sort()\n        for i in range(len(l) - 2):\n            left = i + 1\n            right = len(l) - 1\n            while left < right:\n                s = l[i] + l[left] + l[right]\n                if s < 0:\n                    left += 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    return True\n        return False",
            "class Solution:\n    def triples_sum_to_zero(self, l: list):\n        n = len(l)\n        if n < 3:\n            return False\n        l.sort()\n        for i in range(n - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            l_ptr = i + 1\n            r_ptr = n - 1\n            while l_ptr < r_ptr:\n                total = l[i] + l[l_ptr] + l[r_ptr]\n                if total < 0:\n                    l_ptr += 1\n                elif total > 0:\n                    r_ptr -= 1\n                else:\n                    return True\n        return False"
        ]
    },
    {
        "question_title": "car_race_collision",
        "question_content": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/41",
        "contest_id": "HumanEval/41",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def car_race_collision(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions can be calculated by the formula n*(n-1)/2.\n        This is because for each car moving left to right, it can collide with n-1 cars moving right to left.\n        Therefore, the total number of collisions is the sum of collisions for all cars moving left to right.\n        \"\"\"\n        return n*(n-1)//2\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        # The number of collisions is equal to the product of the number of cars moving left and right.\n        # This is because each car moving left will collide with each car moving right.\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        # The number of collisions is equal to the number of cars moving in opposite directions.\n        # This is because each car moving left to right will collide with each car moving right to left.\n        # So, the total number of collisions is n * n.\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because every car moving left to right will collide with every car moving right to left.\n        \"\"\"\n        return n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n\n```\n",
            "```python\nclass Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        This function calculates the number of collisions between two sets of cars moving in opposite directions.\n        The function assumes that the number of cars in each direction is equal to the input parameter 'n'.\n        \"\"\"\n        # Number of collisions is equal to the square of the number of cars.\n        # This is because each car in one direction will collide with each car in the other direction.\n        return n ** 2\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions can be calculated by the formula n*(n-1)/2.\n        This is because for each car moving left to right, it can collide with n-1 cars moving right to left.\n        Therefore, the total number of collisions is the sum of collisions for all cars moving left to right.\n        \"\"\"\n        return n*(n-1)//2",
            "class Solution:\n    def car_race_collision(self, n: int):\n        # The number of collisions is equal to the product of the number of cars moving left and right.\n        # This is because each car moving left will collide with each car moving right.\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        # The number of collisions is equal to the number of cars moving in opposite directions.\n        # This is because each car moving left to right will collide with each car moving right to left.\n        # So, the total number of collisions is n * n.\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because every car moving left to right will collide with every car moving right to left.\n        \"\"\"\n        return n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        The number of collisions is equal to the number of cars moving in opposite directions.\n        This is because each car moving left to right will collide with each car moving right to left.\n        \"\"\"\n        return n * n",
            "class Solution:\n    def car_race_collision(self, n: int):\n        \"\"\"\n        This function calculates the number of collisions between two sets of cars moving in opposite directions.\n        The function assumes that the number of cars in each direction is equal to the input parameter 'n'.\n        \"\"\"\n        # Number of collisions is equal to the square of the number of cars.\n        # This is because each car in one direction will collide with each car in the other direction.\n        return n ** 2"
        ]
    },
    {
        "question_title": "incr_list",
        "question_content": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/42",
        "contest_id": "HumanEval/42",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def incr_list(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n",
            "```python\nclass Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]",
            "class Solution:\n    def incr_list(self, l: list):\n        return [i+1 for i in l]"
        ]
    },
    {
        "question_title": "pairs_sum_to_zero",
        "question_content": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/43",
        "contest_id": "HumanEval/43",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def pairs_sum_to_zero(self, l):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        seen = set()\n        for num in l:\n            if -num in seen:\n                return True\n            seen.add(num)\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n        return False\n```\n",
            "```python\nclass Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        seen = set()\n        for num in l:\n            if -num in seen:\n                return True\n            seen.add(num)\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if num in num_dict:\n                return True\n            else:\n                num_dict[-num] = num\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n        return False",
            "class Solution:\n    def pairs_sum_to_zero(self, l):\n        num_dict = {}\n        for num in l:\n            if -num in num_dict:\n                return True\n            num_dict[num] = True\n        return False"
        ]
    },
    {
        "question_title": "change_base",
        "question_content": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/44",
        "contest_id": "HumanEval/44",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def change_base(self, x: int, base: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # Output: '22'\nprint(s.change_base(8, 2))  # Output: '1000'\nprint(s.change_base(7, 2))  # Output: '111'\n```\n\nThis solution uses Python's built-in `str.translate()` method to replace digits in the input number with the corresponding digits in the base. The `str.maketrans()` method is used to create a translation table that maps the digits 0-9 to the digits 0-2 in the base. The resulting string is then sliced to the desired length.\n\nPlease note that this solution assumes that the input number is a non-negative integer and the base is between 2 and 9. If these conditions are not met, the behavior of the function is undefined.\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).replace('0b', '').replace('0o', '')\n\nsol = Solution()\nprint(sol.change_base(8, 3))  # '22'\nprint(sol.change_base(8, 2))  # '1000'\nprint(sol.change_base(7, 2))  # '111'\n```\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # Output: '22'\nprint(s.change_base(8, 2))  # Output: '1000'\nprint(s.change_base(7, 2))  # Output: '111'\n```\n\nThis solution converts the input number to a string representation in base 10, then translates the digits to the desired base using the `translate` method. The translation is done by mapping the digits '0123456789' to '0122222222' (which are the first `base` digits repeated). The result is then sliced to the desired base length.\n\nPlease note that this solution assumes that the input number is an integer and the base is an integer less than 10. If these assumptions are not valid, the solution should be adapted accordingly.\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))\n```\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\ns = Solution()\nprint(s.change_base(8, 3))\nprint(s.change_base(8, 2))\nprint(s.change_base(7, 2))\n```\n\nThis solution uses Python's built-in `int` function to convert the input number `x` to a string representation in the base 10 (decimal) system, then converts this string representation back to an integer in the desired base. The `[2:]` slice is used to remove the '0b' prefix that Python adds to binary numbers.\n\nPlease note that this solution assumes that the input number `x` is a valid integer. If `x` is a float, this solution will not work correctly.\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # '22'\nprint(s.change_base(8, 2))  # '1000'\nprint(s.change_base(7, 2))  # '111'\n```\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))\n```\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))\n```\n\nThis solution converts the input number to a string in base 10 (decimal), then converts that string to the desired base. If the input number is an integer, it directly converts to the desired base.\n\nPlease note that the output of this solution will not have a '0b' prefix for binary numbers and will not have a '0o' prefix for octal numbers.\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))\nprint(s.change_base(8, 2))\nprint(s.change_base(7, 2))\n```\n\nThis solution converts the input number to a string in base 10, then translates the digits to the desired base. The translation is done by mapping the digits '0' to '0', '1' to '1', and '2' to '2' for all other digits. The resulting string is then sliced to the desired length.\n",
            "```python\nclass Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n```\n\nThis solution works by first converting the input number `x` to a string. Then, it uses the `translate` method to replace each digit in the string with its corresponding digit in the new base. The `maketrans` method is used to create a translation table that maps each digit in the range 0-9 to its corresponding digit in the new base. Finally, the solution returns the resulting string.\n\nPlease note that this solution only works for bases less than 10. If you need to support bases greater than 10, you would need to modify the solution to handle that case.\n"
        ],
        "code_list": [
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # Output: '22'\nprint(s.change_base(8, 2))  # Output: '1000'\nprint(s.change_base(7, 2))  # Output: '111'",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).replace('0b', '').replace('0o', '')\n\nsol = Solution()\nprint(sol.change_base(8, 3))  # '22'\nprint(sol.change_base(8, 2))  # '1000'\nprint(sol.change_base(7, 2))  # '111'",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # Output: '22'\nprint(s.change_base(8, 2))  # Output: '1000'\nprint(s.change_base(7, 2))  # Output: '111'",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\ns = Solution()\nprint(s.change_base(8, 3))\nprint(s.change_base(8, 2))\nprint(s.change_base(7, 2))",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))  # '22'\nprint(s.change_base(8, 2))  # '1000'\nprint(s.change_base(7, 2))  # '111'",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x)[2:]\n\nsol = Solution()\nprint(sol.change_base(8, 3))\nprint(sol.change_base(8, 2))\nprint(sol.change_base(7, 2))",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]\n\ns = Solution()\nprint(s.change_base(8, 3))\nprint(s.change_base(8, 2))\nprint(s.change_base(7, 2))",
            "class Solution:\n    def change_base(self, x: int, base: int):\n        return str(int(str(x), 10) if x != int(x) else x).translate(str.maketrans('0123456789', '0122222222'))[:base]"
        ]
    },
    {
        "question_title": "triangle_area",
        "question_content": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/45",
        "contest_id": "HumanEval/45",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def triangle_area(self, a, h):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        \"\"\"Given length of a side and high return area for a triangle.\n        \"\"\"\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        \"\"\"Given length of a side and high return area for a triangle.\n        >>> triangle_area(5, 3)\n        7.5\n        \"\"\"\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        \"\"\"Given length of a side and high return area for a triangle.\n        \"\"\"\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        \"\"\"Given length of a side and high return area for a triangle.\n        >>> triangle_area(5, 3)\n        7.5\n        \"\"\"\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h",
            "class Solution:\n    def triangle_area(self, a, h):\n        return 0.5 * a * h"
        ]
    },
    {
        "question_title": "fib4",
        "question_content": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/46",
        "contest_id": "HumanEval/46",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fib4(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]\n```\n\nThis solution uses a dynamic programming approach to store the computed Fibonacci numbers in an array. It initializes the first four Fibonacci numbers and then iteratively computes the next Fibonacci numbers based on the previous four. This approach avoids the exponential time complexity of the recursive solution and has a time complexity of O(n).\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]\n```\n\nThis solution uses a dynamic programming approach to store the computed Fib4 numbers in a list. It then returns the n-th Fib4 number from the list. This solution has a time complexity of O(n) and a space complexity of O(n), where n is the input number.\n",
            "```python\nclass Solution:\n    def fib4(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n\n        return fib[n]\n```\n\nThis solution uses a dynamic programming approach to solve the problem. It initializes an array `fib` with the first four elements of the sequence. Then it iteratively calculates the next elements of the sequence by summing the previous four elements. The time complexity of this solution is O(n), and the space complexity is also O(n).\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]\n```\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]\n```\n\nThis solution uses dynamic programming to store the previously computed values of the fib4 sequence. It initializes the first four values of the sequence and then computes the next values in the sequence by summing the previous four values. The time complexity of this solution is O(n), and the space complexity is also O(n), where n is the input number.\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]\n```\n\nThis solution uses dynamic programming to store the computed fib4 numbers in a list. It then uses these stored values to compute the fib4 of the current number. This avoids the exponential time complexity of the naive recursive solution and has a time complexity of O(n).\n",
            "```python\nclass Solution:\n    def fib4(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]\n```\n\nThis solution uses dynamic programming to store the computed values of the fib4 sequence in an array. It then returns the nth value from the array. This solution has a time complexity of O(n) and a space complexity of O(n).\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]\n```\n\nThis solution uses dynamic programming to store the previously computed values of the fib4 sequence. It initializes the first four values of the sequence and then iteratively computes the next values based on the previous four values. This approach ensures that the function has a time complexity of O(n) and a space complexity of O(n), making it efficient for large values of n.\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]\n```\n",
            "```python\nclass Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        \n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n\n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n        return fib[n]",
            "class Solution:\n    def fib4(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        \n        fib = [0, 0, 2, 0]\n        \n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        \n        return fib[n]"
        ]
    },
    {
        "question_title": "median",
        "question_content": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/47",
        "contest_id": "HumanEval/47",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def median(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        length = len(l)\n        if length % 2 == 0:\n            return (l[length // 2 - 1] + l[length // 2]) / 2\n        else:\n            return l[length // 2]\n```\n",
            "```python\nclass Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        length = len(l)\n        if length % 2 == 0:\n            return (l[length // 2 - 1] + l[length // 2]) / 2\n        else:\n            return l[length // 2]",
            "class Solution:\n    def median(self, l: list):\n        l.sort()\n        n = len(l)\n        if n % 2 == 0:\n            return (l[n//2 - 1] + l[n//2]) / 2\n        else:\n            return l[n//2]"
        ]
    },
    {
        "question_title": "is_palindrome",
        "question_content": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/48",
        "contest_id": "HumanEval/48",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_palindrome(self, text: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n",
            "```python\nclass Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]",
            "class Solution:\n    def is_palindrome(self, text: str):\n        return text == text[::-1]"
        ]
    },
    {
        "question_title": "modp",
        "question_content": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/49",
        "contest_id": "HumanEval/49",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def modp(self, n: int, p: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow()` function with three arguments, which computes the power of the first two arguments, modulo the third argument. This is a more efficient way to compute large powers modulo a number, as it avoids the need to compute the full power and then reduce the result modulo the modulus.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow()` function with three arguments, which computes the power of the first two arguments under modulo of the third argument. This is a more efficient way to compute large powers under modulo than using a loop or recursion.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow` function with three arguments, which computes the power of the first two arguments and then takes the modulus of the result with the third argument. This is a more efficient way to compute large powers modulo a number, as it avoids the need to compute the full power first and then take the modulus.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow()` function with three arguments, which calculates the power of the first two arguments and then takes the modulus of the result with the third argument. This is a more efficient way to calculate large powers modulo a number, as it avoids the need to calculate the full power first and then take the modulus.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int) -> int:\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow` function with three arguments, which calculates the power of the first two arguments, and then takes the modulus with the third argument. This is a more efficient way to calculate large powers modulo a number, as it avoids the need to calculate the full power and then reduce it modulo the number.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow()` function with three arguments, which computes the power of the first two arguments and then takes the modulus with the third argument. This function is more efficient than computing the power and then taking the modulus, especially for large numbers.\n",
            "```python\nclass Solution:\n    def modp(self, n: int, p: int) -> int:\n        return pow(2, n, p)\n```\n\nThis solution uses Python's built-in `pow()` function with three arguments, which calculates the power of the first two arguments and then takes the modulus with the third argument. This is more efficient than calculating the power first and then taking the modulus, especially for large numbers.\n"
        ],
        "code_list": [
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int) -> int:\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int):\n        return pow(2, n, p)",
            "class Solution:\n    def modp(self, n: int, p: int) -> int:\n        return pow(2, n, p)"
        ]
    },
    {
        "question_title": "intersperse",
        "question_content": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/5",
        "contest_id": "HumanEval/5",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n\nThis solution iterates over the input list `numbers` and appends each element to the `result` list. If the current element is not the last one in the list, it also appends the delimeter to the `result` list. The function finally returns the `result` list.\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n\nThis solution uses a for loop to iterate over the elements of the input list. For each element, it appends the element and the delimeter to the result list. However, it does not append the delimeter after the last element, so the solution ensures that the delimeter is not appended after the last element.\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result\n```\n\nThis solution uses a for loop to iterate over the input list. For each element, it appends the element and the delimeter to the result list. However, it does not append the delimeter after the last element, so the solution checks if the current element is the last one before appending the delimeter.\n"
        ],
        "code_list": [
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "from typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int)-> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i != len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "class Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "from typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result",
            "from typing import List\n\nclass Solution:\n    def intersperse(self, numbers: List[int], delimeter: int) -> List[int]:\n        result = []\n        for i in range(len(numbers)):\n            result.append(numbers[i])\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n        return result"
        ]
    },
    {
        "question_title": "decode_shift",
        "question_content": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/50",
        "contest_id": "HumanEval/50",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def decode_shift(self, s: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n",
            "```python\nclass Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "class Solution:\n    def decode_shift(self, s: str):\n        \"\"\"\n        takes as input string encoded with encode_shift function. Returns decoded string.\n        \"\"\"\n        return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
        ]
    },
    {
        "question_title": "remove_vowels",
        "question_content": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/51",
        "contest_id": "HumanEval/51",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def remove_vowels(self, text):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nsolution = Solution()\nprint(solution.remove_vowels(''))  # ''\nprint(solution.remove_vowels(\"abcdef\\nghijklm\"))  # 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # ''\nprint(solution.remove_vowels('aaBAA'))  # 'B'\nprint(solution.remove_vowels('zbcd'))  # 'zbcd'\n```\n",
            "```python\nclass Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\nsolution = Solution()\nprint(solution.remove_vowels('abcdef\\nghijklm'))  # Output: 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # Output: ''\nprint(solution.remove_vowels('aaBAA'))  # Output: 'B'\nprint(solution.remove_vowels('zbcd'))  # Output: 'zbcd'",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nsolution = Solution()\nprint(solution.remove_vowels(''))  # ''\nprint(solution.remove_vowels(\"abcdef\\nghijklm\"))  # 'bcdf\\nghjklm'\nprint(solution.remove_vowels('abcdef'))  # 'bcdf'\nprint(solution.remove_vowels('aaaaa'))  # ''\nprint(solution.remove_vowels('aaBAA'))  # 'B'\nprint(solution.remove_vowels('zbcd'))  # 'zbcd'",
            "class Solution:\n    def remove_vowels(self, text):\n        vowels = 'aeiouAEIOU'\n        return ''.join([char for char in text if char not in vowels])"
        ]
    },
    {
        "question_title": "below_threshold",
        "question_content": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/52",
        "contest_id": "HumanEval/52",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def below_threshold(self, l: list, t: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for i in l:\n            if i >= t:\n                return False\n        return True",
            "class Solution:\n    def below_threshold(self, l: list, t: int):\n        for num in l:\n            if num >= t:\n                return False\n        return True"
        ]
    },
    {
        "question_title": "add",
        "question_content": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/53",
        "contest_id": "HumanEval/53",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def add(self, x: int, y: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n",
            "```python\nclass Solution:\n    def add(self, x: int, y: int):\n        return x + y\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y",
            "class Solution:\n    def add(self, x: int, y: int):\n        return x + y"
        ]
    },
    {
        "question_title": "same_chars",
        "question_content": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/54",
        "contest_id": "HumanEval/54",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n\nThis solution works by first converting each string into a list of characters, sorting them, and then comparing the two sorted lists. If the sorted lists are equal, then the original strings have the same characters.\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n```\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n```\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n\nThis solution works by sorting the characters in each string and then comparing the sorted strings. If the sorted strings are equal, then the original strings have the same characters.\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n\nThis solution works by sorting the characters in each string and then comparing the sorted strings. If the sorted strings are equal, then the original strings have the same characters.\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n```\n\nThis solution works by first sorting the characters in each string and then comparing the sorted strings. If the sorted strings are equal, it means that the two strings have the same characters in the same quantity.\n",
            "```python\nclass Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n```\n\nThis solution works by first sorting the characters in each string (`sorted(s0)` and `sorted(s1)`), which rearranges them in alphabetical order. If the two sorted strings are identical, then the original strings `s0` and `s1` contain exactly the same characters in the same quantities. If the sorted strings are not identical, then `s0` and `s1` do not contain the same characters.\n"
        ],
        "code_list": [
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str):\n        return sorted(s0) == sorted(s1)",
            "class Solution:\n    def same_chars(self, s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)"
        ]
    },
    {
        "question_title": "fib",
        "question_content": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/55",
        "contest_id": "HumanEval/55",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fib(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n```\n",
            "```python\nclass Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b",
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b",
            "class Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b",
            "class Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b",
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a+b\n            return b",
            "class Solution:\n    def fib(self, n: int):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b",
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b",
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
            "class Solution:\n    def fib(self, n: int):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b",
            "class Solution:\n    def fib(self, n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b"
        ]
    },
    {
        "question_title": "correct_bracketing",
        "question_content": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/56",
        "contest_id": "HumanEval/56",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def correct_bracketing(self, brackets: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty or the last bracket in the stack is not an opening bracket. If either of these conditions is true, it returns False. If it is able to successfully match all opening brackets with closing brackets, it returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the opening brackets. When we encounter a closing bracket, we check if the last bracket in the stack is an opening bracket. If it is, we pop it from the stack. If it's not, or if the stack is empty, we return False. If the stack is empty after processing all brackets, we return True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty or the last bracket in the stack is not an opening bracket. If either of these conditions is true, it returns False. If it is not empty and the last bracket is an opening bracket, it pops the last bracket from the stack. If the stack is empty after going through all the brackets, it returns True, indicating that all opening brackets have corresponding closing brackets.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the opening brackets. When we encounter a closing bracket, we check if the last bracket in the stack is an opening bracket. If it is, we remove it from the stack. If it's not, or if the stack is empty, we return False. If we finish going through all the brackets and the stack is empty, we return True, indicating that every opening bracket has a corresponding closing bracket.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the last bracket in the stack is an opening bracket. If it is, it pops it from the stack. If it isn't, or if the stack is empty, it returns False. If the stack is empty at the end of the string, it returns True, indicating that every opening bracket has a corresponding closing bracket.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the last bracket in the stack is an opening bracket. If it is, it removes it from the stack. If it isn't, or if the stack is empty, it returns False. If it finishes going through all the brackets without returning False, it returns True if the stack is empty (meaning all opening brackets have a corresponding closing bracket).\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the opening brackets. When we encounter a closing bracket, we check if the last element in the stack is an opening bracket. If it is, we pop it from the stack. If it's not, or if the stack is empty, we return False. If the stack is empty at the end of the string, we return True, indicating that every opening bracket has a corresponding closing bracket.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the last bracket in the stack is an opening bracket. If it is, it pops it from the stack. If it isn't, or if the stack is empty, it returns False. If the stack is empty at the end of the string, it returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack\n```\n\nIn the above code, we use a stack to keep track of the opening brackets. When we encounter a closing bracket, we check if the last bracket in the stack is an opening bracket. If it is, we pop it from the stack. If it's not, or if the stack is empty, we return False. If the stack is empty at the end of the string, we return True, indicating that every opening bracket has a corresponding closing bracket.\n"
        ],
        "code_list": [
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"<\":\n                stack.append(bracket)\n            elif bracket == \">\":\n                if not stack or stack[-1] != \"<\":\n                    return False\n                stack.pop()\n        return not stack"
        ]
    },
    {
        "question_title": "monotonic",
        "question_content": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/57",
        "contest_id": "HumanEval/57",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def monotonic(self, l: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n            decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n            return increasing or decreasing\n```\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\nThis solution works by checking if all elements in the list are less than or equal to the next element (for monotonically increasing sequences) or all elements are greater than or equal to the next element (for monotonically decreasing sequences). If either condition is true, the function returns True, indicating that the list is monotonically increasing or decreasing. If neither condition is true, the function returns False.\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n            decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n            return increasing or decreasing\n```\n\nThis solution works by checking if all elements in the list are either monotonically increasing or decreasing. It does this by comparing each element to the next one in the list. If all elements are less than or equal to the next one (which means the list is increasing), the function returns True. If all elements are greater than or equal to the next one (which means the list is decreasing), the function returns True. If neither condition is met, the function returns False.\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\nThis solution works by checking if all elements in the list are either less than or equal to the next element (for a monotonically increasing sequence) or greater than or equal to the next element (for a monotonically decreasing sequence). If either condition is true, the function returns True, indicating that the list is monotonically increasing or decreasing. If neither condition is true, the function returns False.\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\nThis solution works by checking if all elements in the list are less than or equal to the next element (which would mean the list is monotonically increasing) or all elements are greater than or equal to the next element (which would mean the list is monotonically decreasing). If either of these conditions is true, the function returns True, otherwise it returns False.\n",
            "```python\nclass Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n            decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n            return increasing or decreasing\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n            decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n            return increasing or decreasing",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n            decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n            return increasing or decreasing",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",
            "class Solution:\n    def monotonic(self, l: list):\n        if len(l) < 2:\n            return True\n        else:\n            increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n            decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n            return increasing or decreasing"
        ]
    },
    {
        "question_title": "common",
        "question_content": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/58",
        "contest_id": "HumanEval/58",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def common(self, l1: list, l2: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n\nThis solution uses Python's built-in set data type to find the intersection of the two lists (i.e., the common elements), and then sorts the resulting list. The sorted() function is used to ensure that the output is in ascending order.\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n\nThis solution uses Python's built-in set data type to find the intersection of the two lists (i.e., the common elements), and then sorts the resulting list. The sorted function is used to ensure that the output is in ascending order.\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n\n# Test cases\nsolution = Solution()\nprint(solution.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(solution.common([5, 3, 2, 8], [3, 2]))  # [2, 3]\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n\nThis solution uses Python's built-in set data type to find the intersection of the two lists (i.e., the common elements), and then sorts the result. The '&' operator is used to find the intersection of two sets. The result is converted back to a list before being returned.\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n\ns = Solution()\nprint(s.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(s.common([5, 3, 2, 8], [3, 2]))\n```\n",
            "```python\nclass Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n\n# Test cases\nsolution = Solution()\nprint(solution.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(solution.common([5, 3, 2, 8], [3, 2]))  # [2, 3]",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))\n\ns = Solution()\nprint(s.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(s.common([5, 3, 2, 8], [3, 2]))",
            "class Solution:\n    def common(self, l1: list, l2: list):\n        return sorted(list(set(l1) & set(l2)))"
        ]
    },
    {
        "question_title": "largest_prime_factor",
        "question_content": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/59",
        "contest_id": "HumanEval/59",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def largest_prime_factor(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n```\n",
            "```python\nclass Solution:\n    def largest_prime_factor(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        largest_prime = -1\n        for i in range(2, n+1):\n            while n % i == 0 and is_prime(i):\n                largest_prime = i\n                n //= i\n                if n == 1:\n                    return largest_prime\n        return largest_prime\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n",
            "class Solution:\n    def largest_prime_factor(self, n: int):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        largest_prime = -1\n        for i in range(2, n+1):\n            while n % i == 0 and is_prime(i):\n                largest_prime = i\n                n //= i\n                if n == 1:\n                    return largest_prime\n        return largest_prime"
        ]
    },
    {
        "question_title": "parse_nested_parens",
        "question_content": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/6",
        "contest_id": "HumanEval/6",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def parse_nested_parens(self, paren_string: str)-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting with a counter, and updates the maximum level of nesting if the counter exceeds the maximum. When it encounters a closing parenthesis, it decrements the counter. The maximum level of nesting for each group is then appended to the result list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting with a `count` variable, and the maximum level of nesting with a `max_count` variable. When it encounters an opening parenthesis, it increments the `count` and updates `max_count` if necessary. When it encounters a closing parenthesis, it decrements the `count`. The `max_count` for each group is then appended to the `result` list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting by incrementing a count whenever it encounters an opening parenthesis and decrementing it whenever it encounters a closing parenthesis. It also keeps track of the maximum level of nesting it has encountered so far in the group. This maximum is then appended to the result list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting with a `count` variable, and the maximum level of nesting with a `max_count` variable. When it encounters an opening parenthesis, it increments the `count` and updates `max_count` if necessary. When it encounters a closing parenthesis, it decrements the `count`. The maximum level of nesting for each group is then appended to the `result` list, which is returned at the end.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting by incrementing a count whenever it encounters an opening parenthesis and decrementing it whenever it encounters a closing one. It also keeps track of the maximum level of nesting it has seen so far in the variable max_count. After going through all the characters in a group, it appends max_count to the result list.\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split(' ')\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in the input string. If the character is an open parenthesis, it increments a count and checks if this count is greater than the current maximum count. If it is, it updates the maximum count. If the character is a close parenthesis, it decrements the count. After going through all the characters in a group, it appends the maximum count to the result list. It then repeats this process for each group in the input string.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting by incrementing a count whenever it encounters an opening parenthesis and decrementing it whenever it encounters a closing parenthesis. It also keeps track of the maximum level of nesting it has seen so far in the max_count variable. After iterating over all characters in a group, it appends max_count to the result list.\n\nThe time complexity of this solution is O(n), where n is the total number of characters in all groups of parentheses. This is because it makes a single pass over each group of parentheses. The space complexity is also O(n), where n is the number of groups of parentheses, because it stores the result in a list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. It keeps track of the current level of nesting with a `count` variable, and the maximum level of nesting with a `max_count` variable. When it encounters an opening parenthesis, it increments the `count` and updates `max_count` if necessary. When it encounters a closing parenthesis, it decrements the `count`. The `max_count` for each group is then appended to the `result` list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            max_depth = 0\n            current_depth = 0\n            for char in group:\n                if char == '(':\n                    current_depth += 1\n                    if current_depth > max_depth:\n                        max_depth = current_depth\n                elif char == ')':\n                    current_depth -= 1\n            result.append(max_depth)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. If an open parenthesis is encountered, the current depth is incremented and the maximum depth is updated if necessary. If a close parenthesis is encountered, the current depth is decremented. The maximum depth is then appended to the result list.\n",
            "```python\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split(' ')\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result\n```\n\nThis solution works by iterating over each character in each group of parentheses. If an open parenthesis is encountered, the count is incremented and the maximum count is updated if necessary. If a close parenthesis is encountered, the count is decremented. The maximum count at any point is the depth of the deepest nesting of parentheses in the group. This is done for each group and the results are appended to the result list.\n"
        ],
        "code_list": [
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "from typing import List\n\nclass Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split(' ')\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split()\n        for group in groups:\n            max_depth = 0\n            current_depth = 0\n            for char in group:\n                if char == '(':\n                    current_depth += 1\n                    if current_depth > max_depth:\n                        max_depth = current_depth\n                elif char == ')':\n                    current_depth -= 1\n            result.append(max_depth)\n        return result",
            "class Solution:\n    def parse_nested_parens(self, paren_string: str) -> List[int]:\n        result = []\n        groups = paren_string.split(' ')\n        for group in groups:\n            count = 0\n            max_count = 0\n            for char in group:\n                if char == '(':\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                elif char == ')':\n                    count -= 1\n            result.append(max_count)\n        return result"
        ]
    },
    {
        "question_title": "sum_to_n",
        "question_content": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/60",
        "contest_id": "HumanEval/60",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sum_to_n(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\n# Test cases\nsolution = Solution()\nprint(solution.sum_to_n(30))  # Output: 465\nprint(solution.sum_to_n(100))  # Output: 5050\nprint(solution.sum_to_n(5))  # Output: 15\nprint(solution.sum_to_n(10))  # Output: 55\nprint(solution.sum_to_n(1))  # Output: 1\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\nsolution = Solution()\nprint(solution.sum_to_n(30))  # Output: 465\nprint(solution.sum_to_n(100))  # Output: 5050\nprint(solution.sum_to_n(5))  # Output: 15\nprint(solution.sum_to_n(10))  # Output: 55\nprint(solution.sum_to_n(1))  # Output: 1\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\ns = Solution()\nprint(s.sum_to_n(30))  # 465\nprint(s.sum_to_n(100))  # 5050\nprint(s.sum_to_n(5))  # 15\nprint(s.sum_to_n(10))  # 55\nprint(s.sum_to_n(1))  # 1\n```\n",
            "```python\nclass Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\n# Test cases\nsolution = Solution()\nprint(solution.sum_to_n(30))  # Output: 465\nprint(solution.sum_to_n(100))  # Output: 5050\nprint(solution.sum_to_n(5))  # Output: 15\nprint(solution.sum_to_n(10))  # Output: 55\nprint(solution.sum_to_n(1))  # Output: 1",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\nsolution = Solution()\nprint(solution.sum_to_n(30))  # Output: 465\nprint(solution.sum_to_n(100))  # Output: 5050\nprint(solution.sum_to_n(5))  # Output: 15\nprint(solution.sum_to_n(10))  # Output: 55\nprint(solution.sum_to_n(1))  # Output: 1",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))\n\ns = Solution()\nprint(s.sum_to_n(30))  # 465\nprint(s.sum_to_n(100))  # 5050\nprint(s.sum_to_n(5))  # 15\nprint(s.sum_to_n(10))  # 55\nprint(s.sum_to_n(1))  # 1",
            "class Solution:\n    def sum_to_n(self, n: int):\n        return sum(range(1, n+1))"
        ]
    },
    {
        "question_title": "correct_bracketing",
        "question_content": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/61",
        "contest_id": "HumanEval/61",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def correct_bracketing(self, brackets: str):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty or the last added bracket is not an opening bracket. If either of these conditions is true, it returns False. If the stack is empty after checking all the closing brackets, it returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nThis solution uses a stack to keep track of the brackets. When an opening bracket is encountered, it is pushed onto the stack. When a closing bracket is encountered, the top element of the stack is popped. If the top element is not an opening bracket or the stack is empty, the function returns False. If the stack is empty after processing all the brackets, the function returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the brackets. When we encounter an opening bracket, we push it onto the stack. When we encounter a closing bracket, we pop the top element from the stack and check if it matches. If it doesn't match or if the stack is empty, we return False. If the stack is empty at the end of the string, we return True, indicating that every opening bracket has a corresponding closing bracket.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it pops the last opening bracket from the stack. If the stack is empty (meaning there was no matching opening bracket for this closing bracket), it returns False. If there are still brackets left in the stack after checking all the brackets, it means there are unmatched opening brackets, so it returns False. If the stack is empty at the end, it means all brackets were matched, so it returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the opening brackets. When we encounter a closing bracket, we pop the last opening bracket from the stack and compare them. If they don't match, we return False. If the stack is not empty after all brackets have been processed, it means there are unmatched opening brackets, so we return False. If the stack is empty, it means all brackets have been matched, so we return True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nThis solution uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it pops the last opening bracket from the stack. If the stack is empty (meaning there was no matching opening bracket for this closing bracket), it returns False. If there are still brackets left in the stack after checking all the brackets, it means there are unmatched opening brackets, so it returns False. If the stack is empty at the end, it means all brackets were matched, so it returns True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n\nIn this solution, we use a stack to keep track of the brackets. When we encounter an opening bracket, we push it onto the stack. When we encounter a closing bracket, we pop the top element from the stack and compare it with the closing bracket. If they match, we continue. If they don't match or if the stack is empty (which means there is no matching opening bracket for this closing bracket), we return False. If the stack is empty after going through all the brackets (which means all opening brackets have a matching closing bracket), we return True.\n",
            "```python\nclass Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str) -> bool:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack",
            "class Solution:\n    def correct_bracketing(self, brackets: str):\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            elif bracket == \")\":\n                if not stack or stack.pop() != \"(\":\n                    return False\n        return not stack"
        ]
    },
    {
        "question_title": "derivative",
        "question_content": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/62",
        "contest_id": "HumanEval/62",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def derivative(self, xs: list):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        else:\n            # The derivative of x^n is n*x^(n-1)\n            # So we multiply each coefficient by its corresponding power and decrease the power by 1\n            return [i * xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We skip the first coefficient as it's the constant term and its derivative is 0\n        return [i * xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as its derivative is 0\n        return [i * xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        else:\n            return [n*xs[n] for n in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So, we multiply each coefficient by its index (power) and remove the first one\n        else:\n            return [i*xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        else:\n            # The derivative of x^n is n*x^(n-1)\n            # So, we multiply each coefficient by its corresponding power and decrease the power by 1\n            return [i * xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # Initialize an empty list to store the derivative coefficients\n        derivative_coefficients = []\n        \n        # Iterate over the coefficients of the polynomial\n        for i in range(1, len(xs)):\n            # Multiply the coefficient by its power and add 1 to the power\n            # Then append the result to the derivative_coefficients list\n            derivative_coefficients.append(i * xs[i])\n        \n        return derivative_coefficients\n```\n\nThis code works by iterating over the coefficients of the polynomial (ignoring the first coefficient, as it's the constant term and its derivative is always 0). For each coefficient, it multiplies the coefficient by its power (which is the power of the corresponding term in the original polynomial), and then adds 1 to the power. This is the rule for the derivative of a term in a polynomial. The result is appended to the derivative_coefficients list. The function then returns this list, which represents the coefficients of the derivative polynomial.\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        else:\n            return [n*xs[n] for n in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as it is not included in the derivative\n        return [i * xs[i] for i in range(1, len(xs))]\n```\n",
            "```python\nclass Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as it's no longer needed\n        return [i * xs[i] for i in range(1, len(xs))]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        else:\n            # The derivative of x^n is n*x^(n-1)\n            # So we multiply each coefficient by its corresponding power and decrease the power by 1\n            return [i * xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We skip the first coefficient as it's the constant term and its derivative is 0\n        return [i * xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as its derivative is 0\n        return [i * xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        else:\n            return [n*xs[n] for n in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So, we multiply each coefficient by its index (power) and remove the first one\n        else:\n            return [i*xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        else:\n            # The derivative of x^n is n*x^(n-1)\n            # So, we multiply each coefficient by its corresponding power and decrease the power by 1\n            return [i * xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # Initialize an empty list to store the derivative coefficients\n        derivative_coefficients = []\n        \n        # Iterate over the coefficients of the polynomial\n        for i in range(1, len(xs)):\n            # Multiply the coefficient by its power and add 1 to the power\n            # Then append the result to the derivative_coefficients list\n            derivative_coefficients.append(i * xs[i])\n        \n        return derivative_coefficients",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        else:\n            return [n*xs[n] for n in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as it is not included in the derivative\n        return [i * xs[i] for i in range(1, len(xs))]",
            "class Solution:\n    def derivative(self, xs: list):\n        # The derivative of a constant is 0\n        if len(xs) == 1:\n            return [0]\n        # The derivative of x^n is n*x^(n-1)\n        # So we start from the second coefficient and multiply each coefficient by its index\n        # We also remove the first coefficient as it's no longer needed\n        return [i * xs[i] for i in range(1, len(xs))]"
        ]
    },
    {
        "question_title": "fibfib",
        "question_content": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/63",
        "contest_id": "HumanEval/63",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fibfib(self, n: int):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n\nThis solution uses a dynamic programming approach to solve the problem. The function starts by initializing the first three values of the sequence. Then it iteratively calculates the next value in the sequence by adding the previous three values. This is done n - 2 times, where n is the input number. The final value is then returned as the result.\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]\n```\n\nThis solution uses a dynamic programming approach to compute the n-th element of the fibfib sequence. The base cases are defined as fibfib(0) = 0, fibfib(1) = 0, and fibfib(2) = 1. For n > 2, the n-th element of the sequence is computed as the sum of the (n-1)-th, (n-2)-th, and (n-3)-th elements of the sequence. The computed values are stored in a list for efficient access.\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]\n```\n\nThis solution uses a dynamic programming approach to solve the problem. It first checks the base cases (n=0, n=1, n=2), then it builds up the solution by iteratively adding the last three numbers in the sequence. The result is stored in a list, and the n-th number is returned.\n",
            "```python\nclass Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n+1):\n                fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n            return fib[n]",
            "class Solution:\n    def fibfib(self, n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c"
        ]
    },
    {
        "question_title": "vowels_count",
        "question_content": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/64",
        "contest_id": "HumanEval/64",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def vowels_count(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\nsolution = Solution()\nprint(solution.vowels_count(\"abcde\"))  # Output: 2\nprint(solution.vowels_count(\"ACEDY\"))  # Output: 3\nprint(solution.vowels_count(\"hello\"))  # Output: 2\nprint(solution.vowels_count(\"YEAR\"))  # Output: 1\nprint(solution.vowels_count(\"PYTHON\"))  # Output: 1\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = \"aeiou\"\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if i == len(s) - 1 and s[i].lower() == 'y':\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"yobrotyper\"))  # Output: 4\nprint(s.vowels_count(\"Yobrotyper\"))  # Output: 3\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = \"aeiou\"\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"YELLOW\"))  # Output: 3\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if i == len(s) - 1 and s[i].lower() == 'y':\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"yobrotyper\"))  # Output: 4\nprint(s.vowels_count(\"Yobrotyper\"))  # Output: 3\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\nsolution = Solution()\n\n# Test case 1\nprint(solution.vowels_count(\"abcde\"))  # Expected output: 2\n\n# Test case 2\nprint(solution.vowels_count(\"ACEDY\"))  # Expected output: 3\n\n# Test case 3\nprint(solution.vowels_count(\"\"))  # Expected output: 0\n\n# Test case 4\nprint(solution.vowels_count(\"Y\"))  # Expected output: 1\n\n# Test case 5\nprint(solution.vowels_count(\"y\"))  # Expected output: 1\n\n# Test case 6\nprint(solution.vowels_count(\"YELLOW\"))  # Expected output: 2\n```\n",
            "```python\nclass Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        s = s.lower()\n        count = sum(1 for char in s if char in vowels)\n        if s[-1] == 'y':\n            count += 1\n        return count\n\n# Test cases\nsolution = Solution()\n\n# Test case 1\nprint(solution.vowels_count(\"abcde\"))  # Output: 2\n\n# Test case 2\nprint(solution.vowels_count(\"ACEDY\"))  # Output: 3\n\n# Test case 3\nprint(solution.vowels_count(\"\"))  # Output: 0\n\n# Test case 4\nprint(solution.vowels_count(\"Y\"))  # Output: 1\n\n# Test case 5\nprint(solution.vowels_count(\"CONSONANTY\"))  # Output: 4\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\nsolution = Solution()\nprint(solution.vowels_count(\"abcde\"))  # Output: 2\nprint(solution.vowels_count(\"ACEDY\"))  # Output: 3\nprint(solution.vowels_count(\"hello\"))  # Output: 2\nprint(solution.vowels_count(\"YEAR\"))  # Output: 1\nprint(solution.vowels_count(\"PYTHON\"))  # Output: 1",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = \"aeiou\"\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if i == len(s) - 1 and s[i].lower() == 'y':\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"yobrotyper\"))  # Output: 4\nprint(s.vowels_count(\"Yobrotyper\"))  # Output: 3",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = \"aeiou\"\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"YELLOW\"))  # Output: 3",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if i == len(s) - 1 and s[i].lower() == 'y':\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"yobrotyper\"))  # Output: 4\nprint(s.vowels_count(\"Yobrotyper\"))  # Output: 3",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\ns = Solution()\nprint(s.vowels_count(\"abcde\"))  # Output: 2\nprint(s.vowels_count(\"ACEDY\"))  # Output: 3\nprint(s.vowels_count(\"hello\"))  # Output: 2\nprint(s.vowels_count(\"HELLO\"))  # Output: 1\nprint(s.vowels_count(\"Y\"))  # Output: 1\nprint(s.vowels_count(\"\"))  # Output: 0",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                count += 1\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n        return count\n\n# Test cases\nsolution = Solution()\n\n# Test case 1\nprint(solution.vowels_count(\"abcde\"))  # Expected output: 2\n\n# Test case 2\nprint(solution.vowels_count(\"ACEDY\"))  # Expected output: 3\n\n# Test case 3\nprint(solution.vowels_count(\"\"))  # Expected output: 0\n\n# Test case 4\nprint(solution.vowels_count(\"Y\"))  # Expected output: 1\n\n# Test case 5\nprint(solution.vowels_count(\"y\"))  # Expected output: 1\n\n# Test case 6\nprint(solution.vowels_count(\"YELLOW\"))  # Expected output: 2",
            "class Solution:\n    def vowels_count(self, s):\n        vowels = 'aeiou'\n        s = s.lower()\n        count = sum(1 for char in s if char in vowels)\n        if s[-1] == 'y':\n            count += 1\n        return count\n\n# Test cases\nsolution = Solution()\n\n# Test case 1\nprint(solution.vowels_count(\"abcde\"))  # Output: 2\n\n# Test case 2\nprint(solution.vowels_count(\"ACEDY\"))  # Output: 3\n\n# Test case 3\nprint(solution.vowels_count(\"\"))  # Output: 0\n\n# Test case 4\nprint(solution.vowels_count(\"Y\"))  # Output: 1\n\n# Test case 5\nprint(solution.vowels_count(\"CONSONANTY\"))  # Output: 4"
        ]
    },
    {
        "question_title": "circular_shift",
        "question_content": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/65",
        "contest_id": "HumanEval/65",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def circular_shift(self, x, shift):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift >= len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]\n```\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift > len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]\n```\n\nThis solution works by converting the integer to a string, then using Python's string slicing to shift the digits. If the shift is greater than the number of digits in the number, it returns the digits in reverse order.\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        len_x = len(x_str)\n        if shift >= len_x:\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]\n\nsolution = Solution()\nprint(solution.circular_shift(12, 1))  # Output: \"21\"\nprint(solution.circular_shift(12, 2))  # Output: \"12\"\n```\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift > len(x):\n            return x[::-1]\n        \n        # Perform the circular shift\n        return x[-shift:] + x[:-shift]\n```\n\nThis solution works by first converting the integer to a string. If the shift is greater than the number of digits in the number, it returns the string reversed. Otherwise, it performs the circular shift by slicing the string at the shift index and concatenating the two parts in reversed order.\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift >= len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]\n```\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x_str = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift >= len(x_str):\n            return x_str[::-1]\n        \n        # Perform the circular shift\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        \n        return shifted_str\n```\n\nThis solution works by first converting the integer to a string. If the shift is greater than or equal to the number of digits in the number, it returns the reversed string. Otherwise, it performs the circular shift by slicing the string at the shift index and concatenating the two parts in reversed order.\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x_str = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift >= len(x_str):\n            return x_str[::-1]\n        \n        # Otherwise, perform the circular shift\n        return x_str[-shift:] + x_str[:-shift]\n```\n\nThis solution works by first converting the integer to a string. If the shift is greater than or equal to the number of digits in the string, it returns the string reversed. Otherwise, it performs the circular shift by slicing the string from the end by the shift amount and concatenating the two slices in reverse order.\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift >= len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]\n```\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift >= len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]\n```\n",
            "```python\nclass Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift > len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]\n```\n\nThis solution converts the integer to a string, then checks if the shift is greater than the number of digits. If it is, it returns the string reversed. Otherwise, it slices the string from the end by the shift amount and concatenates the two slices in reverse order.\n"
        ],
        "code_list": [
            "class Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift >= len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift > len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        len_x = len(x_str)\n        if shift >= len_x:\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]\n\nsolution = Solution()\nprint(solution.circular_shift(12, 1))  # Output: \"21\"\nprint(solution.circular_shift(12, 2))  # Output: \"12\"",
            "class Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift > len(x):\n            return x[::-1]\n        \n        # Perform the circular shift\n        return x[-shift:] + x[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift >= len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x_str = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift >= len(x_str):\n            return x_str[::-1]\n        \n        # Perform the circular shift\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        \n        return shifted_str",
            "class Solution:\n    def circular_shift(self, x, shift):\n        # Convert the integer to a string\n        x_str = str(x)\n        \n        # If shift is greater than the number of digits, return the reversed string\n        if shift >= len(x_str):\n            return x_str[::-1]\n        \n        # Otherwise, perform the circular shift\n        return x_str[-shift:] + x_str[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift >= len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x_str = str(x)\n        if shift >= len(x_str):\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]",
            "class Solution:\n    def circular_shift(self, x, shift):\n        x = str(x)\n        if shift > len(x):\n            return x[::-1]\n        else:\n            return x[-shift:] + x[:-shift]"
        ]
    },
    {
        "question_title": "digitSum",
        "question_content": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/66",
        "contest_id": "HumanEval/66",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def digitSum(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n",
            "```python\nclass Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())",
            "class Solution:\n    def digitSum(self, s):\n        return sum(ord(c) for c in s if c.isupper())"
        ]
    },
    {
        "question_title": "fruit_distribution",
        "question_content": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/67",
        "contest_id": "HumanEval/67",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def fruit_distribution(self, s,n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges\n```\n\nThis solution works by splitting the input string `s` into a list of words, then mapping the even-indexed elements (which are the numbers representing the number of apples and oranges) to integers. The total number of fruits `n` is then subtracted from the sum of the number of apples and oranges.\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        \n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        \n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges\n```\n\nThis solution works by first splitting the input string `s` into a list of words, then mapping each second element (which are the numbers) to an integer. The result is a tuple of two integers, `apples` and `oranges`, representing the number of apples and oranges in the basket. The number of mangoes is then calculated by subtracting the number of apples and oranges from the total number of fruits `n`.\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string by spaces\n        split_s = s.split(' ')\n        \n        # Extract the number of apples and oranges\n        apples = int(split_s[0])\n        oranges = int(split_s[-1])\n        \n        # Calculate the number of mangoes\n        mangoes = n - apples - oranges\n        \n        return mangoes\n```\n",
            "```python\nclass Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Parse the string to get the number of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        \n        # Subtract the number of apples and oranges from the total number of fruits\n        # to get the number of mangoes\n        mangoes = n - apples - oranges\n        \n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string to get the count of apples and oranges\n        apples, oranges = map(int, s.split()[::2])\n        # Subtract the count of apples and oranges from the total fruits to get the count of mangoes\n        mangoes = n - apples - oranges\n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        # Split the string by spaces\n        split_s = s.split(' ')\n        \n        # Extract the number of apples and oranges\n        apples = int(split_s[0])\n        oranges = int(split_s[-1])\n        \n        # Calculate the number of mangoes\n        mangoes = n - apples - oranges\n        \n        return mangoes",
            "class Solution:\n    def fruit_distribution(self, s,n):\n        apples, oranges = map(int, s.split()[::2])\n        return n - apples - oranges"
        ]
    },
    {
        "question_title": "pluck",
        "question_content": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/68",
        "contest_id": "HumanEval/68",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def pluck(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= min_even:\n                if num < min_even:\n                    min_even = num\n                    min_index = i\n                elif i < min_index:\n                    min_index = i\n        return [min_even, min_index] if min_even != float('inf') else []\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= min_even:\n                if num < min_even:\n                    min_even = num\n                    min_index = i\n                elif i < min_index:\n                    min_index = i\n        return [min_even, min_index] if min_even != float('inf') else []\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        else:\n            return [smallest_even, smallest_even_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num < min_even:\n                min_even = num\n                min_index = i\n            elif num % 2 == 0 and num == min_even and i < min_index:\n                min_index = i\n        if min_even == float('inf'):\n            return []\n        return [min_even, min_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        \n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n\n        if smallest_even == float('inf'):\n            return []\n        else:\n            return [smallest_even, smallest_even_index]\n```\n",
            "```python\nclass Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= min_even:\n                if num < min_even:\n                    min_even = num\n                    min_index = i\n                elif i < min_index:\n                    min_index = i\n        return [min_even, min_index] if min_even != float('inf') else []",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= min_even:\n                if num < min_even:\n                    min_even = num\n                    min_index = i\n                elif i < min_index:\n                    min_index = i\n        return [min_even, min_index] if min_even != float('inf') else []",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        else:\n            return [smallest_even, smallest_even_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        min_even = float('inf')\n        min_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num < min_even:\n                min_even = num\n                min_index = i\n            elif num % 2 == 0 and num == min_even and i < min_index:\n                min_index = i\n        if min_even == float('inf'):\n            return []\n        return [min_even, min_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        \n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n\n        if smallest_even == float('inf'):\n            return []\n        else:\n            return [smallest_even, smallest_even_index]",
            "class Solution:\n    def pluck(self, arr):\n        if not arr:\n            return []\n        smallest_even = float('inf')\n        smallest_even_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num <= smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n        if smallest_even == float('inf'):\n            return []\n        return [smallest_even, smallest_even_index]"
        ]
    },
    {
        "question_title": "search",
        "question_content": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/69",
        "contest_id": "HumanEval/69",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def search(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def search(self, lst):\n        # Create a dictionary to store the frequency of each integer in the list\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n        # Iterate over the list in reverse order\n        for num in sorted(freq.keys(), reverse=True):\n            # If the frequency of the current number is greater than or equal to its value, return it\n            if freq[num] >= num:\n                return num\n\n        # If no such number is found, return -1\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        counter = Counter(lst)\n        max_val = max(counter.keys())\n        for i in range(max_val, 0, -1):\n            if i in counter and counter[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n",
            "```python\nclass Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def search(self, lst):\n        # Create a dictionary to store the frequency of each integer in the list\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n        # Iterate over the list in reverse order\n        for num in sorted(freq.keys(), reverse=True):\n            # If the frequency of the current number is greater than or equal to its value, return it\n            if freq[num] >= num:\n                return num\n\n        # If no such number is found, return -1\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        counter = Counter(lst)\n        max_val = max(counter.keys())\n        for i in range(max_val, 0, -1):\n            if i in counter and counter[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1",
            "class Solution:\n    def search(self, lst):\n        from collections import Counter\n        count = Counter(lst)\n        max_val = max(count.keys())\n        for i in range(max_val, 0, -1):\n            if i in count and count[i] >= i:\n                return i\n        return -1"
        ]
    },
    {
        "question_title": "filter_by_substring",
        "question_content": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/7",
        "contest_id": "HumanEval/7",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str)-> List[str]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nfrom typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n\n# Test cases\nsolution = Solution()\nprint(solution.filter_by_substring([], 'a'))  # Expected: []\nprint(solution.filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected: ['abc', 'bacd', 'array']\n```\n",
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n",
            "```python\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "from typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "from typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "from typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "from typing import List\n\nclass Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]\n\n# Test cases\nsolution = Solution()\nprint(solution.filter_by_substring([], 'a'))  # Expected: []\nprint(solution.filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected: ['abc', 'bacd', 'array']",
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
            "class Solution:\n    def filter_by_substring(self, strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]"
        ]
    },
    {
        "question_title": "strange_sort_list",
        "question_content": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/70",
        "contest_id": "HumanEval/70",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def strange_sort_list(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n\nThis solution works by first sorting the input list in ascending order. Then, it uses a while loop to repeatedly remove the smallest and largest elements from the list and append them to the result list. The loop continues until the list is empty. The result list is then returned.\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n",
            "```python\nclass Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result",
            "class Solution:\n    def strange_sort_list(self, lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result"
        ]
    },
    {
        "question_title": "triangle_area",
        "question_content": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/71",
        "contest_id": "HumanEval/71",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def triangle_area(self, a, b, c):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if a + b > c and a + c > b and b + c > a:\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            # Return area rounded to 2 decimal points\n            return round(area, 2)\n        else:\n            # Return -1 if the sides do not form a valid triangle\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides can form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate the semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate the area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n",
            "```python\nclass Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if a + b > c and a + c > b and b + c > a:\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            # Return area rounded to 2 decimal points\n            return round(area, 2)\n        else:\n            # Return -1 if the sides do not form a valid triangle\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides can form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate the semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate the area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1",
            "class Solution:\n    def triangle_area(self, a, b, c):\n        # Check if the three sides form a valid triangle\n        if (a < b + c) and (b < a + c) and (c < a + b):\n            # Calculate semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate area using Heron's formula\n            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n            return round(area, 2)\n        else:\n            return -1"
        ]
    },
    {
        "question_title": "will_it_fly",
        "question_content": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/72",
        "contest_id": "HumanEval/72",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def will_it_fly(self, q,w):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q,w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q,w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        \n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False",
            "class Solution:\n    def will_it_fly(self, q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False"
        ]
    },
    {
        "question_title": "smallest_change",
        "question_content": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/73",
        "contest_id": "HumanEval/73",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def smallest_change(self, arr):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n\nThis solution works by iterating over the first half of the array and comparing each element with the corresponding element from the end of the array. If they are not equal, we increment the `changes` counter. The time complexity of this solution is O(n), where n is the length of the array.\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-1-i]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-1-i]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n",
            "```python\nclass Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-1-i]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-1-i]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes",
            "class Solution:\n    def smallest_change(self, arr):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        return changes"
        ]
    },
    {
        "question_title": "total_match",
        "question_content": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/74",
        "contest_id": "HumanEval/74",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def total_match(self, lst1, lst2):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n\nThis solution works by first calculating the total number of characters in each list using a generator expression inside the sum function. It then compares these sums and returns the list with the smaller sum. If the sums are equal, it returns the first list.\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n\nThis solution works by first calculating the total number of characters in each list by summing the lengths of all the strings in each list. It then compares these sums and returns the list with the smaller sum. If the sums are equal, it returns the first list.\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        total_chars1 = sum(len(word) for word in lst1)\n        total_chars2 = sum(len(word) for word in lst2)\n        if total_chars1 < total_chars2:\n            return lst1\n        elif total_chars2 < total_chars1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n\nThis solution works by first calculating the total number of characters in each list using a generator expression inside the `sum()` function. It then compares these sums and returns the list with the smaller sum. If the sums are equal, it returns the first list.\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n",
            "```python\nclass Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        total_chars1 = sum(len(word) for word in lst1)\n        total_chars2 = sum(len(word) for word in lst2)\n        if total_chars1 < total_chars2:\n            return lst1\n        elif total_chars2 < total_chars1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(word) for word in lst1)\n        sum2 = sum(len(word) for word in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1",
            "class Solution:\n    def total_match(self, lst1, lst2):\n        sum1 = sum(len(s) for s in lst1)\n        sum2 = sum(len(s) for s in lst2)\n        if sum1 < sum2:\n            return lst1\n        elif sum2 < sum1:\n            return lst2\n        else:\n            return lst1"
        ]
    },
    {
        "question_title": "is_multiply_prime",
        "question_content": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/75",
        "contest_id": "HumanEval/75",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_multiply_prime(self, a):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` to check if a number is prime. Then, in the `is_multiply_prime` function, we iterate over all numbers from 2 to `a`. If `a` is divisible by the number and the number is prime, we add it to the list of factors and divide `a` by the factor. If there are more than 3 factors or the last factor is not prime, we return False. Otherwise, we return True if there are exactly 3 factors and the last factor is prime.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        # Function to check if a number is prime\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        # Count the number of prime factors\n        prime_factors = 0\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                prime_factors += 1\n\n        # If the number of prime factors is 3, return True\n        return prime_factors == 3\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. Then, it iterates over all numbers from 2 to `a - 1`, and for each number, it checks if `a` is divisible by the number and if the number is prime. If both conditions are met, it increments the count of prime factors. Finally, it returns whether the count of prime factors is 3.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        # Function to check if a number is prime\n        def is_prime(n):\n            if n <= 1:\n                return False\n            if n <= 3:\n                return True\n            if n % 2 == 0 or n % 3 == 0:\n                return False\n            i = 5\n            while i * i <= n:\n                if n % i == 0 or n % (i + 2) == 0:\n                    return False\n                i += 6\n            return True\n\n        # Count the number of prime factors\n        count = 0\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                count += 1\n\n        # Return True if the number of prime factors is 3\n        return count == 3\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. It then iterates over all numbers less than `a` and checks if they are a factor of `a` and if they are prime. If they are, it increments a counter. Finally, it returns whether the counter is 3.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` to check if a number is prime. Then, in the `is_multiply_prime` function, we iterate from 2 to `a` and for each number, if it is a factor of `a` and is prime, we add it to the list of factors and divide `a` by it. If the number of factors exceeds 3 or if the remaining `a` is not prime, we return False. Otherwise, if the number of factors is 3 and `a` is prime, we return True.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. It then iterates over all numbers from 2 to `a - 1`, checking if `a` is divisible by the number and if the number is prime. If it is, it adds the number to the list of factors and divides `a` by the number. If there are more than 3 factors or if the last factor is not prime, it returns False. Otherwise, it returns True.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. Then, in the `is_multiply_prime` function, we iterate over all numbers from 2 to `a` and check if `a` is divisible by the number and if the number is prime. If it is, we add it to the list of factors and divide `a` by the factor. If there are more than 3 factors or the final factor is not prime, we return False. Otherwise, we return True.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. Then, in the `is_multiply_prime` function, we iterate over all numbers from 2 to `a - 1`. If `a` is divisible by the current number and it is prime, we add it to the list of factors and divide `a` by it. If the number of factors exceeds 3, we return False. Finally, we check if the number of factors is 3 and the last factor is prime.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a number is prime. It then iterates over all numbers from 2 to `a`, checking if `a` is divisible by the number and if the number is prime. If it is, it adds the number to the list of factors and divides `a` by the number. If there are more than 3 factors or if `a` is not a prime number after all these checks, it returns False. Otherwise, it returns True.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` to check if a number is prime. Then, it iterates over all numbers from 2 to `a - 1`, checking if `a` is divisible by the number and if the number is prime. If it is, it adds the number to the list of factors and divides `a` by the number. If there are more than 3 factors or the last factor is not prime, it returns False. Otherwise, it returns True if there are exactly 3 factors and the last factor is prime.\n",
            "```python\nclass Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)\n```\n\nThis solution works by first defining a helper function `is_prime` that checks if a given number is prime. Then, in the `is_multiply_prime` method, we iterate from 2 to `a` and check if `a` is divisible by the current number and if it's prime. If it is, we add it to the list of factors and divide `a` by it. If the number of factors exceeds 3 or if the remaining `a` is not prime after all divisions, we return False. Otherwise, we return True if we've found exactly 3 factors and the remaining `a` is prime.\n"
        ],
        "code_list": [
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        # Function to check if a number is prime\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        # Count the number of prime factors\n        prime_factors = 0\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                prime_factors += 1\n\n        # If the number of prime factors is 3, return True\n        return prime_factors == 3",
            "class Solution:\n    def is_multiply_prime(self, a):\n        # Function to check if a number is prime\n        def is_prime(n):\n            if n <= 1:\n                return False\n            if n <= 3:\n                return True\n            if n % 2 == 0 or n % 3 == 0:\n                return False\n            i = 5\n            while i * i <= n:\n                if n % i == 0 or n % (i + 2) == 0:\n                    return False\n                i += 6\n            return True\n\n        # Count the number of prime factors\n        count = 0\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                count += 1\n\n        # Return True if the number of prime factors is 3\n        return count == 3",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)",
            "class Solution:\n    def is_multiply_prime(self, a):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        factors = []\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i):\n                factors.append(i)\n                a //= i\n                if len(factors) > 3:\n                    return False\n        return len(factors) == 3 and is_prime(a)"
        ]
    },
    {
        "question_title": "is_simple_power",
        "question_content": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/76",
        "contest_id": "HumanEval/76",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_simple_power(self, x, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False\n```\n",
            "```python\nclass Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return True\n        if n == 0:\n            return False\n        while x > 1:\n            if x % n != 0:\n                return False\n            x = x / n\n        return True",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False",
            "class Solution:\n    def is_simple_power(self, x, n):\n        if n == 1:\n            return True\n        if x == 1:\n            return True\n        if x == 0:\n            return False\n        i = 2\n        while i <= x:\n            if pow(n, i) == x:\n                return True\n            i += 1\n        return False"
        ]
    },
    {
        "question_title": "iscube",
        "question_content": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/77",
        "contest_id": "HumanEval/77",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def iscube(self, a):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a\n```\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a\n```\n\nThis solution works by taking the cube root of the input number (`a`), rounding it to the nearest integer, and then checking if cubing this integer gives the original input. If it does, then the input is a cube of some integer, and the function returns `True`. Otherwise, it returns `False`.\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x ** 3 == a\n```\n\nThis solution works by first rounding the cube root of the input number to the nearest integer. This gives the largest integer that is less than or equal to the cube root of the input number. Then it checks if this integer cubed is equal to the input number. If it is, then the input number is a cube of some integer, and the function returns True. Otherwise, it returns False.\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = round(a ** (1. / 3))\n        return x ** 3 == a\n```\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = round(a ** (1. / 3))\n        return x ** 3 == a\n```\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return int(round(a ** (1. / 3))) ** 3 == a\n```\n\nThis solution works by first taking the absolute value of the input number to handle negative inputs. It then calculates the cube root of the absolute value of the input number, rounds it to the nearest integer, and then squares that result to see if it matches the original input number. If it does, the function returns True, indicating that the input number is a cube of some integer; otherwise, it returns False.\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a\n```\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return round(a ** (1. / 3)) ** 3 == a\n```\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return round(a ** (1. / 3)) ** 3 == a\n```\n\nThis solution works by first converting the number to its absolute value (to handle negative numbers), then calculating the cube root of the number (raising it to the 1/3 power), rounding this to the nearest integer. If this rounded cube root is cubed and equals the original number, then the original number is a cube (and the function returns True). Otherwise, the function returns False.\n",
            "```python\nclass Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x ** 3 == a or (x+1) ** 3 == a or (x-1) ** 3 == a\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a",
            "class Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a",
            "class Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        x = round(a ** (1. / 3))\n        return x ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        x = round(a ** (1. / 3))\n        return x ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return int(round(a ** (1. / 3))) ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x * x * x == a",
            "class Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return round(a ** (1. / 3)) ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        if a < 0:\n            a = -a\n        return round(a ** (1. / 3)) ** 3 == a",
            "class Solution:\n    def iscube(self, a):\n        x = int(round(a ** (1. / 3)))\n        return x ** 3 == a or (x+1) ** 3 == a or (x-1) ** 3 == a"
        ]
    },
    {
        "question_title": "hex_key",
        "question_content": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/78",
        "contest_id": "HumanEval/78",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def hex_key(self, num):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n        return sum(1 for digit in num if digit in prime_hex)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(hex_digit in prime_hex_digits for hex_digit in num)\n```\n\nThis solution works by creating a list of prime hexadecimal digits. It then uses a generator expression to count the number of times each hexadecimal digit in the input string `num` is in the list of prime hexadecimal digits. The `sum` function then adds up these counts to give the total number of prime hexadecimal digits in `num`.\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(hex_digit in prime_hex_digits for hex_digit in num)\n```\n\nIn this solution, we define a list of prime hexadecimal digits. We then iterate over each hexadecimal digit in the input string `num` and count the number of times it appears in the list of prime hexadecimal digits. The `sum` function returns the total count.\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n",
            "```python\nclass Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n        return sum(1 for digit in num if digit in prime_hex)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(hex_digit in prime_hex_digits for hex_digit in num)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(hex_digit in prime_hex_digits for hex_digit in num)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)",
            "class Solution:\n    def hex_key(self, num):\n        prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n        return sum(1 for digit in num if digit in prime_hex_digits)"
        ]
    },
    {
        "question_title": "decimal_to_binary",
        "question_content": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/79",
        "contest_id": "HumanEval/79",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def decimal_to_binary(self, decimal):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n\nThis solution uses Python's built-in `bin` function to convert the decimal number to binary. The `bin` function returns a string that starts with \"0b\" to indicate that it's a binary number, so we use the `replace` function to remove this prefix. Finally, we add the 'db' characters at the beginning and end of the string.\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"\n```\n\nThis solution uses Python's built-in `bin` function to convert the decimal number to binary. The `bin` function returns a string that starts with \"0b\" to indicate that it's a binary number, so we use the `replace` method to remove this prefix. Finally, we add the \"db\" characters at the beginning and end of the binary string.\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal)[2:]\n        return \"db\" + binary + \"db\"\n```\n",
            "```python\nclass Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal)[2:]\n        return 'db' + binary + 'db'\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal).replace(\"0b\", \"\")\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal)[2:]\n        return \"db\" + binary + \"db\"",
            "class Solution:\n    def decimal_to_binary(self, decimal):\n        binary = bin(decimal)[2:]\n        return 'db' + binary + 'db'"
        ]
    },
    {
        "question_title": "sum_product",
        "question_content": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/8",
        "contest_id": "HumanEval/8",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sum_product(self, numbers: List[int])-> Tuple[int, int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n",
            "```python\nfrom typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_num = 0\n        product_num = 1\n        for num in numbers:\n            sum_num += num\n            product_num *= num\n        return (sum_num, product_num)\n```\n",
            "```python\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)\n```\n"
        ],
        "code_list": [
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "class Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "class Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)",
            "from typing import List, Tuple\n\nclass Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_num = 0\n        product_num = 1\n        for num in numbers:\n            sum_num += num\n            product_num *= num\n        return (sum_num, product_num)",
            "class Solution:\n    def sum_product(self, numbers: List[int]) -> Tuple[int, int]:\n        sum_numbers = 0\n        product_numbers = 1\n        for num in numbers:\n            sum_numbers += num\n            product_numbers *= num\n        return (sum_numbers, product_numbers)"
        ]
    },
    {
        "question_title": "is_happy",
        "question_content": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/80",
        "contest_id": "HumanEval/80",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_happy(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n",
            "```python\nclass Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s)-2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True",
            "class Solution:\n    def is_happy(self, s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True"
        ]
    },
    {
        "question_title": "numerical_letter_grade",
        "question_content": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/81",
        "contest_id": "HumanEval/81",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def numerical_letter_grade(self, grades):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n",
            "```python\nclass Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades",
            "class Solution:\n    def numerical_letter_grade(self, grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 1.0:\n                letter_grades.append('D+')\n            elif grade > 0.7:\n                letter_grades.append('D')\n            elif grade > 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades"
        ]
    },
    {
        "question_title": "prime_length",
        "question_content": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/82",
        "contest_id": "HumanEval/82",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def prime_length(self, string):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n\nThis solution defines a helper function `is_prime` that checks if a given number is prime. The function then returns the result of `is_prime` called with the length of the input string.\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n\nThis solution defines a helper function `is_prime` that checks if a number is prime. The function `prime_length` then uses this helper function to check if the length of the input string is prime.\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n <= 1:\n                return False\n            if n == 2:\n                return True\n            if n % 2 == 0:\n                return False\n            for i in range(3, int(n**0.5) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n\nThis solution defines a helper function `is_prime` that checks if a number is prime. It then uses this function to check if the length of the input string is prime.\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n\nThis solution defines a helper function `is_prime` that checks if a number is prime. It then uses this function to check if the length of the input string is prime.\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n",
            "```python\nclass Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))\n```\n\nThis code defines a helper function `is_prime(n)` that checks if a number `n` is prime. It then uses this function to check if the length of the input string is prime.\n"
        ],
        "code_list": [
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n <= 1:\n                return False\n            if n == 2:\n                return True\n            if n % 2 == 0:\n                return False\n            for i in range(3, int(n**0.5) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))",
            "class Solution:\n    def prime_length(self, string):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        return is_prime(len(string))"
        ]
    },
    {
        "question_title": "starts_one_ends",
        "question_content": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/83",
        "contest_id": "HumanEval/83",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def starts_one_ends(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n - 1))\n```\n\nThis solution works by using the fact that for an n-digit number, there are 2 * 9 ** (n - 1) numbers that start or end with 1. The base case is when n = 1, where there is only 1 number that starts or ends with 1 (1 itself).\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n - 1))\n```\n\nThis solution works by first checking if n is 1. If n is 1, it returns 1 because there is only one 1-digit number that starts or ends with 1. If n is not 1, it returns 2 times the number of n-1 digit numbers that start or end with 1. This is calculated by raising 9 to the power of n-1 (since there are 9 non-zero digits that can start or end with 1) and multiplying by 2 (for the two possible starting or ending 1's).\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if the input number is 1. If it is, we return 1 because there is only one 1-digit number that starts or ends with 1. If the input number is greater than 1, we return 2 times the number of n-1 digit numbers that start or end with 1. This is because for each n-digit number that starts or ends with 1, there are two possible n-1 digit numbers that can start or end with 1.\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if the number of digits `n` is 1. If it is, we return 1 because there is only one 1-digit number that starts or ends with 1. If `n` is greater than 1, we return 2 times the number of `n-1` digit numbers that start or end with 1. This is because for each `n-1` digit number that starts or ends with 1, there are two possible `n` digit numbers that start or end with 1.\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if n is 1. If n is 1, then there is only one 1-digit number that starts or ends with 1, so it returns 1. If n is not 1, then there are 2 * (9 ** (n-1)) such numbers. This is because for each n-digit number that starts or ends with 1, there are 2 possibilities (starts with 1 or ends with 1). The number of n-1 digit numbers is 9 (since we can choose from 0-9 for the remaining digits), so we multiply this by 2 to get the total number of n-digit numbers that start or end with 1.\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if the number of digits `n` is 1. If it is, then there is only one 1-digit number that starts or ends with 1, so it returns 1. If `n` is greater than 1, then there are 2 * (9 ** (n-1)) such numbers. This is because for each `n-1` digit number, there are 2 possibilities (starts with 1 or ends with 1).\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if the input number `n` is 1. If it is, we return 1 because there is only one 1-digit number that starts or ends with 1. If `n` is not 1, we return 2 times the number of `n-1` digit numbers that start or end with 1. This is because for each `n-1` digit number that starts or ends with 1, we can append a 1 to the front or back to get a `n` digit number that starts or ends with 1.\n\nFor example, for `n=2`, we have `10`, `11`, `12`, `13`, `14`, `15`, `16`, `17`, `18`, `19`, `21`, and `29`. There are 10 such numbers, so the function returns `2 * 10 = 20`.\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if n is 1. If it is, we return 1 because there is only one 1-digit number that starts or ends with 1. If n is not 1, we return 2 times the number of n-1 digit numbers that start or end with 1. This is because for each n-digit number that starts or ends with 1, there are two possible n-1 digit numbers that can start or end with 1.\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if n is 1. If n is 1, it returns 1 because there is only one 1-digit number that starts or ends with 1. If n is not 1, it returns 2 times the number of n-1 digit numbers that start or end with 1. This is calculated by raising 9 to the power of n-1 (since there are 9 non-zero digits that can start or end with 1) and multiplying by 2 (once for starting with 1 and once for ending with 1).\n",
            "```python\nclass Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))\n```\n\nThis solution works by first checking if the number of digits `n` is 1. If it is, we return 1 because there is only one 1-digit number that starts or ends with 1. If `n` is greater than 1, we return 2 times the number of `n-1` digit numbers that start or end with 1. This is because for each `n-1` digit number that starts or ends with 1, there are two possible `n` digit numbers that start or end with 1.\n"
        ],
        "code_list": [
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n - 1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n - 1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))",
            "class Solution:\n    def starts_one_ends(self, n):\n        if n == 1:\n            return 1\n        else:\n            return 2 * (9 ** (n-1))"
        ]
    },
    {
        "question_title": "solve",
        "question_content": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/84",
        "contest_id": "HumanEval/84",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def solve(self, N):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Convert each digit to integer and sum them up\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as string\n        return bin(total)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary_N = bin(N)[2:]\n        \n        # Convert each digit of the binary number to an integer and sum them up\n        sum_of_digits = sum(int(digit) for digit in binary_N)\n        \n        # Convert the sum to binary and return it as a string\n        return bin(sum_of_digits)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it as a string\n        return bin(total_sum)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits\n        total = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it\n        return bin(total)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n\n        # Convert each digit to an integer and sum them up\n        total_sum = sum(int(digit) for digit in binary)\n\n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it\n        return bin(total)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Convert each digit to integer and sum them\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as string\n        return bin(total)[2:]\n```\n",
            "```python\nclass Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Calculate the sum of the digits\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as a string\n        return bin(total)[2:]\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Convert each digit to integer and sum them up\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as string\n        return bin(total)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary_N = bin(N)[2:]\n        \n        # Convert each digit of the binary number to an integer and sum them up\n        sum_of_digits = sum(int(digit) for digit in binary_N)\n        \n        # Convert the sum to binary and return it as a string\n        return bin(sum_of_digits)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it as a string\n        return bin(total_sum)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total_sum = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits\n        total = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it\n        return bin(total)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n\n        # Convert each digit to an integer and sum them up\n        total_sum = sum(int(digit) for digit in binary)\n\n        # Convert the sum to binary and return as a string\n        return bin(total_sum)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        \n        # Calculate the sum of the digits in the binary representation\n        total = sum(int(digit) for digit in binary)\n        \n        # Convert the sum to binary and return it\n        return bin(total)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Convert each digit to integer and sum them\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as string\n        return bin(total)[2:]",
            "class Solution:\n    def solve(self, N):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(N)[2:]\n        # Calculate the sum of the digits\n        total = sum(int(digit) for digit in binary)\n        # Convert the sum to binary and return as a string\n        return bin(total)[2:]"
        ]
    },
    {
        "question_title": "add",
        "question_content": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/85",
        "contest_id": "HumanEval/85",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def add(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\nprint(s.add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 12\nprint(s.add([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))  # Output: 10\nprint(s.add([1]))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```\n",
            "```python\nclass Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\nprint(s.add([1, 2, 3, 4, 5, 6]))  # Output: 12\nprint(s.add([10, 20, 30, 40, 50]))  # Output: 60\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\nprint(s.add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 12\nprint(s.add([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))  # Output: 10\nprint(s.add([1]))  # Output: 0",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "class Solution:\n    def add(self, lst):\n        return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\ns = Solution()\nprint(s.add([4, 2, 6, 7]))  # Output: 2\nprint(s.add([1, 2, 3, 4, 5, 6]))  # Output: 12\nprint(s.add([10, 20, 30, 40, 50]))  # Output: 60"
        ]
    },
    {
        "question_title": "anti_shuffle",
        "question_content": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/86",
        "contest_id": "HumanEval/86",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def anti_shuffle(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n\nThis solution splits the input string into words, sorts each word's characters in ascending order based on their ASCII values, and then joins the sorted words back together with spaces in between.\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n\nThis solution splits the input string into words, sorts each word's characters in ascending order based on their ASCII values, and then joins the sorted words back together with spaces in between. The result is a string where all words are replaced by a new word where all the characters are arranged in ascending order based on ASCII values.\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n\nThis solution splits the input string into words, sorts each word's characters in ascending order based on their ASCII values, and then joins the sorted words back together with spaces in between. The result is a string where all words are replaced by a new word where all the characters are arranged in ascending order based on ASCII values.\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            new_word = ''.join(sorted(word))\n            result.append(new_word)\n        return ' '.join(result)\n```\n",
            "```python\nclass Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)\n\nsolution = Solution()\n\nprint(solution.anti_shuffle('Hi'))  # returns 'Hi'\nprint(solution.anti_shuffle('hello'))  # returns 'ehllo'\nprint(solution.anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            chars = list(word)\n            chars.sort(key=lambda x: ord(x))\n            result.append(''.join(chars))\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        result = []\n        for word in words:\n            new_word = ''.join(sorted(word))\n            result.append(new_word)\n        return ' '.join(result)",
            "class Solution:\n    def anti_shuffle(self, s):\n        words = s.split(' ')\n        ordered_words = [''.join(sorted(word)) for word in words]\n        return ' '.join(ordered_words)\n\nsolution = Solution()\n\nprint(solution.anti_shuffle('Hi'))  # returns 'Hi'\nprint(solution.anti_shuffle('hello'))  # returns 'ehllo'\nprint(solution.anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'"
        ]
    },
    {
        "question_title": "get_row",
        "question_content": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/87",
        "contest_id": "HumanEval/87",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def get_row(self, lst, x):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, col in enumerate(row):\n                if col == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order\n        coordinates.sort()\n        \n        # Sort coordinates of the row by columns in descending order\n        for i in range(len(coordinates)):\n            if i > 0 and coordinates[i][0] == coordinates[i-1][0]:\n                if coordinates[i][1] > coordinates[i-1][1]:\n                    coordinates[i], coordinates[i-1] = coordinates[i-1], coordinates[i]\n        \n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates\n```\n\nThis Python program uses a nested for loop to iterate through each element in the 2D list. If the element equals the target integer `x`, it appends the coordinates of that element to the `coordinates` list as a tuple. The coordinates are stored as (row, column).\n\nThe `coordinates` list is then sorted first by the row number in ascending order, and then by the column number in descending order. The `key` argument of the `sort` function is a lambda function that returns a tuple for each coordinate, where the first element is the row number and the second element is the negative of the column number. This ensures that the coordinates are sorted by row in ascending order and by column in descending order.\n\nFinally, the sorted `coordinates` list is returned.\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, item in enumerate(row):\n                if item == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order\n        coordinates.sort()\n        \n        # Sort coordinates of the row by columns in descending order\n        for i in range(len(coordinates)):\n            if i > 0 and coordinates[i][0] == coordinates[i-1][0]:\n                if coordinates[i][1] > coordinates[i-1][1]:\n                    coordinates[i], coordinates[i-1] = coordinates[i-1], coordinates[i]\n        \n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, value in enumerate(row):\n                if value == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates\n```\n\nThis solution iterates over each row and column in the given list, checking if the value at that position is equal to x. If it is, it adds the coordinates to the list of coordinates. It then sorts the list of coordinates first by row (in ascending order) and then by column (in descending order). The lambda function in the sort method is used to specify the sorting order.\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order and by columns in descending order\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order and by columns in descending order\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates\n```\n",
            "```python\nclass Solution:\n    def get_row(self, lst, x):\n        result = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n        result.sort(key=lambda y: (y[0], -y[1]))\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, col in enumerate(row):\n                if col == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order\n        coordinates.sort()\n        \n        # Sort coordinates of the row by columns in descending order\n        for i in range(len(coordinates)):\n            if i > 0 and coordinates[i][0] == coordinates[i-1][0]:\n                if coordinates[i][1] > coordinates[i-1][1]:\n                    coordinates[i], coordinates[i-1] = coordinates[i-1], coordinates[i]\n        \n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, item in enumerate(row):\n                if item == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order\n        coordinates.sort()\n        \n        # Sort coordinates of the row by columns in descending order\n        for i in range(len(coordinates)):\n            if i > 0 and coordinates[i][0] == coordinates[i-1][0]:\n                if coordinates[i][1] > coordinates[i-1][1]:\n                    coordinates[i], coordinates[i-1] = coordinates[i-1], coordinates[i]\n        \n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i, row in enumerate(lst):\n            for j, value in enumerate(row):\n                if value == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order and by columns in descending order\n        coordinates.sort(key=lambda y: (y[0], -y[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        coordinates = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n        \n        # Sort coordinates by rows in ascending order and by columns in descending order\n        coordinates.sort(key=lambda x: (x[0], -x[1]))\n        return coordinates",
            "class Solution:\n    def get_row(self, lst, x):\n        result = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n        result.sort(key=lambda y: (y[0], -y[1]))\n        return result"
        ]
    },
    {
        "question_title": "sort_array",
        "question_content": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/88",
        "contest_id": "HumanEval/88",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def sort_array(self, array):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            sorted_array = sorted(array)\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted_array[::-1]\n            else:\n                return sorted_array\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            sum_first_last = array[0] + array[-1]\n            if sum_first_last % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            sum_first_last = array[0] + array[-1]\n            if sum_first_last % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            sorted_array = sorted(array)\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted_array[::-1]\n            else:\n                return sorted_array\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return array\n        else:\n            sum_val = array[0] + array[-1]\n            if sum_val % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n",
            "```python\nclass Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            sorted_array = sorted(array)\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted_array[::-1]\n            else:\n                return sorted_array",
            "class Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            sum_first_last = array[0] + array[-1]\n            if sum_first_last % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            sum_first_last = array[0] + array[-1]\n            if sum_first_last % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            sorted_array = sorted(array)\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted_array[::-1]\n            else:\n                return sorted_array",
            "class Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return array\n        else:\n            sum_val = array[0] + array[-1]\n            if sum_val % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if len(array) == 0:\n            return []\n        elif len(array) == 1:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)",
            "class Solution:\n    def sort_array(self, array):\n        if not array:\n            return array\n        else:\n            if (array[0] + array[-1]) % 2 == 0:\n                return sorted(array, reverse=True)\n            else:\n                return sorted(array)"
        ]
    },
    {
        "question_title": "encrypt",
        "question_content": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/89",
        "contest_id": "HumanEval/89",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def encrypt(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted += char\n        return encrypted\n```\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result\n```\n\nThis solution works by iterating over each character in the input string. If the character is an alphabet, it calculates the shift by multiplying the position of the character in the alphabet by 2. Then, it adds 2 to the shift and takes the modulus of 26 to ensure the result is within the range of the alphabet. Finally, it converts the result back to a character using the chr function and appends it to the result string. If the original character was uppercase, it converts the result to uppercase. If the character is not an alphabet, it is appended to the result string as is.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string\n```\n\nThis solution works by iterating over each character in the input string. If the character is an alphabet, it calculates the ASCII value of 'A' or 'a' (depending on whether the character is uppercase or lowercase) and subtracts it from the ASCII value of the character. Then, it adds 2 (to shift the character down by two places) and multiplies it by 2 (as per the problem statement). The result is then taken modulo 26 (the number of letters in the alphabet) to ensure that the result is within the range of the alphabet. Finally, it adds the ASCII offset back to the result to get the ASCII value of the encrypted character, and converts this value back to a character using the chr function. If the character is not an alphabet, it is added to the encrypted string as is.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted_text = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_text += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_text += char\n        return encrypted_text\n```\n\nThis solution works by iterating over each character in the input string. If the character is an alphabet, it calculates the ASCII value of 'A' or 'a' (depending on whether the character is uppercase or lowercase) and subtracts it from the ASCII value of the character. Then, it adds 2 to the result (to shift the character down by two places) and multiplies it by 2. After that, it takes the modulus of the result with 26 (the number of letters in the alphabet) to ensure that the result is within the range of valid ASCII values for letters. Finally, it adds the ASCII offset back to the result to get the ASCII value of the encrypted character, and adds this character to the encrypted text. If the character is not an alphabet, it is directly added to the encrypted text.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string\n```\n\nThis solution works by iterating over each character in the input string. If the character is a letter, it calculates the ASCII value of 'A' or 'a' (depending on whether the character is uppercase or lowercase) and subtracts it from the ASCII value of the character. Then it adds 2 (to shift the character down by two places), multiplies it by 2 (as per the problem statement), and takes the modulus 26 (to ensure the result is within the range of the alphabet). Finally, it adds the ASCII offset back to the result to get the ASCII value of the encrypted character, and adds this character to the encrypted string. If the character is not a letter, it is added to the encrypted string as is.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result\n```\n\nThis Python solution uses the built-in `ord` function to get the ASCII value of a character, and the `chr` function to get the character represented by a ASCII value. The `isalpha` function is used to check if a character is a letter. The `%` operator is used to handle the wrap-around of the alphabet. The `upper` and `lower` functions are used to maintain the case of the original characters.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string\n```\n\nThis Python solution uses the built-in ord() function to get the ASCII value of a character, and the built-in chr() function to get the character represented by a specific ASCII value. The ASCII values of uppercase and lowercase letters are different, so we need to account for this when shifting the characters. The ASCII value of 'A' is 65 and 'a' is 97. We subtract these from the ASCII value of the character to get a value in the range 0-25, then add 2 to shift the character down by two, multiply by 2 to shift it two places, and take the modulus 26 to wrap around to the start of the alphabet if necessary. Finally, we add the ASCII offset back to get the ASCII value of the encrypted character. Non-alphabetic characters are left unchanged.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                encrypted += new_char.upper() if char.isupper() else new_char\n            else:\n                encrypted += char\n        return encrypted\n```\n\nThis solution works by iterating over each character in the input string. If the character is a letter, it calculates the shift by multiplying the position of the letter in the alphabet by two. It then adds two to this shift and takes the modulus of 26 to ensure the result is within the range of the alphabet. Finally, it converts the result back to a character using the chr function and adds it to the encrypted string. If the original character was uppercase, it converts the encrypted character to uppercase. If the original character was not a letter, it adds it to the encrypted string as is.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n            else:\n                encrypted += char\n        return encrypted\n```\n\nIn this solution, we iterate over each character in the input string. If the character is an alphabet, we calculate the ASCII value of 'A' or 'a' based on whether the character is uppercase or lowercase, and then add 2 to the ASCII value of the character. We then take the modulus of the result with 26 to ensure that we stay within the range of the alphabet. Finally, we convert the result back to a character using the chr function and add it to the encrypted string. If the character is not an alphabet, we simply add it to the encrypted string as is.\n",
            "```python\nclass Solution:\n    def encrypt(self, s):\n        encrypted_text = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_text += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_text += char\n        return encrypted_text\n```\n\nThis solution works by iterating over each character in the input string. If the character is an alphabet, it calculates the ASCII value of 'A' or 'a' based on whether the character is uppercase or lowercase, then adds 2 to the ASCII value of the character and takes modulo 26 to ensure the result is within the range of alphabets. The result is then converted back to a character using the chr function and added to the encrypted_text string. If the character is not an alphabet, it is directly added to the encrypted_text string.\n"
        ],
        "code_list": [
            "class Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted += char\n        return encrypted",
            "class Solution:\n    def encrypt(self, s):\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result",
            "class Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string",
            "class Solution:\n    def encrypt(self, s):\n        encrypted_text = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_text += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_text += char\n        return encrypted_text",
            "class Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string",
            "class Solution:\n    def encrypt(self, s):\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result",
            "class Solution:\n    def encrypt(self, s):\n        encrypted_string = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_string += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n            else:\n                encrypted_string += char\n        return encrypted_string",
            "class Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                shift = 2 * (ord(char.lower()) - ord('a'))\n                new_char = chr((shift + 2) % 26 + ord('a'))\n                encrypted += new_char.upper() if char.isupper() else new_char\n            else:\n                encrypted += char\n        return encrypted",
            "class Solution:\n    def encrypt(self, s):\n        encrypted = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n            else:\n                encrypted += char\n        return encrypted",
            "class Solution:\n    def encrypt(self, s):\n        encrypted_text = \"\"\n        for char in s:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_text += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n            else:\n                encrypted_text += char\n        return encrypted_text"
        ]
    },
    {
        "question_title": "rolling_max",
        "question_content": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/9",
        "contest_id": "HumanEval/9",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def rolling_max(self, numbers: List[int])-> List[int]:\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n\n        max_num = numbers[0]\n        result = [max_num]\n\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n\nThis solution works by iterating over the input list of numbers. For each number, it checks if it is greater than the current maximum number. If it is, it updates the maximum number and appends it to the result list. If it is not, it simply appends the current maximum number to the result list. The time complexity of this solution is O(n), where n is the length of the input list.\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n",
            "```python\nclass Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n\n        max_num = numbers[0]\n        result = [max_num]\n\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result",
            "class Solution:\n    def rolling_max(self, numbers: List[int]) -> List[int]:\n        if not numbers:\n            return []\n        max_num = numbers[0]\n        result = [max_num]\n        for num in numbers[1:]:\n            if num > max_num:\n                max_num = num\n            result.append(max_num)\n        return result"
        ]
    },
    {
        "question_title": "next_smallest",
        "question_content": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/90",
        "contest_id": "HumanEval/90",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def next_smallest(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]\n```\n\nThis solution works by first checking if the list has less than 2 elements. If it does, it returns None. If it does not, it sorts the list in ascending order and then returns the second element (index 1) of the sorted list.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None\n```\n\nThis solution first checks if the list has less than 2 elements. If so, it returns None. Then it removes duplicates from the list by converting it to a set and back to a list. It sorts the list in ascending order and returns the second element (index 1). If the list has only one unique element, it returns None.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        first_min = second_min = float('inf')\n        for num in lst:\n            if num < first_min:\n                second_min = first_min\n                first_min = num\n            elif first_min < num < second_min:\n                second_min = num\n        return None if second_min == float('inf') else second_min\n```\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        first_min = second_min = float('inf')\n        for num in lst:\n            if num < first_min:\n                second_min = first_min\n                first_min = num\n            elif first_min < num < second_min:\n                second_min = num\n        return None if second_min == float('inf') else second_min\n```\n\nThis solution works by initializing two variables, first_min and second_min, to infinity. It then iterates over the list, updating first_min and second_min as necessary. If a number in the list is less than first_min, it updates first_min and second_min. If a number is greater than first_min but less than second_min, it updates second_min. If there are less than two distinct numbers in the list, second_min remains as infinity, and the function returns None. Otherwise, it returns the second smallest number.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif smallest < num < second_smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        return second_smallest\n```\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]\n```\n\nThis solution works by first checking if the list has less than 2 elements. If it does, it returns None. If it does not, it sorts the list in ascending order and then returns the second element (index 1) of the sorted list.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None\n```\n\nIn the above code, we first check if the length of the list is less than 2. If it is, we return None because there are not enough elements to find the 2nd smallest.\n\nThen we convert the list to a set to remove any duplicates, and convert it back to a list. This is because the problem statement mentions that the list may contain duplicate elements.\n\nWe then sort the list in ascending order.\n\nFinally, we return the 2nd element of the sorted list (index 1, because Python uses 0-based indexing). If the list has only 1 element, we return None as there is no 2nd smallest element.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]\n```\n\nThis solution works by first checking if the list has less than 2 elements. If it does, it returns None. If it does not, it sorts the list in ascending order and then returns the second element (index 1) of the sorted list.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif smallest < num < second_smallest:\n                second_smallest = num\n        return None if second_smallest == float('inf') else second_smallest\n```\n\nThis solution works by first checking if the list has less than 2 elements. If it does, it returns None. Then it initializes two variables, smallest and second_smallest, to infinity. It iterates over the list, updating smallest and second_smallest as it finds smaller elements. If it finds an element that is in between smallest and second_smallest, it updates second_smallest. Finally, it returns second_smallest if it has been updated (i.e., it found a second smallest element), otherwise it returns None.\n",
            "```python\nclass Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None\n```\n\nThis solution first checks if the list has less than 2 elements. If so, it returns None. It then removes duplicates from the list by converting it to a set and back to a list. The list is then sorted in ascending order. The second smallest element is then returned. If there is no second smallest element (i.e., the list has only one unique element), None is returned.\n"
        ],
        "code_list": [
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        first_min = second_min = float('inf')\n        for num in lst:\n            if num < first_min:\n                second_min = first_min\n                first_min = num\n            elif first_min < num < second_min:\n                second_min = num\n        return None if second_min == float('inf') else second_min",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        first_min = second_min = float('inf')\n        for num in lst:\n            if num < first_min:\n                second_min = first_min\n                first_min = num\n            elif first_min < num < second_min:\n                second_min = num\n        return None if second_min == float('inf') else second_min",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif smallest < num < second_smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        return second_smallest",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif smallest < num < second_smallest:\n                second_smallest = num\n        return None if second_smallest == float('inf') else second_smallest",
            "class Solution:\n    def next_smallest(self, lst):\n        if len(lst) < 2:\n            return None\n        lst = list(set(lst))\n        lst.sort()\n        return lst[1] if len(lst) > 1 else None"
        ]
    },
    {
        "question_title": "is_bored",
        "question_content": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/91",
        "contest_id": "HumanEval/91",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def is_bored(self, S):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize boredom count\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment boredom count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count\n```\n\nThis solution uses the `re` module to split the input string into sentences. It then iterates over each sentence, checking if it starts with the word \"I\". If it does, it increments the boredom count. Finally, it returns the count of boredoms.\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [s.strip() for s in re.split('[.!?]', S) if s]\n\n        # Count the number of sentences that start with \"I\"\n        boredom_count = sum(1 for s in sentences if s.startswith('I'))\n\n        return boredom_count\n```\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize count\n        count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment count\n            if sentence.startswith(\"I\"):\n                count += 1\n\n        return count\n```\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize the count of boredoms\n        boredom_count = 0\n        \n        # Iterate over each sentence\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n        \n        # Return the count of boredoms\n        return boredom_count\n```\n\nThis solution uses the `re` module to split the input string into sentences. It then iterates over each sentence, checking if it starts with \"I\". If it does, it increments a counter. Finally, it returns the count of boredoms.\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize the count of boredoms\n        boredom_count = 0\n\n        # Iterate over the sentences\n        for sentence in sentences:\n            # Check if the sentence starts with \"I\"\n            if sentence.startswith('I'):\n                # If it does, increment the count\n                boredom_count += 1\n\n        # Return the count of boredoms\n        return boredom_count\n```\n\nThis solution uses the `re` module to split the string into sentences. It then iterates over the sentences and checks if each one starts with \"I\". If it does, it increments the count of boredoms. Finally, it returns the count of boredoms.\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize the count of boredoms\n        boredom_count = 0\n        \n        # Iterate over each sentence\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith('I'):\n                boredom_count += 1\n        \n        # Return the count of boredoms\n        return boredom_count\n```\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize the count of boredoms\n        boredom_count = 0\n\n        # Iterate over the sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        # Return the count of boredoms\n        return boredom_count\n```\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize boredom count\n        boredom_count = 0\n        \n        # Iterate over sentences\n        for sentence in sentences:\n            # Check if sentence starts with \"I\"\n            if sentence.startswith(\"I\"):\n                # Increment boredom count\n                boredom_count += 1\n        \n        return boredom_count\n```\n\nThis solution works by first splitting the input string into sentences using the `re.split` function. It then iterates over each sentence, and checks if it starts with the word \"I\". If it does, it increments the boredom count. Finally, it returns the count of boredoms.\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize boredom count\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count\n```\n",
            "```python\nclass Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [s.strip() for s in re.split('[.!?]', S) if s]\n\n        # Initialize count of boredoms\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize boredom count\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment boredom count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [s.strip() for s in re.split('[.!?]', S) if s]\n\n        # Count the number of sentences that start with \"I\"\n        boredom_count = sum(1 for s in sentences if s.startswith('I'))\n\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize count\n        count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment count\n            if sentence.startswith(\"I\"):\n                count += 1\n\n        return count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize the count of boredoms\n        boredom_count = 0\n        \n        # Iterate over each sentence\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n        \n        # Return the count of boredoms\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize the count of boredoms\n        boredom_count = 0\n\n        # Iterate over the sentences\n        for sentence in sentences:\n            # Check if the sentence starts with \"I\"\n            if sentence.startswith('I'):\n                # If it does, increment the count\n                boredom_count += 1\n\n        # Return the count of boredoms\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize the count of boredoms\n        boredom_count = 0\n        \n        # Iterate over each sentence\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith('I'):\n                boredom_count += 1\n        \n        # Return the count of boredoms\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize the count of boredoms\n        boredom_count = 0\n\n        # Iterate over the sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        # Return the count of boredoms\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n        \n        # Initialize boredom count\n        boredom_count = 0\n        \n        # Iterate over sentences\n        for sentence in sentences:\n            # Check if sentence starts with \"I\"\n            if sentence.startswith(\"I\"):\n                # Increment boredom count\n                boredom_count += 1\n        \n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n        # Initialize boredom count\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment the count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count",
            "class Solution:\n    def is_bored(self, S):\n        # Split the string into sentences\n        sentences = [s.strip() for s in re.split('[.!?]', S) if s]\n\n        # Initialize count of boredoms\n        boredom_count = 0\n\n        # Iterate over sentences\n        for sentence in sentences:\n            # If the sentence starts with \"I\", increment count\n            if sentence.startswith(\"I\"):\n                boredom_count += 1\n\n        return boredom_count"
        ]
    },
    {
        "question_title": "any_int",
        "question_content": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/92",
        "contest_id": "HumanEval/92",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def any_int(self, x, y, z):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False",
            "class Solution:\n    def any_int(self, x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            if x == y + z or y == x + z or z == x + y:\n                return True\n        return False"
        ]
    },
    {
        "question_title": "encode",
        "question_content": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/93",
        "contest_id": "HumanEval/93",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def encode(self, message):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution uses a dictionary to map vowels to their 2-place-ahead counterparts. It also uses the bitwise XOR operation with 32 to swap the case of non-vowels. The result is a string where all letters have been swapped case and all vowels have been replaced by their 2-place-ahead counterparts.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution works by iterating over each character in the input message. If the character is a letter, it checks if it is a vowel. If it is, it replaces it with the corresponding letter that appears 2 places ahead in the English alphabet. If it is not a vowel, it swaps its case by using the bitwise XOR operation with 32. If the character is not a letter, it is added to the encoded message as is.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nIn this solution, we first define a dictionary `vowels` that maps each vowel to the letter that appears 2 places ahead of that vowel in the English alphabet. Then, we iterate over each character in the input message. If the character is a letter, we check if it's a vowel. If it is, we add the corresponding encoded character to our `encoded_message`. If the character is not a vowel, we swap its case by XORing its ASCII value with 32, and add this new character to `encoded_message`. If the character is not a letter, we add it to `encoded_message` as is. Finally, we return `encoded_message`.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution works by iterating over each character in the message. If the character is a letter, it checks if it is a vowel. If it is, it replaces the vowel with the letter that appears 2 places ahead in the English alphabet. If the letter is not a vowel, it swaps its case by XORing its ASCII value with 32. If the character is not a letter, it is added to the encoded message as is.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution works by iterating over each character in the message. If the character is a letter, it checks if it is a vowel. If it is, it replaces the vowel with the letter that appears two places ahead in the English alphabet. If the letter is not a vowel, it swaps its case by XORing its ASCII value with 32. If the character is not a letter, it is added to the encoded message as is.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution uses a dictionary to map vowels to their 2-place-ahead counterparts. It then iterates over each character in the message. If the character is a letter and is a vowel, it replaces it with the corresponding counterpart from the dictionary. If the character is a vowel but not uppercase, it replaces it with the corresponding uppercase counterpart. If the character is not a vowel, it swaps its case by XORing it with 32 (the ASCII value of the space character). All other characters (including spaces and punctuation) are left unchanged.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nThis solution works by iterating over each character in the message. If the character is a letter, it checks if it is a vowel. If it is, it replaces it with the corresponding character in the `vowels` dictionary. If it is not a vowel, it swaps the case by XORing the ASCII value of the character with 32. If the character is not a letter, it is added to the encoded message as is.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nIn this solution, we first define a dictionary `vowels` that maps each vowel to its 2-place-ahead letter. Then we iterate over each character in the message. If the character is a letter, we check if it's a vowel. If it is, we add the corresponding 2-place-ahead letter to our encoded message. If it's not a vowel, we swap its case by XORing its ASCII value with 32 (the ASCII value of ' '), and add this to our encoded message. If the character is not a letter, we add it to our encoded message as is.\n",
            "```python\nclass Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message\n```\n\nIn this solution, we first define a dictionary `vowels` that maps each vowel to its 2-place-ahead letter. We then iterate over each character in the input message. If the character is a letter, we check if it's a vowel. If it is, we add the corresponding 2-place-ahead letter to our encoded message. If it's not a vowel, we swap its case by XORing its ASCII value with 32. If the character is not a letter, we add it to the encoded message as is.\n"
        ],
        "code_list": [
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = \"\"\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message",
            "class Solution:\n    def encode(self, message):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n                  'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        encoded_message = ''\n        for char in message:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_message += vowels[char]\n                else:\n                    encoded_message += chr(ord(char) ^ 32)\n            else:\n                encoded_message += char\n        return encoded_message"
        ]
    },
    {
        "question_title": "skjkasdkd",
        "question_content": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/94",
        "contest_id": "HumanEval/94",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def skjkasdkd(self, lst):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            largest_prime = max(primes)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0\n```\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0\n```\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            largest_prime = max(primes)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0\n```\n\nThis solution first defines a helper function `is_prime(n)` to check if a number is prime. It then uses a list comprehension to create a list of all prime numbers in the input list `lst`. If there are any prime numbers in the list, it finds the largest one and returns the sum of its digits. If there are no prime numbers, it returns 0.\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        def sum_digits(n):\n            return sum(int(digit) for digit in str(n))\n\n        primes = [num for num in lst if is_prime(num)]\n        if not primes:\n            return 0\n        max_prime = max(primes)\n        return sum_digits(max_prime)\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. Then it defines another helper function `sum_digits` to sum the digits of a number. The main function `skjkasdkd` first finds all prime numbers in the list, then returns the sum of the digits of the maximum prime number. If there are no primes, it returns 0.\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        def sum_of_digits(n):\n            return sum(int(digit) for digit in str(n))\n\n        max_prime = max(num for num in lst if is_prime(num))\n        return sum_of_digits(max_prime)\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. Then it defines another helper function `sum_of_digits` to calculate the sum of the digits of a number. The main function `skjkasdkd` finds the maximum prime number in the list and returns the sum of its digits.\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(int(digit) for digit in str(max(primes)))\n        else:\n            return 0\n```\n\nThis code first defines a helper function `is_prime(n)` to check if a number `n` is prime. Then it creates a list `primes` of all prime numbers in `lst`. If `primes` is not empty, it returns the sum of the digits of the maximum prime number in `primes`. Otherwise, it returns 0.\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        prime_numbers = [i for i in lst if is_prime(i)]\n        if prime_numbers:\n            largest_prime = max(prime_numbers)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0\n```\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. It then uses a list comprehension to create a list of all prime numbers in the input list. If there are any prime numbers, it returns the sum of their digits; otherwise, it returns 0.\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        prime_numbers = [i for i in lst if is_prime(i)]\n        if prime_numbers:\n            largest_prime = max(prime_numbers)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0\n```\n",
            "```python\nclass Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0\n```\n\nThis solution first defines a helper function `is_prime` to check if a number is prime. It then uses a list comprehension to create a list of all prime numbers in the input list. If there are any prime numbers, it returns the sum of their digits; otherwise, it returns 0.\n"
        ],
        "code_list": [
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            largest_prime = max(primes)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            largest_prime = max(primes)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        def sum_digits(n):\n            return sum(int(digit) for digit in str(n))\n\n        primes = [num for num in lst if is_prime(num)]\n        if not primes:\n            return 0\n        max_prime = max(primes)\n        return sum_digits(max_prime)",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        def sum_of_digits(n):\n            return sum(int(digit) for digit in str(n))\n\n        max_prime = max(num for num in lst if is_prime(num))\n        return sum_of_digits(max_prime)",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(int(digit) for digit in str(max(primes)))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        prime_numbers = [i for i in lst if is_prime(i)]\n        if prime_numbers:\n            largest_prime = max(prime_numbers)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        prime_numbers = [i for i in lst if is_prime(i)]\n        if prime_numbers:\n            largest_prime = max(prime_numbers)\n            return sum(int(digit) for digit in str(largest_prime))\n        else:\n            return 0",
            "class Solution:\n    def skjkasdkd(self, lst):\n        def is_prime(n):\n            if n < 2:\n                return False\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n\n        primes = [i for i in lst if is_prime(i)]\n        if primes:\n            return sum(map(int, str(max(primes))))\n        else:\n            return 0"
        ]
    },
    {
        "question_title": "check_dict_case",
        "question_content": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/95",
        "contest_id": "HumanEval/95",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def check_dict_case(self, dict):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            return all(lower_keys) or all(upper_keys)\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if any(all(lower_keys), all(upper_keys)):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if all(lower_keys) or all(upper_keys):\n                return True\n        return False\n```\n\nThis solution first checks if the dictionary is empty. If it is, the function returns False. Then it checks if all the keys in the dictionary are strings. If they are not, the function returns False. If all keys are strings, the function checks if all keys are in lower case or all keys are in upper case. If they are, the function returns True. If not, the function returns False.\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_case = all(key.islower() for key in keys)\n            upper_case = all(key.isupper() for key in keys)\n            return lower_case or upper_case\n        else:\n            return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if any(all(lower_keys), all(upper_keys)):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_case = all(key.islower() for key in keys)\n            upper_case = all(key.isupper() for key in keys)\n            return lower_case or upper_case\n        else:\n            return False\n```\n\nThis solution works by first checking if the dictionary is empty. If it is, the function returns False. Then it checks if all the keys in the dictionary are strings. If not, the function returns False. If all keys are strings, it checks if all keys are in lower case or all keys are in upper case. If either condition is True, the function returns True. If neither condition is True, the function returns False.\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n                return True\n        return False\n```\n",
            "```python\nclass Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            return all(lower_keys) or all(upper_keys)\n        else:\n            return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if any(all(lower_keys), all(upper_keys)):\n                return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if all(lower_keys) or all(upper_keys):\n                return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_case = all(key.islower() for key in keys)\n            upper_case = all(key.isupper() for key in keys)\n            return lower_case or upper_case\n        else:\n            return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_keys = [key.islower() for key in keys]\n            upper_keys = [key.isupper() for key in keys]\n            if any(all(lower_keys), all(upper_keys)):\n                return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            lower_case = all(key.islower() for key in keys)\n            upper_case = all(key.isupper() for key in keys)\n            return lower_case or upper_case\n        else:\n            return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(isinstance(key, str) for key in keys):\n            if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n                return True\n        return False",
            "class Solution:\n    def check_dict_case(self, dict):\n        if not dict:\n            return False\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        return False"
        ]
    },
    {
        "question_title": "count_up_to",
        "question_content": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/96",
        "contest_id": "HumanEval/96",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def count_up_to(self, n):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nIn the above code, we first define a helper function `is_prime(num)` to check if a number is prime. Then, we use a list comprehension to generate a list of prime numbers less than `n`. The list comprehension iterates over all integers from 2 to `n` (exclusive), checks if each integer is prime using the `is_prime` function, and includes it in the list if it is.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nIn this solution, we first define a helper function `is_prime` that checks if a number is prime. It does this by iterating from 2 to the square root of the number and checking if the number is divisible by any of these values. If it is, the function returns `False`, otherwise it returns `True`.\n\nThen, in the `count_up_to` method, we use a list comprehension to generate a list of numbers from 2 to `n` (exclusive) that are prime. We use the `is_prime` function to check if each number is prime. If it is, we include it in the list.\n\nFinally, we return the list.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nIn this solution, we first define a helper function `is_prime` to check if a number is prime. This function returns `False` if the number is less than 2 or if it is divisible by any number up to the square root of itself. If the number is not divisible by any of these numbers, it is prime and the function returns `True`.\n\nThen, in the `count_up_to` method, we use a list comprehension to generate a list of numbers from 2 to `n` (exclusive) that are prime. We use the `is_prime` function to check if each number is prime. If it is, we include it in the list.\n\nFinally, we return the list of prime numbers.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nThis solution defines a helper function `is_prime` that checks if a number is prime. It then uses a list comprehension to generate a list of prime numbers less than `n`.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nIn this solution, we first define a helper function `is_prime(num)` to check if a number is prime. This function checks if `num` is less than 2 (in which case it is not prime) or if `num` is divisible by any number up to the square root of `num` (in which case it is not prime). If `num` passes these tests, it is prime and the function returns `True`.\n\nThen, in the `count_up_to(self, n)` method, we use a list comprehension to generate a list of all prime numbers less than `n`. We do this by iterating over all numbers from 2 to `n` (exclusive), checking if each number is prime with the `is_prime(num)` function, and including it in the list if it is.\n\nFinally, we return the list of prime numbers.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nThis solution defines a helper function `is_prime` to check if a number is prime. It then uses a list comprehension to generate a list of prime numbers less than `n`.\n",
            "```python\nclass Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]\n```\n\nIn the above code, we first define a helper function `is_prime(num)` to check if a number is prime. It returns `False` if the number is less than 2 or if it is divisible by any number up to its square root. Otherwise, it returns `True`.\n\nIn the `count_up_to(n)` method, we use a list comprehension to generate a list of prime numbers less than `n`. We use the `is_prime(i)` function to check if each number `i` from 2 to `n-1` is prime. If `i` is prime, it is included in the list.\n\nThis solution assumes that `n` is a non-negative integer. If `n` can be 0 or negative, you should add error checking to handle these cases.\n"
        ],
        "code_list": [
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]",
            "class Solution:\n    def count_up_to(self, n):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        return [i for i in range(2, n) if is_prime(i)]"
        ]
    },
    {
        "question_title": "multiply",
        "question_content": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/97",
        "contest_id": "HumanEval/97",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def multiply(self, a, b):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_digit_a * unit_digit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Multiply the unit digits\n        result = unit_digit_a * unit_digit_b\n        \n        return result\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n\n        # Return the product of the unit digits\n        return unit_a * unit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of the numbers\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_digit_a * unit_digit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of the numbers\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n\n        # Return the product of the unit digits\n        return unit_a * unit_b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        a = abs(a) % 10\n        b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return a * b\n```\n",
            "```python\nclass Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Multiply the unit digits\n        result = unit_digit_a * unit_digit_b\n        \n        return result\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_digit_a * unit_digit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_a * unit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Multiply the unit digits\n        result = unit_digit_a * unit_digit_b\n        \n        return result",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n\n        # Return the product of the unit digits\n        return unit_a * unit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of the numbers\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return unit_digit_a * unit_digit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Get the unit digits of the numbers\n        unit_a = abs(a) % 10\n        unit_b = abs(b) % 10\n\n        # Return the product of the unit digits\n        return unit_a * unit_b",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        a = abs(a) % 10\n        b = abs(b) % 10\n        \n        # Return the product of the unit digits\n        return a * b",
            "class Solution:\n    def multiply(self, a, b):\n        # Extract the unit digits of a and b\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Multiply the unit digits\n        result = unit_digit_a * unit_digit_b\n        \n        return result"
        ]
    },
    {
        "question_title": "count_upper",
        "question_content": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/98",
        "contest_id": "HumanEval/98",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def count_upper(self, s):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n# Test cases\ns = Solution()\nprint(s.count_upper('aBCdEf'))  # returns 1\nprint(s.count_upper('abcdefg'))  # returns 0\nprint(s.count_upper('dBBE'))  # returns 0\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # Output: 1\nprint(solution.count_upper('abcdefg'))  # Output: 0\nprint(solution.count_upper('dBBE'))  # Output: 0\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # returns 1\nprint(solution.count_upper('abcdefg'))  # returns 0\nprint(solution.count_upper('dBBE'))  # returns 0\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # returns 1\nprint(solution.count_upper('abcdefg'))  # returns 0\nprint(solution.count_upper('dBBE'))  # returns 0\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n```\n",
            "```python\nclass Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n```\n"
        ],
        "code_list": [
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n# Test cases\ns = Solution()\nprint(s.count_upper('aBCdEf'))  # returns 1\nprint(s.count_upper('abcdefg'))  # returns 0\nprint(s.count_upper('dBBE'))  # returns 0",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # Output: 1\nprint(solution.count_upper('abcdefg'))  # Output: 0\nprint(solution.count_upper('dBBE'))  # Output: 0",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # returns 1\nprint(solution.count_upper('abcdefg'))  # returns 0\nprint(solution.count_upper('dBBE'))  # returns 0",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\nsolution = Solution()\nprint(solution.count_upper('aBCdEf'))  # returns 1\nprint(solution.count_upper('abcdefg'))  # returns 0\nprint(solution.count_upper('dBBE'))  # returns 0",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)",
            "class Solution:\n    def count_upper(self, s):\n        vowels = 'AEIOU'\n        return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"
        ]
    },
    {
        "question_title": "closest_integer",
        "question_content": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "platform": "HumanEval",
        "question_id": "HumanEval/99",
        "contest_id": "HumanEval/99",
        "contest_date": "2025-01-01T00:00:00",
        "starter_code": "class Solution:\n    def closest_integer(self, value):\n        ",
        "difficulty": "easy",
        "output_list": [
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n\nThis solution converts the string input to a float, then uses the built-in `round` function to round the float to the nearest integer. The `round` function automatically rounds away from zero if the float is equidistant between two integers.\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n\nThis solution converts the string input to a float and then uses the built-in `round` function to round it to the nearest integer. The `round` function already rounds to the nearest even number when the number is equidistant between two integers, so it meets the requirement of rounding away from zero.\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n```\n",
            "```python\nclass Solution:\n    def closest_integer(self, value):\n        return round(float(value))\n```\n\nThis solution works by converting the input string to a float using the built-in `float()` function, then rounding it to the nearest integer using the built-in `round()` function. The `round()` function automatically rounds away from zero if the number is equidistant between two integers.\n"
        ],
        "code_list": [
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))",
            "class Solution:\n    def closest_integer(self, value):\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)",
            "class Solution:\n    def closest_integer(self, value):\n        return round(float(value))"
        ]
    }
]